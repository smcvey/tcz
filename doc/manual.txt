                                _____       ___
  .----------------.     ____     |   |__| |__    ____
  |    _________    |             |   |  | |___
  |   |         `---'
  |   |  .--. .--..-------..--------..--------..--..--.  .--..-------.
  |   |  |  | |  ||   _   ||__.  .__||__.  .__||  ||   \ |  ||   ____|
  |   |  |  `-'  ||  |_|  |   |  |      |  |   |  ||    `|  ||  |  __
  |   |  |  .-.  ||   _   |   |  |      |  |   |  ||  |.    ||  |_|  |
  |   |  |  | |  ||  | |  |   |  |      |  |   |  ||  | \   ||       |
  |   |  `--' `--'`--' `--'   `--'      `--'   `--'`--'  `--'`-------'
  |   `---------------------------------------------------------------------.
  |_____________________________________________________________________    |
               .-------------------..-------..--.  .--..-------.        |   |
                \_______________   ||   _   ||   \ |  ||   ____|        |   |
                               /   ||  | |  ||    `|  ||  `---.         |   |
                   .----------'   / |  | |  ||  |.    ||   ___|         |   |
                    \    _______/   |  `-'  ||  | \   ||  `----.        |   | 
                     \   \          |_______||__|  \__||_______|        |   |
                      \   `---------------------------------------------'   |
                       \____________________________________________________|


-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
   -:-     T  H  E      O  F  F  I  C  I  A  L      M  A  N  U  A  L     -:-
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-


                     Manual release date:  20/5/2022.


 TCZ (The Chatting Zone) is an advanced, user-friendly multi-user environment,
                       which is fully user extendable.

                     The only limit is your imagination!


.-----------------------------------------------------------------------------.
|    TCZ is free software, which is distributed under version 2 of the GNU    |
| General Public License (See 'help gpl' in TCZ, or visit http://www.gnu.org) |
|-----------------------------------------------------------------------------|
|                For more information about TCZ, please visit:                |
|                        https://github.com/smcvey/tcz                        |
`============================================================================='

===============================================================================
   >>>>>                     How to get started...                     <<<<<
===============================================================================

Welcome to the virtual world of MUD's based on The Chatting Zone (TCZ)!

In this section of the manual, you'll learn how to get around on your chosen
TCZ-based MUD.  Before we start, you need to know the conventions used
thoughout this manual...

<NAME>  Represents the sort of information needed at that point in the
        command, e.g:  whisper <NAME> = <MESSAGE>  ...<NAME> and <MESSAGE>
        indicate what's needed at that point (I.e:  A character's name and
        a message to send to them)  -  DON'T include the <>'s!  An example of
        this command would be:  whisper fred = Hello!

[<NAME>]  Represents optional information that can be used at that point in
          the command.  Usually, the command will do something different if
          this optional information is supplied, e.g:  where [<NAME>]
          ...if <NAME> (The name of a character) is given, where tells you 
          where they currently are.  If <NAME> isn't given, where displays a
          list of every character who's connected and where the are.  Of
          course, DON'T include the []'s or the <>'s!  An example of this
          command would be:  where fred

'<TEXT>'  In most cases, text enclosed in ''s indicates something you type
          at your keyboard, e.g:  '@set me = male'.  Don't type the ''s -
          just type the text within, e.g:  @set me = male

TCZ-based MUDs aren't case sensitive, so it doesn't matter whether you type
commands in upper or lower case letters (Or both.)

-------------------------------------------------------------------------------

Connecting to a TCZ-based MUD and creating a character...
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
You can use a Telnet client or specialised MUD software computer to connect to
a TCZ-based MUD.

Simply open a connection to the address of the TCZ-based MUD on port number
8342 (You should be able to obtain the Telnet address of the TCZ-based MUD from
its web site, administrators or a public MUD list.)

Some Telnet software requires the port number (8342) to be typed in a
separate box.  Others require the address in the format tcz.mud.host:8342,
where tcz.mud.host is the Telnet address of the TCZ-based MUD.


Display problems and how to fix them...
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
(NOTE:  Skip this section if you are using a web browser to connect to the
        TCZ-based MUD.)

The TCZ-based MUD will attempt to automatically detect your screen and
terminal settings when you connect using Telnet software.  However, due
to the large number of different computers, terminals, Telnet software
and operating systems, it sometimes can fail.

If you find the TCZ-based MUD's title screen (Displayed when you first
connect) is messed up, try first of all pressing the RETURN/ENTER key
on your computer/terminal a few times.

If this doesn't solve the problem, try typing either SET LFTOCR CRLF or
SET LFTOCR LFCR.  One of these commands will usually fix the problem.

If you still have the problem, try SET LFTOCR OFF or SET LFTOCR CR.

If all of the above does not resolve your problems, please download better
Telnet software for your computer.

You may find that when you type, you can't see what you're typing on your
screen  -  There are two ways to fix this problem:  Either turn the LOCAL
ECHO option in your Telnet/communications software ON (You will usually find
this in the software's configuration/options screen/menu), or press RETURN
and type SET ECHO ON (This will tell the TCZ-based MUD to echo everything
you type back to your computer.)

If you always use the same computer/terminal to connect to the TCZ-based MUD,
you can make your echo preference permanent (I.e:  So you don't have to type
SET ECHO ON every time you connect) by typing SET ECHO ON once you have
connected (I.e:  At the command prompt.)


Once connected to the TCZ-based MUD...
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Once connected, you'll be asked for your name  -  This can be up to 20
characters long and will be who you will be known as on the TCZ-based MUD
(This can be your real name, or a nickname/alias.)

Providing no-one else is using the name you have entered, you'll be asked
whether you'd like to create a character with that name  -  Enter YES.

Next you'll see our disclaimer  -  Please read this carefully, and then type
ACCEPT to accept the terms detailed in it.  You must accept and abide by
these terms during your use and all future use of the TCZ-based MUD.

Then you'll be asked to enter a password for your character  -  This must be
at least 6 characters long.  Your password is used to prevent other users of
the TCZ-based MUD from malliciously using your character  -  Please choose a
password that you can remember, otherwise you won't be able to connect as
this character again in the future.

You'll then be asked to enter your password again for verification  -  This is
a safeguard in case you've typed it incorrectly the first time, or have already
forgotten it :)

You'll then be asked whether you can see what you're typing (If you're unsure,
try typing something  -  If text appears on your screen as you type, answer
YES, otherwise answer NO.

After this, you'll be asked for your gender  -  Please be honest about this and
enter either MALE, FEMALE, NEUTER appropriately.

You'll then be asked for your race  -  Example races are 'Human', 'Alien', etc.

You'll then be asked for your E-mail address.  This is for Admin. purposes only
and will be kept STRICTLY CONFIDENTIAL and cannot be seen by anyone else except
the TCZ-based MUD's administators (Unless you decide to make it public using
the EMAIL PUBLIC command  -  When you do this, any other user who uses the
FINGER/SCAN command on you will see your E-mail address.)

You'll then be asked a few more questions, which will help you set your time
difference (So the times and dates used on the TCZ-based MUD are correct for
your country, if you're an overseas user) and determine whether your computer
is capable of ANSI colour and underlined text (These will make the TCZ-based
MUD look more visually appealing if your computer/terminal supports them.)

When you connect to the TCZ-based MUD in future, simply type in the name of
your character and press RETURN/ENTER.  Then type their password (The one
you gave when you created them) followed by RETURN/ENTER.

-------------------------------------------------------------------------------

Making your character you...
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Now that you have created your new character, there are several things you
should do...

(1)  Read the official rules (Type 'help rules' on the TCZ-based MUD.)  You
     must understand and abide by these rules at ALL TIMES.  Failure to do
     so will result in action being taken against you, which could include
     banning you from using the TCZ-based MUD.

(2)  Read the tutorial for new users (Type 'tutorial newbie' on the TCZ-based
     MUD.)  This will teach you the basics and help you get started on the
     TCZ-based MUD.

(3)  Set your title (Which appears after your name in the user list ('who'))
     by typing 'title <TITLE>', e.g:  'title explores the TCZ-based MUD!'
     Your title is initially 'is new to <NAME OF TCZ-BASED MUD>!' (Until
     you change it.)

(4)  If you need to change your name, you can do so by typing '@name me =
     <NAME>'  -  However, you may only do this once every 15 minutes.
     If you need to urgently change your name, please ask an administrator
     to do it for you.

-------------------------------------------------------------------------------

Your private E-mail address...
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Please ensure that your private E-mail address is correct (Type 'scan' to
check.)

If it's incorrect, please ask an administrator to change it for you.  Type
'who admin' to see the administrators who are currently connected and then
type 'page admin = can someone change my private E-mail address for me,
please?'  If no administrators are connected, you will need to ask later.

Your private E-mail address can only be seen by yourself and the adminstrators
of the TCZ-based MUD, and will be kept STRICTLY CONFIDENTIAL.  An anonymous or
forwarding E-mail address (Widely available on the Internet) cannot be
accepted as a valid private E-mail address.  Please ensure that your
private E-mail address is your REAL E-mail address.

-------------------------------------------------------------------------------

Looking around...
~~~~~~~~~~~~~~~~~
The first thing you need to know to get around on the TCZ-based MUD is how
to move around and look at the room you're in and its contents...

To look at the room you're currently in, type the word 'look' on its own and
press RETURN.  You'll see something similar to the following...


The Pub
~~~~~~~
You are sitting at the bar of a busy, crowded town pub.  This is the local,
where everyone meets for a chat and a pint.  From an adjacent room, you
can hear the beeps and bleeps of video games.

Obvious exits:
~~~~~~~~~~~~~~
  Front entrance leading back onto the street (Out)
  Back door leading to the back yard (Back)
  The Games Room (Games)
  Public Toilet (Toilet)

At the bar, you see:
~~~~~~~~~~~~~~~~~~~~
  *Fred Bloggs
  *Joe Bloggs
  *Kate
  A Jukebox
  Bar


Room name and description
~~~~~~~~~~~~~~~~~~~~~~~~~
The first bit is the name of the room ('The Pub'.)  The next is the room's
description (What the room looks like, what takes place in it, etc.)


Obvious Exits:
~~~~~~~~~~~~~~
A list of exits will usually be shown if there are any leading from the room
to another room (In this case, the exits are listed under the title 'Obvious
exits:'.)

You can go through any of the exits listed by typing the short name displayed
in ()'s after the exit's name, e.g:  Typing 'games' will take you into 'The
Games Room'.  If you get stuck in a room that has no exits, you can usually
get out by typing either 'out', 'leave' or 'home' (Takes you back to your
home room.)


Contents:
~~~~~~~~~
A list of the room contents will usually be shown if there are any objects
or other connected characters in the room (In this case, the contents is
listed under the title 'At the bar, you see:'.)

Any other users who are currently connected and in the same room have a '*'
in front of their name (E.g:  '*Fred Bloggs'.)  You can talk to and interact
with these characters (Details how coming up next!)  Anything else is an
object (Some of which can be picked up by typing 'take <OBJECT>' and dropped
again by typing 'drop <OBJECT>'.)


Looking at objects and characters
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Objects and characters in the same room as you can be looked at by typing
'look [at] <NAME>' or 'look [at] <OBJECT>', e.g:  'look jukebox' or 'look
at jukebox'.

You can use the 'scan' or 'finger' command to look at other characters no
matter where they currently are located (It displays useful information about
them (Which you wouldn't see if you just 'look'ed at them.)), e.g:  'scan
fred bloggs'.  If you do this, you should see something similar to this...


-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
 Fred Bloggs - Page me if you'd like a chat!
-------------------------------------------------------------------------------
Hello!  Thanks for scanning me!

I'm Fred Bloggs, a new user around here learning how to get to grips with
everything, so please go easy on me.  If you'd like to know more about me IRL,
please take a look at my profile.
-------------------------------------------------------------------------------
 Longest connect time:  3 minutes and 13 seconds.
                          (Saturday 22nd July 2000, 3:52.30 am.)
 Total time connected:  6 minutes and 5 seconds.
                          (Average 2 minutes and 1 second.)
  Last time connected:  Saturday 22nd July 2000, 3:52.40 am (Still connected.)
                          (3 days, 4 hours, 12 minutes and 3 seconds ago.)
-------------------------------------------------------------------------------
   Race:  Mortal.
  Flags:  Ansi Colour, Yell, Male, Friends-Chat, Connected.
 Gender:  Male, Health:  100.0%, Score:  0, Credit:  50.00, Bank balance:
          500.00, Building Quota:  10/10.
-------------------------------------------------------------------------------
 E-mail address(es):  fred@bloggs.com  (Public)
   Current location:  Fred Bloggs's Home.
-------------------------------------------------------------------------------
 Fred Bloggs also has a profile about himself  -  Type 'profile fred bloggs' to
 view it.
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-


Another format of 'scan' is also available, which displays more detailed
information about a character.  Simply type 'scanfull' instead of 'scan'
to use it.

In general, 'scan' will display most of the useful information you will ever
need to know about another user.  Some users also have profiles, which can be
viewed by typing 'profile <NAME>'.  If a user has a profile, their 'scan' will
tell you this (See above example.)

Typing 'ex me' ('examine me') will give you in-depth information about your
character (You cannot use this command on other characters.)


HINTS:  Sometimes, you will find that typing a command will produce sufficient
        text to scroll off the top of your screen.  If you are unable to scroll
        back and view this text, you can use the 'more' paging facility built
        into the TCZ-based MUD to read it.  Simply type 'more' followed by the
        command.
        
        (NOTE:  Many commands which often result in excessive output ('who',
                'scan', 'examine', etc.) will automatically be paged using
                the 'more' paging facility (Unless you have disabled it,
                by typing 'set more off'.)

        If you use a different computer/terminal to connect to the the
        TCZ-based MUD than the one you normally use, we recommend you type
        'screenconfig' as soon as you connect, as this will configure the
        TCZ-based MUD to take best advantage of the computer/terminal you
        are currently using (If you see lots of strange codes when you
        connect, 'screenconfig' will usually fix this problem.)

        If you are using Telnet software to connect to the TCZ-based MUD, and
        it has its own built-in word wrapping facility, we recommend that you
        turn it off/disable it, because the TCZ-based MUD also has its own
        built-in word wrapping facility, and that built into Telnet software
        can conflict (Especially with some Telnet software, which doesn't
        take ANSI colour codes into account properly.)

        We recommend that you use the TCZ-based MUD with a screen that is
        at least 80 characters wide (Most output was designed with this in
        mind.)  However, if you have a wider screen than this, the TCZ-based
        MUD will usually take advantage of it (This depends on your Telnet
        software and computer/terminal.)

-------------------------------------------------------------------------------

Learning to talk...
~~~~~~~~~~~~~~~~~~~
One of the most common uses of an on-line multi-user environment such as a
TCZ-based MUD is for people from all around the world to connect and socialise
(Chat) with each other.  TCZ-based MUD's are equipped with a comprehensive
selection of commands to make chatting to each other easy and fun.  Some of
the main chatting/communication commands are listed below...

converse     Puts you in 'converse' mode (See section on the 'converse'
             command further on in this manual.)

"<MESSAGE>   Makes you say "<MESSAGE>" to everyone in the same room as you
             (NOTE:  You don't need a closing " on the end of your message!)

             You can use ' or ` instead of " if you prefer (These are easier
             to type for some (You don't have to press SHIFT!))

?<QUESTION>  Makes you ask "<QUESTION>".

+<THOUGHT>   Makes you think  . o O ( <THOUGHT> )

:<MESSAGE>   Makes you "pose" or "emote" <MESSAGE> to everyone in the same
;<MESSAGE>   room as you.  Your name is displayed followed by <MESSAGE>, e.g:
             typing ':waves.' would give something like 'Fred Bloggs waves.'
             Alternatively, you may use ';' instead of ':', if you prefer.

~<COMMAND>   Used mainly for testing query commands (Especially list/string/
             sentence processing queries, so you can see the resulting
             output.)  An alias for '@echo', which echoes the return result
             of <COMMAND> to your screen.

|<COMMAND>   Normally, when you type a command, the TCZ-based MUD searches up
             the area tree looking for a compound command of that name first,
             before testing to see if it's a built-in command.  This means
             that if someone created a compound command with the same name
             as a built-in internal command, that compound command would
             get executed instead of the internal command.

             To get round this, type a vertical bar '|' followed by the
             command you would like to execute.  This forces the TCZ-based
             MUD to ignore any compound commands with the same name (If they
             exist) and execute the command as an internal one.

tell <NAME> [=] <MESSAGE>  Tells <MESSAGE> to the character <NAME> (NOTE:  If
><NAME> [=] <MESSAGE>      the recipient is in the same room as you, everyone
.<NAME> [=] <MESSAGE>      else in the room will hear what you say  -  Use
                           either 'whisper' or 'page' to speak to people in
                           the same room secretly.)  You can use '>' or '.'
                           instead of 'tell' if you prefer.

page <NAME> [=] <MESSAGE>  Pages <MESSAGE> to the character <NAME>.  Only the
                           character who the paged message is directed at will
                           receive the message.  When they receive the message,
                           they'll also be told who sent it and where that
                           person currently is located.

whisper <NAME> [=] <MESSAGE>  Secretly (Unless you're a Moron) whispers
                              <MESSAGE> to the character <NAME> (Who must be in
                              the same room.)

-------------------------------------------------------------------------------

Finding out who's around...
~~~~~~~~~~~~~~~~~~~~~~~~~~~
A list of everyone who is currently connected can be obtained by typing 'users'
(Or 'who'.)  However, if a lot of users are connected, this list can be quite
long.  A more condensed list can be obtained by typing 'swho', which lists the
names of users only in columns.

If you can't seem to find anyone, you can find out where everyone currently is
by typing 'where' (This shows you the name of the room each person is in.)

-------------------------------------------------------------------------------

Other useful commands to know...
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

PLEASE NOTE:  This list is in ALPHABETICAL order, NOT in order of importance.
                              ~~~~~~~~~~~~

bbs             Takes you to the TCZ-based MUD's Bulletin Board System (BBS),
                where you can read the latest news and take part in topical
                discussions.

chat            Lets you join and talk over a chatting channel (See section
                on 'chat' for further details.)

friends         (See section on this feature further on in the manual.)
                Allows you to create your own personal list of friends
                and chat to them over the friends chatting channel.

help            Gives you on-line help on a wide variety of subjects and
                commands (Most of the contents of this manual are available
                on-line via the On-Line Help System.)  See 'help index' for
                a list of subjects.

                NOTE:  Also, see 'tutorial newbie'  -  This is a tutorial for
                       new users and will teach you the basics of getting
                       around and talking on a TCZ-based MUD.

home            Sends you back to your home room (Set by typing 'home here'
                while in the room you want to make your home.)

latest          Lists the most recent messages on the TCZ-based MUD's
                Bulletin Board System (BBS) (In order of most recent first),
                along with their message number and the topic they're in.

mail            Allows you to send mail to other users (So they can read it
                when they next log on) and read mail that others have sent
                to you.

news            Takes you to the TCZ-based MUD's Bulletin Board System (BBS)
                and changes your current selected topic to 'News', so that
                you can read the latest news.

QUIT            Disconnects you from the TCZ-based MUD (Logs you off.)  It
                must be typed in full and in capital letters.

@quota          Most useful to Builders.  Gives summary of objects you own
                and how much Building Quota you have in use.

recall          Lets you recall messages sent to you via 'page' or 'tell'
                and reply to them.

repeat          Re-sends the last message you sent via 'page' or 'tell' to
                a different character.

reply           Replies to the sender of the last message via 'page' or 'tell'.

scan            Gives you lots of useful information about yourself or another
                character, e.g:  'scan me', 'scan fred bloggs', etc.

score           Tells you your Building Quota limit and how much you currently
                have in use, how much score you've obtained and how much
                credit (Money) you have.

screenconfig    Takes you through a few simple questions which will
                automatically determine whether your computer/terminal
                supports coloured text (ANSI colour) and/or underlined
                text, enabling you to get the best and most suitable
                display for your computer/terminal.

@stats          Tells you the total number of objects in the database of
                the TCZ-based MUD and how many of each type of object you
                own (Giving percentages out of the total for each type.)

summary         Lists topics on the TCZ-based MUD's Bulletin Board System (BBS)
                which have new messages in them along with message number and
                title of most recently added message in each.

tutorial        Gives you on-line tutorials (Aimed at complete beginners) on
                a variety of subjects.  See 'tutorial index' for a complete
                list of available on-line tutorials.

                NOTE:  Also see 'tutorial newbie'  -  This is a tutorial for
                       new users and will teach you the basics of getting
                       around and talking on a TCZ-based MUD.

where           Lists everyone connected to the TCZ-based MUD and the room
                they're currently in.  Useful for finding out where everyone
                currently is located.


Setting your home...
~~~~~~~~~~~~~~~~~~~~
Your home is the room you go to when you type the command 'home'.  Your home
will usually be set to a default room (Decided by the administrators of the
TCZ-based MUD) when you first create a new character.

If you'd like your own proper home, you can either take up residence in
purpose built rooms provided by the administrators of the TCZ-based MUD
(Please ask an administrator or read the help on the TCZ-based MUD for
more detailed information) or ask for a BUILDER flag and build and
customise your very own home.

You can change your home to any room that you own, or to any other room that
has its ABODE flag set (When someone elses room has its ABODE flag set, or
you're in a room of your own, you'll see a number and a series of letters in
brackets after its name (Flags)), e.g:


The Junkpile(#0 RADHQyFST)
~~~~~~~~~~~~~~~~~~~~~~~~~~


You can set your home to any room with its ABODE (A) flag by typing
'home here' while you are in the room.  Alternatively, if you know the
#ID number of the room (#0 in this case), you can type '@link me = #<ID>',
where #<ID> is the ID of the room.  For example:  '@link me = #0'.

You can set your home to any room that you own, regardless of whether it has
its ABODE flag set or not.


===============================================================================
   >>>>>                TCZ-based MUD Character Levels                 <<<<<
===============================================================================


The Supreme Being
~~~~~~~~~~~~~~~~~
The Supreme Being is the highest level administrator and cannot be promoted or
demoted.  Unlike other ranks, there can only be one Supreme Being in the
entire TCZ-based MUD's database.

The System Administrator of the site at which the TCZ-based MUD is running
usually has full control over this character to maintain the TCZ-based MUD's
database.

The Supreme Being is similar to the Super User (SU) of an Operating System
such as UNIX and has the highest possible level of privileges, giving them
full 'read' and 'write' permission over every object and character in the
entire TCZ-based MUD's database.


Deities
~~~~~~~
USAGE:  @set *<NAME> = DEITY    (Promotion)
        @set *<NAME> = !DEITY   (Demotion)

The Deity rank is the highest rank that can be achieved by Administrators
of a TCZ-based MUD.  It is awarded to administrators with extensive knowledge
of the TCZ-based MUD, building/coding and administration.  It is also commonly
used for ownership of building/coding projects with Compound Commands
which require the low restrictions of the Deity rank.

Deities have 'read' and 'write' privileges to all characters below their
level and objects owned by them.  This includes all users and administrators
upto the level of Elder Wizard/Druid.  They do not have 'read' or 'write'
permission to each other or The Supreme Being.


Wizards
~~~~~~~
        (Promotion)                   (Demotion)
USAGE:  @set *<NAME> = APPRENTICE     @set *<NAME> = !APPRENTICE
        @set *<NAME> = WIZARD         @set *<NAME> = !WIZARD
        @set *<NAME> = ELDER          @set *<NAME> = !ELDER

There are three ranks of Wizard administrators:  Apprentice Wizard (A),
Wizard (W) and Elder Wizard (E).

Wizards are mainly building and coding oriented, and should be approached
with building/coding related questions and problems.  Problems with users
should ideally be refered to Druid administrators, unless none are
currently available.

The Apprentice Wizard status is for new trainee Wizard administrators, to
prepare them for duties as a full Wizard.  A user must achieve Experienced
Builder status first as a Mortal before they can be promoted to Apprentice
Wizard status.  This is to ensure that all new Apprentice Wizards have the
basic skills required for the rank.

Apprentice Wizard privileges are mainly read-only, to minimalise causing
accidental damage while learning new skills and getting used to
administration.  If an Apprentice Wizard has any questions or is unsure
about how to handle a particular situation, they should ask an administrator
of a higher level, preferably a Wizard or Elder Wizard.

Wizards and above have full 'read' and 'write' privileges to all users below
their level and objects owned by them.

The Elder Wizard status is reserved for long standing Wizards who have
expert building and coding knowledge.


Summary of Apprentice Wizard duties:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*  Welcoming and giving general assistance to new users.
*  Giving building assistance to new builders.
*  Learning how to deal with problem users.
*  Learning how to check for and deal with duplicate users.
*  Learning advanced building/coding.
*  Asking Wizards or Elder Wizards about anything they are unsure about.


Summary of Wizard and Elder Wizard duties:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*  Welcoming and giving assistance to new users.
*  Dealing with abusive, offensive and problem users.
*  Dealing with offensive or abusive material built by users.
*  Dealing with building and coding problems.
*  Building needed global compound commands and areas which are beneficial
   to the TCZ-based MUD as a whole.
*  Evaluating Building Quota rises for users working on large projects.
*  Checking for and dealing with bad or extremely ineffecient use of
   Building Quota and/or database space usage.
*  Checking for and dealing with any Admin. power abuse.
*  Checking for and dealing with hackers.


Druids
~~~~~~
        (Promotion)                         (Demotion)
USAGE:  @set *<NAME> = APPRENTICE DRUID     @set *<NAME> = !APPRENTICE
        @set *<NAME> = WIZARD DRUID         @set *<NAME> = !WIZARD
        @set *<NAME> = ELDER DRUID          @set *<NAME> = !ELDER

There are three ranks of Druid administrators:  Apprentice Druid (a), Druid
(w) and Elder Druid (e).

Druids are mainly social orientated, and should be approached with
non-building related questions and problems, especially where abusive
and offensive users are concerned.

Building and coding questions should be refered to Wizard administrators,
unless it is a simple question or problem which can easily be answered or
dealt with (I.e:  By pointing user to appropriate help page.)  Even if you
do refer a question, you should make an attempt to find out the answer, so
you can take the correct action the next time you are asked.

The Apprentice Druid status is for new trainee Druid administrators, to
prepare them for duties as a full Druid.  A user must achieve Assistant
status first as a Mortal before they can be promoted to Apprentice Druid
status.  This is to ensure that all new Apprentice Druids have the basic
skills required for the rank.

Apprentice Druid privileges are mainly read-only, to minimalise causing
accidental damage while learning new skills and getting used to
administration.  If an Apprentice Druid has any questions or is unsure
about how to handle a particular situation, they should ask an administrator
of a higher level, preferably a Druid or Elder Druid.

Druids and above have full 'read' and 'write' privileges to all users below
their level.

The Elder Druid status is reserved for long standing Druids who have expert
knowledge and interpersonal skills.


Summary of Apprentice Druid duties:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*  Welcoming and giving general assistance to new users.
*  Learning how to deal with problem users.
*  Learning how to check for and deal with duplicate users.
*  Asking Druids or Elder Druids about anything they are unsure about.


Summary of Druid and Elder Druid duties:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*  Welcoming and giving assistance to new users.
*  Dealing with abusive, offensive and problem users.
*  Dealing with and resolving desputes between users and/or Admin.
*  Checking for and dealing with offensive or abusive material built or
   posted to the BBS by users.
*  Dealing with any building problems which are within scope of knowledge,
   refering to Wizard administration where neccessary.
*  Checking for and dealing with any Admin. power abuse.


Administrator duties in general (For ALL administration levels)...
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*  Welcoming new users ('welcome [<NAME>]'.)

*  Giving help and assistance to users who ask for it ('assist [<NAME>]'.)

*  Dealing with requests for new characters ('@request'.)

*  Dealing with duplicate and ASHCAN'ed characters ('@destroy *<NAME> = yes = 
   <REASON>'.)

*  Dealing with users using the 'bug', 'comment', 'complain', 'suggest' and
   'emergency' commands, if you are able to.

*  Making sure titles are not abusive or offensive (These can be reset with
   '@title *<NAME>', if the character refuses to change it, when asked.)

*  Punishing abusive/problem users and hackers (See the Official Rules for
   details of the punishments which should be issued, and the order in which
   they are issued.)

*  Setting name prefixes ('@prefix <NAME> = <NAME PREFIX>') and name suffixes
   ('@suffix <NAME> = <NAME SUFFIX>'.)  Please make sure they are abusive,
   offensive or use censored words.

*  Changing a forgotten password for a character ('@newpassword <NAME> = 
   <NEW PASSWORD>')  -  Please ensure that they are authentic, and not
   somebody else, trying to hack into another person's character.  (One way
   to do this is to check their E-mail address, and send their new password
   to the E-mail address they have set on the TCZ-based MUD.)

*  Setting BUILDER flags ('@set *<NAME> = builder'), after checking that the
   potential Builder has set their E-Mail address, and is not a duplicate 
   character (Use 'checkb <NAME>' to check.)

*  Teleporting Builders' Top Areas to 'The Top Area For Builders(#646)' 
   ('@tel #<ID> = #646' or 'toptel #<ID>'.)

*  Assessing Building Quota rises for Builders ('@quotalimit'), having checked
   the quality of what they have built so far.  Please see following section
   on 'Building Quota' for further details regarding Building Quota increases.

*  Setting Experienced Builder ('@set *<NAME> = experienced') or Assistant
   ('@set *<NAME> = assistant') flags on users, as a result of a vote in
   favour on the TCZ-based MUD's BBS between all administrators.

*  Adding and checking Internet site descriptions ('@site add <ADDRESS> [=] 
   <DESCRIPTION>' and '@site desc <ADDRESS> [=] <DESCRIPTION>'  -  You may
   also wish to investigate the use of the 'sitereport' commands for this
   purpose.


Experienced Builders...
~~~~~~~~~~~~~~~~~~~~~~~
USAGE:  @set *<NAME> = EXPERIENCED    (Promote)
        @set *<NAME> = !EXPERIENCED   (Demote)

The Experienced Builder flag may only be set on characters by Wizards/Druids
and above.

Experienced Builders are similar to Builders, except they have a few extra
privileges.  An Experienced Builder is a Builder who has an extensive
knowledge of building/coding (Including complex compound commands), so
if you need building help, and the Admin are busy or not connected, an
Experienced Builder should be able to help you.

Experienced Builders have the ability to examine any object in the database
which is not set PRIVATE (Except characters) and can see when new characters
are created (But not which site they are created from.)

If you have any problems, you should try an Apprentice Druid, Druid,
Experienced Builder or Assistant first.


Assistants...
~~~~~~~~~~~~~
USAGE:  @set *<NAME> = ASSISTANT    (Promote)
        @set *<NAME> = !ASSISTANT   (Demote)

The Assistant flag may only be set on characters by Wizards/Druids and above.

An Assistant is a Mortal user who is prepared to give help and assistance to
any user who should ask them for it.  The Assistant status IS NOT an
administrative rank, and users with Assistant status are not under any
obligation to always offer help and assistance.

Assistants have no extra privileges above Mortals/Builders, apart from being
able to use the 'welcome'/'assist' commands (When there are no Admin connected,
or an insufficient number of Admin) and being able to see when new users are
created.

If you need any help or assistance (Especially if it is not building related),
and there are no Admin connected (Or there are only a few connected), then try
an Assistant or Experienced Builder first.


Builders...
~~~~~~~~~~~
USAGE:  @set *<NAME> = BUILDER
        @set *<NAME> = !BUILDER

The Builder flag may be set on characters by Apprentice Wizards/Druids and
above.

Builders have the same privileges as Mortals, except they may build their own
locations, objects, compound commands, etc.  However, as a Builder, the amount
you can build is limited by your Building Quota limit.  You can find out what
your Building Quota limit is, and how much of it is in use at any time by
typing 'scan me'.

If you'd like to be a builder, get in touch with an Apprentice Wizard/Druid or
above  -  You'll be given a BUILDER flag and will have a Building Quota of 100
to begin with.  You should use this to experiment with the different types of
objects you can make and the various building commands.


Building Quota...
~~~~~~~~~~~~~~~~~
All Builders start off with a Building Quota of 100.  If you reach or exceed
this limit, you will not be able to build any further objects.  You can see
how much quota you have in use, and your current Building Quota limit by
typing 'scan me', and see a summary of Building Quota in use by typing
'@quota'.  If you run out of Building Quota, you should...

(1)  Using '@list', list the different objects you have, and go through them
     looking for any unnecessary or useless objects (You more than likely
     have a few objects lying around that you no-longer need.)  Destroy any
     unnecessary or useless objects you have  -  This will reduce the amount
     of Building Quota you have in use.

(2)  If you can't find anything you can destroy, get in touch with an
     Apprentice Wizard/Druid or above and ask them to raise your Building
     Quota limit.

To obtain a Building Quota limit of more than 200, you need to be building
something which is beneficial to users other than just yourself and perhaps
a few friends (E.g:  Spending all your Building Quota on a house for yourself
(And possibly a few of your friends) doesn't warrant a Building Quota greater
than 200.)

All rooms and objects should be well described with no spelling/typing mistakes
(Use a dictionary to check), the area must consist of more than just rooms,
things and exits (I.e:  A good number of useful and fully working compound
commands which bring the area and objects in it to life) and all exits in the
area should have success ('@succ'), drop ('@drop') and others drop ('@odrop')
messages set.  Ideally, the exits should also be set OPAQUE (So you don't get
the default 'leads to <DESTINATION>' added to the name of the exit.)  Every
room should also have at least one exit with the names 'out;exit;back;leave'
in it's name(s) (These are the standard commands for leaving a room.)

You should not have any redundant objects lying around from previous building
projects which you've abandoned, or from the days when you were learning to
build.  If you do, you should destroy them and re-use the Building Quota they
were using.


Mortals...
~~~~~~~~~~
Every character starts out as a Mortal.  A Mortal can basically only use the
general commands for talking and moving around the virtual world.  They have
no privileges and can't build objects.

PLEASE NOTE:  Mortals do not need to obtain residency to keep their character.
              However, your character may be deleted automatically if you do
              not connect on a regular basis.

Morons
~~~~~~
USAGE:  @set *<NAME> = MORON
        @set *<NAME> = !MORON

The Moron flag is reserved for dealing with abusive and/or offensive users.
It is used in addition to a number of other punishments handed out to deal
with problem users, which include warning, jailing, booting and banning
(Either temporarily or permanently.)

The Moron flag clearly marks the user as an abusive/offensive user to
other users, and has the following main effects:

*  Marks them as a Moron in the user lists and contents of a room.
*  Temporarily replaces their title with 'the Moron'.
*  Removes all building privileges.
*  Inability to 'page' or 'tell' messages, except to administrators.
*  Inability to 'yell' messages.
*  Inability to use 'chat' or 'fchat'.
*  Restricted usage of the TCZ-based MUD's BBS.
*  Restricted usage of mail.
*  Restricted access to various public/global areas.
*  Restricted usage of some global compound commands.


===============================================================================
   >>>>>                       Object types...                         <<<<<
===============================================================================

Alarms...
~~~~~~~~~
Alarms are used to execute a compound command at a set time, or at a given
interval (E.g:  Every 5 minutes.)

Alarms can be created with the '@alarm' command and can only be created by
Wizards/Druids and above.


Characters...
~~~~~~~~~~~~~
A character is a virtual being, who (When under control of someone sitting at
a computer or terminal) can talk to and interact with other characters and
the rest of the virtual world.

Characters have different levels of privileges  -  See the above section for
more details.

Apprentice Wizards/Druids and above can create characters using the
'@character' command.
  

Compound commands...
~~~~~~~~~~~~~~~~~~~~
A compound command holds a list of commands, which are executed in sequence
(Just as if you actually typed each one in turn) when someone executes it by
typing its name.

Compound commands can be created with the '@command' command.


Dynamic arrays...
~~~~~~~~~~~~~~~~~
Dynamic arrays are similar to the arrays found in conventional high-level
programming languages, such as Pascal, C, etc.  The main difference is that
they're dynamic  -  A dynamic array can have as many elements as your Building
Quota will allow, and it's size can be altered effortlessly by inserting and
destroying elements.

Dynamic arrays can be created with the '@array' command.


Exits...
~~~~~~~~
Exits are used to link one room to another (NOTE:  Exits are ONE WAY only, so
you will need to open two exits to make a two way one.)  Exits allow characters
to move from one room to another and explore your world.

Exits can be opened with the '@open' command.


Fuses...
~~~~~~~~
When attached to an object, a fuse ticks down from a given value until it
reaches zero, on which it executes the compound command linked via its
csuccess.  For example, a fuse attached to a character triggers everytime
they type something, and a fuse attached to a room triggers everytime
someone types something in that room.

Fuses can be created with the '@fuse' command.


Properties and Variables...
~~~~~~~~~~~~~~~~~~~~~~~~~~~
Properties and variables are used for temporary or permanent storage of data
within compound commands, etc.  Both properties and variables are used for the
same purposes, except a property only has a description, whereas variables have
all 8 standard fields, which may freely be used for storage (Because of this,
variables use more Building Quota than properties.)

HINT:  You can use the '@drop' and '@odrop' of a compound command as "free"
       variables (As these aren't used)  -  This not only saves you Building
       Quota, but also saves on DB space and memory usage.

Properties can be created with the '@property' command, and variables can be
created with the '@variable' command.


Things...
~~~~~~~~~
A thing is a flexible type of object that can be virtually anything you want
-  Be it a sofa, bed, computer, car, dustbin, you name it, it can be it.  A
thing can also be made into a container, into which you can put other objects
providing you give it enough volume (Using the '@volume' command.)  If the
container is big enough, other characters can even climb into it.

A thing can be turned into a container by typing '@set <NAME> = open'.  You can
also make it a container with a lid (Which can be opened and closed) by typing
'@set <NAME> = openable'.

A thing can be created with the '@thing' command.


Rooms...
~~~~~~~~
A room is simply a large container that can hold almost any other type of
object (In most cases, you'll find things, exits and characters inside them.)

To begin with, you should create your own 'Top Area', into which you should
teleport all further rooms you create into (Using '@tel'.)  Ask a Wizard/Druid
or above to teleport your Top Area into the Top Area for Builders for you.

Rooms can be created using the '@room' command.


===============================================================================
   >>>>>                    ANSI colour support...                     <<<<<
===============================================================================

All TCZ-based MUD's support standard 8 or 16 colour ANSI.  If you're using a
terminal that supports it, you can enjoy a TCZ-based MUD in full colour!

To determine whether your terminal supports ANSI colour, and to configure it
correctly, simply type 'screenconfig' (PLEASE NOTE:  If you're using a World
Wide Web browser, you will not need to do this.)

TCZ based MUD's have a unique and flexible text colour and attribute system  -
You can easily use colour in spoken messages and Builders can freely use
coloured text in the description, success/failure/drop messages, etc. of
their rooms, compound commands, etc.  -  See section on substitutions for
further details.


===============================================================================
   >>>>>                       Substitutions...                        <<<<<
===============================================================================

TCZ-based MUD's have an extensive set of substitutions, which can be used in
almost any message/text (Regardless of whether it's said, emoted, paged,
whispered, etc.)  They can also be used with '@echo', '@oecho', '@write',
'@oemote' and in the '@desc', '@odesc', '@succ', '@osucc', '@fail', '@ofail',
'@drop' and '@odrop' of rooms, objects, compound commands, exits, etc.

All substitutions consist of a '%' followed by a letter/digit which denotes
which substitution is to be used (With the exception of '%{<CMD>}', which
substitutes the return result of a query command.)  For example, if you put
'Hello, %n!' in your description ('@desc me = Hello, %n!'), then when other
users 'scan' you, they will see 'Hello, <NAME>!' (Where <NAME> is the name
of the character scanning you.)

Substitutions may also be used in a similar way to query commands by placing
them inside {}'s, e.g:  '@echo The substitution "%@%n" is {@?length "{%@%n}"}
characters in length.' (Displays 'The substitution "TCZ-based MUD" is 13
characters in length.' on your screen.)

NOTE:  '%%' is a special substitution, which simply returns '%', allowing
       you to use a '%' followed by text which would otherwise be seen as
       a substitution, e.g:  '@echo %%r%%l gives %r%lred%x text.'

There are 6 different types of substitutions available in TCZ-based MUD's
-  These are as follows...

*  Pronoun substitutions.
*  Text colour and attribute substitutions.
*  Text formatting substitutions.
*  Query command/calculation substitutions.
*  Miscellaneous substitutions.
*  Variable substitutions (See next section.)

Each type of substitution is explained in more detail below...


Pronoun substitutions...
~~~~~~~~~~~~~~~~~~~~~~~~
Pronoun substitutions return an appropriate pronoun in relation to the user
involking the text, e.g:  'say %S' will make you say "He" to everyone in the
same room as you, if you're male.  The returned pronoun can be either
absolute (%a), objective (%o), possessive (%p), subjective (%s) or
reflexive (%v), depending on the substitution used (See table below.)


Examples:                      Output:
~~~~~~~~~                      ~~~~~~~
:looks at %p watch.            Fred Bloggs looks at his watch.
:thinks %s's the greatest!     Fred Bloggs thinks he's the greatest!
"%a %o %p %s %v %n             Fred Bloggs says "His him his he himself Fred
                                 Bloggs."


Substitution:  Pronoun:    Male:    Female:  Neuter:  Unset gender:
===================================================================
%a             Absolute    his      hers     its      its
%A             Absolute    His      Hers     Its      Its
%o             Objective   him      her      it       it
%O             Objective   Him      Her      It       It
%p             Possessive  his      her      its      its
%P             Possessive  His      Her      Its      Its
%s             Subjective  he       she      it       it
%S             Subjective  He       She      It       It
%v             Reflexive   himself  herself  itself   itself
%V             Reflexive   Himself  Herself  Itself   Itself
-------------------------------------------------------------------
%n             Substitutes character's name.
===================================================================


Text colour and attribute substitutions...
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Substitutions can be used to change the colour of text (For users using an
ANSI colour compatible terminal which supports font colour tags), embolden,
underline, inverse and make the text flash...


Substitution:  Colour:          Substitution:  Colour:
=====================================================================
%z             Black            %r             Red
%g             Green            %y             Yellow
%b             Blue             %m             Magenta
%c             Cyan             %w             White
%x             Default colour
=====================================================================
Example:  say Here's some %r%lred%x, %g%lgreen%x and %b%lblue%x text.


Substitution:  Effect:    Comments:
=============================================================================
%l             Light      Hilights (Emboldens) text/light colour.
%d             Dark       Normal text/dark colour (Default.)
%f             Flashing   Makes text flash (E.g:  'say %fFlashing text'.)
%u             Underline  Underlines text (E.g:  'say %uUnderlined text'.)
%i             Inverse    Inverses text  -  If followed by a colour code, the
                          inverse (Or text background if you like) will be
                          that colour, e.g:  '%i%g' gives a green background,
                          and '%y%l%i%r' gives bright yellow text on a red
                          background.
=============================================================================
Example:  say Here's some %fflashing%x and %iinverse%x text.


NOTE:  You don't need to put a '%x' on the end of your text to ensure the
       colour of your screen returns to normal (White text on a black
       background) after using text colour or attribute substitutions
       as this is done automatically.

HINT:  You should put text attribute substitutions AFTER colour substitutions,
       because the colour substitutions will cancel out these effects, e.g:
       '%r%l' for light red text, '%w%l%f' for bright white flashing text, etc.


Examples...
~~~~~~~~~~~
@echo Normal colours:  %zBlack%x, %rRed%x, %gGreen%x, %yYellow%x, %bBlue%x,
%mMagenta%x, %cCyan%x and %wWhite%x.

@echo Hilighted colours:  %z%lBlack%x, %r%lRed%x, %g%lGreen%x, %y%lYellow%x,
%b%lBlue%x, %m%lMagenta%x, %c%lCyan%x and %w%lWhite%x.

@echo %r%l%f!!! WARNING !!!


Text formatting substitutions...
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Text formatting substitutions allow you to set a hanging indent on a single
line, so that if that line is longer than the screen width, it will be
indendented correctly when it's wrapped to the left hand side of the screen
on the next line down.  To increment the hanging indent for a single line,
you should use the '%1' - '%9' substitutions at the BEGINNING of the line,
which increment the hanging indent by the given number (E.g:  '%1' will
increment the hanging indent by 1, '%2' by 2, etc.)  '%0' resets the
hanging indent back to the far left hand side of the screen.

PLEASE NOTE:  To increment the hanging indent by more than 9, you will need to
              use TWO or more substitutions added together, as only values of
              1 to 9 can be used.

Substitution:  Effect:
==============================================================================
%1 - %9        Increments hanging indent by the given number.
%0             Resets hanging indent back to the far left hand side of screen.
------------------------------------------------------------------------------
%#NF#          Prevents the following text from being subject to automatic
               formatting and punctuation.
%$             Marks the following text (Upto next colour change or '%x') as
               a title/heading, which will be underlined if the user's
               'set underline' preference is 'on'.
%~             Marks rest of line as a '~~~~~' or similar-style underline,
               which will NOT be displayed if user's 'set underline'
               preference is 'on' (Used in conjunction with '%$'.)
==============================================================================


Query command/calculation substitutions...
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
USAGE:  %{@calc <CALCULATION>}
        %{@eval <CALCULATION>}
        %{<QUERY COMMAND>}

The above substitutions can be used to substitute the result of a calculation
performed with the '@calc'/'@eval' command (E.g:  '%{@eval 2 + 2}'), or
substitute the return result of a standard query command (E.g:  '%{@?race}'.)


Example:
~~~~~~~~
@thing clock = Looking at the clock, you see the time is %\{@?realtime}.

The clock will always display the correct time in its description when you
look at it ('look clock'.)


Miscellaneous substitutions...
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Substitution:  Text substituted:
======================================================================
%@%a           TCZ-based MUD's IP address.
%@%c           Source code compile date/time.
%@%d           The current date (E.g:  'Thursday 29th February 1996'.)
%@%e           Admin E-mail address.
%@%f           E-mail forwarding server address.
%@%h           HTML port number.
%@%l           TCZ-based MUD's location.
%@%m           Substitutes 'Short name of TCZ-based MUD'.
%@%n           Substitutes 'Full name of TCZ-based MUD'.
%@%p           Telnet port number.
%@%s           TCZ-based MUD's server address.
%@%t           The current time (E.g:  '2:34 pm'.)
%@%v           Source code version number.
%@%w           World Wide Web (WWW) web site address.
%@%z           The server system time zone (E.g:  'GMT/BST'.)
======================================================================


Special substitutions
~~~~~~~~~~~~~~~~~~~~~

Substitution:  Text substituted:
========================================================================
%+, %>         Marks link to help topic (Adding 'tutorial '.)
%<, %>         Marks link to tutorial (Adding 'help '.)
%(, %)         Marks link to help topic (Without adding 'help '.)
%-, %)         Marks link to tutorial (Without adding 'tutorial '.)
========================================================================
NOTE:  The above substitutions are provided for implementation of
       hyperlinks between topics in the On-line Help & Tutorial systems.
       In general, they are not much use elsewhere.

===============================================================================
   >>>>>                   Variable substitution...                    <<<<<
===============================================================================

USAGE:  $[#<LOCATION>:]<VARIABLE NAME>
        $([#<LOCATION>:]<VARIABLE NAME>)
        {$[#<LOCATION>:]<VARIABLE NAME>}

Variable substitution can be used to substitute the description of a temporary
variable/property/variable or element of a dynamic array in a compound command.

The first two forms of variable substitution ('$[#<LOCATION>:]<VARIABLE NAME>'
and '$([#<LOCATION>:]<VARIABLE NAME>)') can only be used within compound
commands.  The third ('{$[#<LOCATION>:]<VARIABLE NAME>}') can also be used
on the command line as well as in compound commands.

In the simplest form, a temporary variable can be substituted using
'$<VARIABLE NAME>' (E.g:  '@echo $mytemp').  A property/variable can be
substituted using '$(#<LOCATION>:<VARIABLE NAME>)', where '#<LOCATION>' is
the #ID number of the property/variable's current location (E.g:
'@echo $(#12345:myproperty)') and a dynamic array element can be
substituted using '$(#<LOCATION>:<ARRAY NAME>[<ELEMENT>])' (E.g:
'@echo $(#12345:myarray[1])'.)

A '$()' substitution can be used to substitute a property/variable/array which
has spaces in its name (E.g:  '@echo $(#12345:my property)'.  It's also useful
in the following case:  '@echo $sentence.' (Where '$sentence' is a temporary
variable containing a sentence of text.)  -  This substitution wont work,
because '.' is a valid character for use in a variable substitution, so the
TCZ-based MUD tries to find and substitute a temporary
variable/property/variable/array with the name 'sentence.'  You can get around
this by using '@echo $(sentence).'  -  Only the text in the '()'s is taken as
the name.

Nested substitutions are possible using '{$[#<LOCATION>:]<VARIABLE NAME>}',
e.g:  '@echo $(#12345:myarray[{$element}])' (Where '$element' is a temporary
variable holding the element number to substitute.)


===============================================================================
   >>>>>                          Articles...                          <<<<<
===============================================================================

Article support in TCZ-based MUD's allow you to set an appropriate article
('A', 'An' or 'Some') on an object, which will then be used in all messages
relating to that object (E.g:  'Fred Bloggs drops some Sweets.' instead of
'Fred Bloggs drops Sweets.')

The flags CONSONANT (A), VOWEL (An) and PLURAL (Some) determine the article of
an object, and may be set on things, rooms, exits and characters (E.g:  '@set
sweets = PLURAL'.)

Article support can be taken advantage of within compound commands by
specifying 'definite' or 'indefinite' as the second parameter to the
following query commands:  '{@?name}', '{@?article}', '{@?namec}' and
'{@?fullname}', e.g:  '@echo {@?name sweets = INDEFINITE}' would give
'Some Sweets'.


Article flag:   indefinite  INDEFINITE  definite  DEFINITE
==========================================================
CONSONANT       a           A           the       The
VOWEL           an          An          the       The
PLURAL          some        Some        the       The
==========================================================


Examples:
~~~~~~~~~
@set television = CONSONANT          (Gives 'A Television'.)
@set orange = VOWEL                  (Gives 'An Orange'.)
@set sweets = PLURAL                 (Gives 'Some Sweets'.)


===============================================================================
  >>>>>                  Hierarchical Object Matching                   <<<<<
===============================================================================

Understanding how hierarchical object matching works on TCZ-based MUDs is an
important part of coding compound commands.  It is also important for the
usage of many built-in (Hard-coded) commands.)

Nearly all built-in (Hard-coded) compound commands use hierarchical object
matching in one form or another.  The following details the various methods
of matching supported by TCZ-based MUDs...

me         Matches to yourself.

           E.g:  @set me = haven

here       Matches to your current location.

           E.g:  examine here

[!]<NAME>  Matches by object name.  Your possessions are searched first,
           followed by your current location.  Compound commands are also
           searched up the area tree of your current location and within the
           global compound commands location.

           For characters and things, matching is partial (I.e:  Any part of
           the object's name.)  For most other object types, matching is exact.

           E.g:  look at cupboard
                 take key
                 open door

           Sometimes, partial matching of an object name can be a nuisance
           (I.e:  When there are two objects with similar names.)  You can
           force an exact match by preceeding the name with '!', e.g:

              Contents:
              ~~~~~~~~~
              Object2(#12345 Tq)
              Object(#54321 Tq)

           In the above example, typing 'ex object', 'ex obj', etc.  will match
           to 'Object2', because it's first in the Contents: list.  This makes
           it difficult to refer to 'Object' without knowing and using it's
           #ID.  Typing 'ex !object' solves this problem by forcing an exact
           match to the name 'object'.

*<NAME>    Matches exactly to the character name specified, regardless of their
           current location or whether they are currently connected or not.

           E.g:  look at *fred bloggs

#<ID>      Matches directly to the object with the specified #<ID> number.  This
           is the fastest method of matching.

           E.g:  @tel me = #12345

NOTE:  Within a compound command, all of the above are relative to the user
       executing the compound command.  For example, 'me' refers to the
       user executing the compound command, 'here' refers to their current
       location, etc.


The following are functional only from within a compound command:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
myself   Matches to the compound command currently executing (Same
         functionality as '{@?myself}', but easier to use and more
         efficient.)

         E.g:  @echo {@?drop myself}
               @drop myself = 1

myleaf   Matches to effective location of the compound command currently
         executing (Same functionality as '{@?myleaf}' with no parameters.)

         See section on '{@?myleaf}' for details of how '{@?myleaf}' works.

         E.g:  @echo You shoot the {@?name myleaf} - BANG!

For details on the order of matching, please see section on matching order
(Below.)


Character Matching
~~~~~~~~~~~~~~~~~~
For ease of use and effeciency, most internal commands (Hard-coded) which can
ONLY be used on characters ('scan', 'page', 'tell', etc.) use a cut-down
matching system.  This is as follows:

me       Matches to yourself.

         E.g:  scan me

<NAME>   Matches by character name.  Names of connected characters are
         matched first, followed by names of those who are not connected.
         Matching is to the closest character name, taking name prefix/suffix
         into account.

         E.g:  page fred bloggs = hello

*<NAME>  Matches exactly to character name specified.

         E.g:  look at *fred bloggs

#<ID>    Matches directly to the character with the specified #<ID> number.
         This is the fastest method of matching.  NOTE:  You need read
         permission to a character to refer to them by #<ID>.

         E.g:  examine #1

NOTE:  Character matching does not support (Or need to support) type matching
       or multiple matching.


Type Matching
~~~~~~~~~~~~~
USAGE:  @<TYPE>[;<TYPE>][...]:<MATCH>

Matching can be restricted to a particular object type (Or particular object
types) only by using the above matching format.  To restrict a match to a
particular type of object, simply prefix the match with '@' followed by the
object type, e.g:  '@things:mything', '@properties:me:myobject',
'@things;commands:myobject', etc.

<TYPE> is the object type, which can be one or more of the following:

   Alarms, Arrays, Characters, Commands, Exits, Fuses, Players (Same as
   Characters), Properties, Rooms, Things, Variables.

Type matching is especially useful for preventing matching conflicts between
objects of different types with the same name.  For example, if you had a
thing and compound command both called 'Test', typing 'ex test' will always
match to the thing.  Typing '@desc test = @echo Hello' would change the
description of the thing rather than the compound command.

Rather than directly refering to the compound command by it's #ID, you can
get around this problem by using '@command:test' to match against compound
commands only.


Multiple Matching
~~~~~~~~~~~~~~~~~
FORMAT:  <LOCATION>:<OBJECT NAME>[:<OBJECT NAME>][...]

The above format is used for multiple matching.  This allows you to refer to
an object located within another object, or several objects located within
each other in a hierarchical manner.

For example, '#12345:mycontainer:mything' searches the location #12345 for
the object 'mycontainer'.  'MyContainer' is then searched for the object
'mything'.

This method of matching is especially useful for refering to variables,
properties and dynamic arrays attached to objects, e.g:

   @echo {@?desc #12345:myarray[1]}
   @echo {@?desc me:myproperty}
   @echo {@?desc #54321:mything:myvariable}


===============================================================================
  >>>>>               Hierarchical Object Matching Order                <<<<<
===============================================================================

Hierarchical matching within a TCZ-based MUD is organised into five distinct
phases.  Within each of these phases, objects are matched in the order
detailed below:


Phase 0:  Keywords and direct reference:
~~~~~~~~
          me       Yourself.
          here     Your current location.
          myself   Command command currently being executed.
          myleaf   Effective location of current executing compound command.
          #ID      Object or character by #ID number.
          *<NAME>  Character by full or real name.


Phase 1:  Objects which you are currently carrying (In your inventory):
~~~~~~~~
          Object type:       Object types matched within object:
          ~~~~~~~~~~~~       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
          Character          None.
          Thing              Characters, Things, Compound Commands.
          Exit               Compound Commands.
          Compound Command   Compound Commands.
          Variable           Variables, Properties, Dynamic Arrays. 
          Property           Variables, Properties, Dynamic Arrays. 
          Dynamic Array      Variables, Properties, Dynamic Arrays. 
          Fuse               None.
          Alarm              None.
          Room               None.


Phase 2:  Objects which are within your current location:
~~~~~~~~
          Object type:       Object types matched within object:
          ~~~~~~~~~~~~       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
          Character          None.
          Thing              Characters, Things, Compound Commands.
          Exit               Compound Commands.
          Compound Command   Compound Commands.


Phase 3:  Compound Commands further up the area of your current location,
~~~~~~~~  for example:

             Town Top Area
              |
              `- The Town Centre
                  |
                  `- The Swan Pub

          If you are in 'The Swan Pub', compound commands within locations
          further up the area ('The Town Centre', followed by 'Town Top
          Area') will be matched.

          HINT:  For an overview of the area of your current location, try
                 typing '@echo {@?address}'.


Phase 4:  Global compound commands within the global compound commands
~~~~~~~~  location.  Compound commands can only be made global by Apprentice
          Wizards/Druids and above.


NOTE:  Within a compound command, all references to yourself refer to the
       character executing the compound command.

In most cases where hierarchical matching is used, a particular object type
is given priority.  This object type will be matched individually using the
above matching order.  The remaining object types will then be matched
together in the above order.

In most cases, things are given priority.


===============================================================================
   >>>>>                   TCZ-based MUD Commands...                   <<<<<
===============================================================================

  General Commands...
  ~~~~~~~~~~~~~~~~~~~
  !!              admin           aliases         afk             ask
  authors         bbs             bug             chat            close
  cls             comment         complain        converse        date
  disclaimer      drive           drop            edit            emergency
  enter           events          examine         fadd            fchat
  finger          flist           fothers         fremove         friends
  fset            fwhere          fwho            get             give
  go              goto            help            home            homeroom
  idle            inventory       junk            kick            lastseen
  leave           lock            longspod        look            lwho
  map             modules         more            motd            move
  news            open            page            privileges      profile
  QUIT            read            recall          repeat          reply
  ride            say             scan            score           screenconfig
  set             settings        spod            suggest         summon
  swho            take            tell            think           time
  title           titles          to              unlock          uptime
  use             users           version         wake            warp
  where           whisper         who             visit           yell


  Character Related Commands/Query Commands...
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  bank               finger             friends            inventory
  pay                privileges         profile            scan
  score              set                title              transfer

  @bootdead          @controller        @credit            @desc
  @email             @feeling           @homeroom          @link
  @mass              @name              @partner           @password
  @prefix            @profile           @race              @rank
  @score             @set               @suffix            @title
  @volume            @www

  {@?absolute}       {@?averageactive}  {@?averageidle}    {@?averagelogins}
  {@?averagetime}    {@?balance}        {@?connected}      {@?controller}
  {@?credit}         {@?desc}           {@?email}          {@?enemy}
  {@?expenditure}    {@?feeling}        {@?friend}         {@?fullname}
  {@?idletime}       {@?income}         {@?lastconnected}  {@?lastsite}
  {@?longestdate}    {@?longesttime}    {@?mass}           {@?name}
  {@?namec}          {@?objective}      {@?partner}        {@?possessive}
  {@?prefix}         {@?privileges}     {@?profile}        {@?profit}
  {@?prompt}         {@?quota}          {@?quotalimit}     {@?race}
  {@?realname}       {@?reflexive}      {@?restriction}    {@?score}
  {@?scrwidth}       {@?scrheight}      {@?set}            {@?status}
  {@?subjective}     {@?suffix}         {@?termtype}       {@?timediff}
  {@?title}          {@?totalactive}    {@?totalidle}      {@?totallogins}
  {@?totaltime}      {@?uid}            {@?volume}         {@?wagetime}
  {@?who}            {@?www}


  Combat Related Commands/Query Commands...
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  attributes      statistics

  @damage         @delay          @heal           @score

  {@?delay}       {@?health}      {@?lost}        {@?performance} 
  {@?total}       {@?won}


  Building Commands...
  ~~~~~~~~~~~~~~~~~~~~
  @alias          @array          @areaname       @areawrite      @beep
  @begin          @break          @breakloop      @calc           @case
  @censor         @cfail          @chown          @chpid          @chuid
  @command        @contents       @continue       @cstring        @csucc
  @desc           @destroy        @desttemp       @drop           @duplicate
  @echo           @echolist       @else           @end            @entrances
  @estring        @eval           @execution      @expiry         @fail
  @false          @find           @for            @foreach        @force
  @fuse           @goto           @if             @index          @insert
  @key            @link           @list           @lock           @log
  @logentry       @mass           @name           @namelower      @notify
  @odesc          @odrop          @oecho          @oemote         @ofail
  @open           @osucc          @output         @owner          @parent
  @pay            @pending        @prompt         @property       @purge
  @quota          @remote         @return         @returnvalue    @room
  @set            @size           @skip           @sort           @stats
  @succ           @teleport       @temp           @test           @thing
  @transfer       @true           @unalias        @unchpid        @undestroy
  @unlink         @unlock         @variable       @volume         @while
  @with           @write


  Query Commands...
  ~~~~~~~~~~~~~~~~~
  {@?address}        {@?alarms}         {@?alias}          {@?arrays}
  {@?area}           {@?areaname}       {@?areanameid}     {@?article}
  {@?bank}           {@?bbs}            {@?cfail}          {@?characters}
  {@?cmdname}        {@?commands}       {@?contents}       {@?created}
  {@?csize}          {@?cstring}        {@?csucc}          {@?datetime}
  {@?desc}           {@?destination}    {@?drop}           {@?elementno}
  {@?elements}       {@?estring}        {@?evallock}       {@?executed}
  {@?execution}      {@?exists}         {@?exits}          {@?expiry}
  {@?fail}           {@?false}          {@?firstname}      {@?flags}
  {@?fuses}          {@?global}         {@?id}             {@?image}
  {@?index}          {@?indexno}        {@?internal}       {@?interval}
  {@?key}            {@?lastused}       {@?latest}         {@?line}
  {@?location}       {@?lock}           {@?match}          {@?mass}
  {@?messages}       {@?myleaf}         {@?myself}         {@?name}
  {@?nested}         {@?newmessages}    {@?next}           {@?noelements}
  {@?objects}        {@?odesc}          {@?odrop}          {@?ofail}
  {@?osucc}          {@?owner}          {@?parent}         {@?peak}
  {@?pending}        {@?players}        {@?properties}     {@?quarter}
  {@?quota}          {@?rand}           {@?rank}           {@?realtime}
  {@?result}         {@?rooms}          {@?set}            {@?size}
  {@?succ}           {@?tczlink}        {@?things}         {@?time}
  {@?totalitems}     {@?true}           {@?typeof}         {@?uptime}
  {@?variables}      {@?version}        {@?volume}         {@?weight}


  List Processing Query Commands...
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  {@?delete}         {@?insert}         {@?item}           {@?itemexact}
  {@?itemno}         {@?modify}         {@?newline}        {@?noitems}
  {@?sort}           {@?sortalpha}      {@?sortnumeric}


  String Processing Query Commands...
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  {@?alpha}          {@?alnum}          {@?boolean}        {@?capitalise}
  {@?censor}         {@?colourmap}      {@?digit}          {@?filter}
  {@?format}         {@?head}           {@?islower}        {@?isupper}
  {@?leftstr}        {@?length}         {@?lower}          {@?midstr}
  {@?number}         {@?pad}            {@?padcentre}      {@?padleft}
  {@?padright}       {@?protect}        {@?punct}          {@?replace}
  {@?rightstr}       {@?separator}      {@?strlen}         {@?strpos}
  {@?strprefix}      {@?tail}           {@?upper}          {@?wildcard}


  Sentence processing query commands:
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  {@?nowords}        {@?word}           {@?wordexact}      {@?wordno}


  Grouping/Range Operator Commands/Query Commands...
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  {@?display}        {@?groupitems}     {@?groupno}        {@?grouprange}
  {@?groupsize}      {@?nogroups}       {@?rangefrom}      {@?rangeitems}
  {@?rangeto}        {@?totalitems}


  Administrative Commands/Query Commands...
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  assist          escape           email           hosts           last
  natter          shout            sites           summon          warn
  welcome

  @admin          @ban             @banish         @boot           @bootdead
  @character      @controller      @credit         @destall        @dump
  @force          @log             @logentry       @maintenance    @monitor
  @newpassword    @notify          @partner        @prefix         @puppet
  @quotalimit     @reload          @request        @sanity         @shutdown
  @site           @stats           @suffix

  {@?email}       {@?lastcommand}  {@?lastsite}    {@?status}


  NOTE:  The words 'here' and 'me' can be used with most of the above
         commands to reference your current location or yourself.

         When referencing a character, or the name of a character, most
         commands will accept *<NAME> as a means of referencing a character
         who isn't in the same room as you, or isn't connected.


===============================================================================
   >>>>>                      General Commands...                      <<<<<
===============================================================================

  !! (Last command recalling facility)
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  USAGE:  !! [<PARAMETERS>]

  TCZ-based MUD's have a last command recalling facility that works in a
  similar way to the 'history' facility built into most UNIX systems.

  TCZ-based MUD's always remember the last command you typed (Until you
  disconnect.)

  If you need to recall/re-execute the last command you typed, just simply
  type '!!' and press RETURN.  The last command you typed will then be
  executed.

  You can also add text to the end of the last command you typed by typing '!!'
  followed by the text to add, e.g:  If you wanted to scan 'Joe Bloggs' and
  then 'Fred Bloggs', you could type 'scan' and press RETURN.  You could then
  type '!! fred' and '!! joe' to scan 'Fred Bloggs' and 'Joe Bloggs'.

  The last command recalling facility is quite handy when you're using a Telnet
  client which doesn't have its own built-in command recalling facility.

-------------------------------------------------------------------------------

  Admin
  ~~~~~
  USAGE:  admin <RANK> [page] [<PAGE NO>]
          admin [page] [<PAGE NO>]
          admin list

  Lists the current administrators, retired administrators, Experienced
  Builders and Assistants of the TCZ-based MUD.

  Administrators (Apprentice Wizards/Druids and above) are there to help you
  with any problem or query you may have and also deal with abusive users.

  Experienced Builders are ordinary users with exceptional building and
  compound command writing skills, who are a good choice if you have any
  building questions (Especially related to advanced building) and no
  Wizard administrators are available.

  Assistants are also ordinary users, who are prepared to give help to any
  user who needs it (Especially new users), however they may not neccessarily
  have exceptional building skills (They are a good choice if you have any
  general questions or basic building questions and no Druid administrators
  are available.)

  Retired administrators are past administrators who have retired from
  administrative duties.  Most will have good knowledge of the TCZ-based MUD,
  and will be more than willing to help you, if you ask.


  Listing currently connected administrators/Experienced Builders/Assistants...
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  Typing 'admin' will list all administrators, retired administrators,
  Experienced Builders and Assistants who are currently connected, along with
  their rank, idle time (If this is more than a few minutes, they may be busy
  or currently away from their terminal/computer) and whether they are HAVEN
  and/or QUIET (Either of these can indicate that they are currently busy and
  do not wish to be disturbed.)

  Optionally, a page number can also be given, which will split the list up
  into pages and display the given page number (I.e:  'admin 1' to display
  page 1, 'admin 2' to display page 2, etc.)

  
  Listing every administrator/Experienced Builder/Assistant...
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  Typing 'admin list' or 'admin all' will display a list of all current
  administrators, retired administrators, Experienced Builders and Assistants,
  regardless of whether they are currently connected or not, organised by rank.


  Listing administrators/Experienced Builders/Assistants by rank...
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  You can also list every administrator, retired administrators, Experienced
  Builder or Assistant by their rank (Regardless of whether they are connected
  or not), by typing 'admin <RANK>', where <RANK> is their rank, which can be
  one of the following:

     Assistants, Experienced Builders, Retired Druids, Retired Wizards,
     Apprentice Druids, Apprentice Wizards, Druids, Wizards, Elder Druids,
     Elder Wizards, Deities.

  Optionally, a page number can also be given, which will split the list up
  into pages and display the given page number (I.e:  'admin assistants 1' to
  display page 1 of current Assistants, 'admin assistants 2' to display page
  2, etc.)

  NOTE:  Puppets and Beings are omitted from the administrators, retired
         administrators, Experienced Builders and Assistants listed by
         'admin list'.

-------------------------------------------------------------------------------

  Afk
  ~~~
  USAGE:  afk <MESSAGE>
          afk on|off
          afk <TIME>

  
  This command puts you into AFK (Away From Keyboard) mode.  To enter AFK
  mode, simply type 'afk' followed by an AFK message, e.g:  'afk Getting
  something eat - back soon...', etc.  Once in AFK mode, you'll appear in
  the 'who' list with the title 'is AFK and idle' (Don't worry, your original
  title will return when you leave AFK mode) and people will get your AFK
  message if they try to page/tell messages to you.

  To leave AFK mode, simply type in your character's password at the
  '[AFK]  Please enter your password:' prompt.

  AFK mode is perfect when you're going to be AFK for a short period of time
  and don't want anyone to fiddle with your character.  However, even though
  no-one can do anything malicious with your character, someone could still
  exit your Telnet client and fiddle around in your user area.

  The TCZ-based MUD also features an auto-AFK facility, which (By default)
  sends you AFK automatically when you idle for 10 or more minutes.  This
  time can be changed by typing 'afk <TIME>', where <TIME> is the time in
  minutes.  The auto-AFK facility can also be turned off, by typing 'afk off'.

-------------------------------------------------------------------------------

  Aliases
  ~~~~~~~
  USAGE:  aliases [<PAGE NO>] [<NAME>]

  Lists your aliases (Which are set using the '@alias' command.)  If
  <NAME> is specified, that character's aliases are displayed (NOTE:
  Only Apprentice Wizards/Druids and above can list other (Lower level)
  characters aliases.)

  If <PAGE NO> is specified, that page of aliases will be displayed, e.g:
  'aliases 2', 'aliases 3', etc.

-------------------------------------------------------------------------------

  Ask
  ~~~
  USAGE:  ask <QUESTION>
          ?<QUESTION>

  Makes you ask "<QUESTION>?" to everyone in the same room as you.  The
  second form (A question mark followed by your message) is easier to type.

-------------------------------------------------------------------------------

  Assist
  ~~~~~~
  USAGE:  assist [<NAME>] [= <RESPONSE>]
          assist list [<PAGE NO>]
          assist <REASON>

  The 'assist' command is used to ask for assistance from the TCZ-based MUD's
  administrators (And Experienced Builders/Assistants, if there are 3 or less
  Apprentice Wizards/Druids and above connected.)

  To ask for assistance, simply type 'assist' followed by the reason you are
  asking for assistance/what you need assistance on, e.g:  'assist Can someone
  show me how to use the BBS', 'assist Can someone help me with one of my
  compound commands?', etc.

  Your request for assistance will be sent to the TCZ-based MUD's
  administrators  -  Usually, someone will be available to help you within a
  few minutes.  If you do not receive assistance after 5 minutes or more, you
  can ask again by typing 'assist' followed by your reason (As detailed above.)

  Experienced Builders/Assistants and above can use 'assist list' to display
  a list of users who need assistance  -  You can give assistance to one of
  these users by typing 'assist <NAME>', or give assistance to the first user
  in the list by typing 'assist' on its own.

  NOTE:  Expererienced Builders/Assistants above can give assistance to users
         who have not received a response for over 2 minutes, or when there
         are 3 or less Apprentice Wizards/Druids and above connected.

  Giving assistance to a user will teleport you to their current location and
  let them know that you are available to help them.  Alternatively, you can
  give your <RESPONSE> ('assist <NAME> = <RESPONSE>'), which will be sent to
  them without teleporting you to their current location (Ideal for dealing
  with requests for assistance which can be answered with a single message.)

  If <PAGE NO> is specified, the list of users who need welcoming will be
  split up into pages and the page number specified will be displayed, e.g:
  'assist list 1', 'assist list 2', etc.

  Usage of the 'assist' command is logged to the 'Assist' log file.

-------------------------------------------------------------------------------

  Authors
  ~~~~~~~
  USAGE:  author <NAME> [= <PAGE NO>]
          authors [<PAGE NO>]

  The 'authors' command displays a complete list of source code module authors.

  Typing 'authors' without a name of a module author will display a complete
  list of all authors.  The first page of authors will be displayed.  You can
  display the other pages using 'authors <PAGE NO>', e.g:  'authors 2'.

  If you are interested in a particular author, you can type 'author <NAME>' to
  view full information (Including modules they have worked on) about a source
  code module author.  For example, 'author jpb' will display full information
  about the module author with the initials JPB.  You can specify the initials,
  full name or nickname of an author.

  The 'authors' command ensures that authors of TCZ source code modules are
  given credit and acknowledgement where due.  It also allows users to find out
  who was responsible for their favourite parts of TCZ.

-------------------------------------------------------------------------------

  Bank
  ~~~~
  USAGE:  statement [<NAME>]
          withdraw <AMOUNT>
          restrict <AMOUNT>
          deposit <AMOUNT>
          bank

  Every user on a TCZ-based MUD has a bank account, where they can deposit and
  withdraw credit (Money) which they've earned.

  Every user on the TCZ-based MUD starts off with 500 credits in their bank
  account and 50 credits in their 'pocket'.  If you run out of credits in
  your pocket, you can easily withdraw more from your bank account (NOTE:
  New users cannot withdraw credit from their bank account until they have
  1 hour of total connect time.)


  Your 'wage'
  ~~~~~~~~~~~
  For every hour you spend connected to the TCZ-based MUD, you will be paid
  25 credits into your bank account.  This figure doubles if you stay
  connected for 8 or more hours within a single login session (Giving you
  '*SPOD*' status in the user list ('who'.))

  NOTE:  Idling (Not typing any commands) for over 5 minutes does not count
         towards your next payment.

	 Two or more active connections with the same character will not
         count towards your next payment, unless all of the connections
         except one are idle for more than 5 minutes.

	 Puppets do not receive hourly payments.


  How to get to the bank
  ~~~~~~~~~~~~~~~~~~~~~~
  USAGE:  bank
  
  Typing 'bank' will take you to the TCZ-based MUD's bank, where you can
  withdraw from or deposit credit into your bank account or view your bank
  statement.


  Viewing your bank statement
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  USAGE:  statement

  Typing 'statement' in the bank will show you a statement of your account,
  telling you how much you have in your account, pocket and a summary of
  your income and expenditure over the current quarter.


  Withdrawing credit from your bank account
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  USAGE:  withdraw <AMOUNT>

  You can withdraw credit from your account by typing 'withdraw' followed by
  the amount you would like to withdraw, e.g:  'withdraw 10' will withdraw 10
  credits from your bank account.


  Depositing credit into your bank account
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  USAGE:  deposit <AMOUNT>

  To deposit credit into your account, simply type 'deposit' followed by the
  amount you would like to deposit, e.g:  'deposit 100' will deposit 100
  credits from your pocket into your bank account.


  Guarding against unwanted payments
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  USAGE:  restrict <AMOUNT>

  You can use the '@pay' command to build compound commands which charge for
  their usage.  See section on '@pay' for further details.

  To guard against malicious users charging too much for using commands, etc.
  in their areas, you can set a restriction on the maximum amount you can
  pay to another user from within a compound command.

  The default restriction is 10 credits.  To change this restriction, simply
  type 'restrict' follwed by your preferred restriction, e.g:  'restrict 5'
  will restrict the maximum amount you can pay from within a compound command
  to 5 credits.

  NOTE:  The above restriction does not apply to payments to other users
         performed on the command-line or payments made within compound
         commands which have been set WIZARD by administrators of the
         TCZ-based MUD.

         The restriction also does not apply to the owner of the compound
         command (I.e:  When they are using '@force' to pay out credits to
         other users.)


  ***  IMPORTANT  ***
  ~~~~~~~~~~~~~~~~~~~
  Please don't ask administrators to give you credit.  They will not be able
  to do so, except in exceptional circumstances.

-------------------------------------------------------------------------------

  BBS
  ~~~
  USAGE:  bbs [<BBS COMMAND>]

  TCZ-based MUD's feature an easy to use, topic-based BBS system, where you
  can read the latest news, take part in topical discussions, read messages
  left by other users and leave messages for others to read.

  If <BBS COMMAND> is specified, the BBS command <BBS COMMAND> will be
  executed.  You can execute any BBS command from anywhere on the TCZ-based
  MUD by preceeding it with the 'bbs' command, e.g:  'bbs topic general',
  'bbs read unread', etc.

  If <BBS COMMAND> is omitted, you will be teleported to the BBS room, where
  you can use any BBS command without needing to proceed it with the 'bbs'
  command (This saves you quite a bit of typing, and because the BBS room is a
  quiet location (See 'help quiet flag'), you can browse and post to the BBS
  relatively undisturbed.)


  .-=========================================================================-.
  |                          General BBS commands...                          |
  |---------------------------------------------------------------------------|
  | add            addanon        anon           bbs            find          |
  | ignore         latest         messages       read           replies       |
  | reply          replyanon      search         settings       subtopic      |
  | subtopics      summary        topic          topics         view          |
  | vote                                                                      |
  |---------------------------------------------------------------------------|
  |               BBS commands you can use on your messages...                |
  |---------------------------------------------------------------------------|
  | append         appendanon     delete         modify         move          |
  | subject        vote                                                       |
  |---------------------------------------------------------------------------|
  |                     Admin/topic owner BBS commands...                     |
  |---------------------------------------------------------------------------|
  | accesslevel    addtopic       allowadd       allowanon      censor        |
  | copy           cyclic         deletetopic    desctopic      formatting    |
  | hilight        messagelimit   mortaladd      owner          ownertopic    |
  | readanon       readers        renametopic    settings       subtopiclimit |
  | timelimit      vote                                                       |
  |---------------------------------------------------------------------------|
  | For help on any of the above BBS commands on the TCZ-based MUD, please    |
  | type 'help bbs <COMMAND>', where <COMMAND> is the BBS command you'd like  |
  | help on, e.g:  'help bbs read'.                                           |
  `-=========================================================================-'


  BBS Tutorial...
  ~~~~~~~~~~~~~~~
  There are two ways you can use the TCZ-based MUD's BBS...

  (1)  Type 'bbs', which will take you to the TCZ-based MUD's BBS room, where
       you can use the BBS without being disturbed by other users (The BBS
       room is set QUIET, so users can't talk in it.)

  (2)  Type 'bbs <BBS COMMAND>' from ANYWHERE on the TCZ-based MUD, e.g:
       'bbs topics', 'bbs topic general', 'bbs read unread', etc.  The
       advantage of this method is that you can use the BBS from anywhere
       on the TCZ-based MUD.  The disadvantage is that you need to type 'bbs'
       in front of every BBS command (You don't need to do this when you're
       in the BBS room.)

  For simplicity, this tutorial assumes that you're presently in the TCZ-based
  MUD's BBS room.  If you're not, please type 'bbs' to go there before
  continuing with this tutorial...


  The topic list...
  ~~~~~~~~~~~~~~~~~
  If you type 'topics', you'll see the list of available topics on the BBS.

  To the right of each topic name, you'll see two numbers in brackets, e.g:
  'General           (23,45)'  -  The first number (23) is the number of new
  messages within the topic which you haven't read yet, and the second number
  (45) is the total number of messages within the topic (NOTE:  These numbers
  include messages within sub-topics within the topic.)

  Any topic with a '!' to the left of its name is a topic which you can't
  access (E.g:  '!Admin'.)  Topics with a '*' to the left of their name are
  relatively important topics, which you should browse regularly (These
  include 'News', 'Code Updates', 'Suggestions', 'Bug Reports' and 'Building'.)

  If there's more than one page of topics on the BBS, you can view the other
  pages by typing 'topics <PAGE>', e.g:  'topics 2' to view the second page
  of topics, etc.

  If you type 'summary', you'll see a list of topics and sub-topics which
  contain new messages which you haven't read.  'Summary' will show you how
  many unread messages there are in each topic/sub-topic listed, along with
  the message number and title of the most recently added message in each.

  The 'latest' command is similar to 'summary', except it shows a short list of
  the most recent messages added to the BBS (Regardless of whether you've read
  them or not), along with which topic/sub-topic each message is in.  You can
  also type 'latest <TOPIC>' to list the most recent messages added to a
  particular topic/sub-topic (E.g:  'latest news'), and type 'latest *<NAME>'
  to list the most recent messages added by a particular character (NOTE:  The
  '*' IS needed.)

  Both the 'summary' and 'latest' commands can be typed from anywhere on the
  TCZ-based MUD, so you can type either of them when you first connect to see
  what's new on the BBS at a glance.


  Selecting a topic and reading messages...
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  To select a topic to browse from the list of topics, simply type 'topic
  <TOPIC>', where <TOPIC> is the name of the topic, e.g:  'topic general'.

  On selecting a topic, a list of messages in the topic will be displayed.
  This list is split into pages, so if there's more than a page of topics,
  you'll be looking at the most recent messages added to the topic.  You
  can view the other pages by typing 'view page <PAGE NO>', e.g:  'view page
  1', 'view page 2', etc.  Typing 'view' on its own displays the most recent
  page of messages.

  Some topics may contain further sub-topics.  This allows related topics to
  be organised (E.g:  News/General, News/Code Updates, News/Misc, etc.) and
  kept together.  You can list the sub-topics within your current selected
  topic by typing 'subtopics', and select a sub-topic from the list by typing
  'subtopic <NAME>' (These work in a similar manner to the 'topics' and 'topic'
  commands.)

  Once you've selected a topic/sub-topic, it's name will be displayed in the
  topics/sub-topics list with an arrow ('->') to the left of it's name.
  
  To read a message, simply type 'read <NUMBER>', where <NUMBER> is the
  number of the message you'd like to read.  When you type 'view', you'll
  notice a number in brackets (E.g:  '(5)    'A message' left by...') to the
  left of the each message listed.  This is the message's number, so to read
  message number 5, you'd type 'read 5', and so on.  You can read the next
  unread message in the topic/sub-topic by typing 'read unread'.

  Once you've read a message, you can read the next message in your current
  topic/sub-topic by typing 'read next'.  Likewise, 'read prev' will read the
  previous message.  'read current' will re-read the message you last read.

  The 'read unread' command reads the next unread message on the BBS, starting
  from your current selected topic/sub-topic.  By repeatively typing 'read
  unread', you can read every new message added to the BBS without needing to
  change topic/sub-topic or use the 'summary' and 'latest' commands to find
  out which topics/sub-topics contain new messages.  Alternatively, you can
  simply type 'unread' or 'new' instead of 'read unread'.

  Sooner or later, you'll come across a message which you can vote on
  (Especially if you're browsing the 'Voting Forum' topic.)  If you like, you
  can vote on the message  -  Simply type 'vote <NUMBER> yes' or 'vote <NUMBER>
  no' appropriately (Where <NUMBER> is the number of the message) to register
  your vote.  If appropriate, you can abstain your vote by typing 'vote
  <NUMBER> abstain'.


  Adding and replying to messages...
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  In most topics/sub-topics you can add messages of your own, or leave replies
  to messages left by other users.

  To add a message to the topic/sub-topic you're currently browsing, simply
  type 'add <SUBJECT>' (E.g:  'add My first message' to add a message with
  the subject 'My first message'.)  On doing this, you'll find yourself in
  the TCZ-based MUD's Editor.  Now simply type each line of your message,
  pressing RETURN or ENTER at the end of each line.

  Once you're finished, type '.view' to check your message (Don't worry about
  the '[001]', '[002]', etc. to the left of each line  -  These are just line
  numbers and won't appear in your message.)  If you're happy with it, type
  '.save' to save it and add it to the topic/sub-topic you're currently
  browsing on the BBS, otherwise type '.abort = yes' to abandon it.

  For full details on how to use the TCZ-based MUD's Editor, please see the
  section on it further on in this manual.

  If you like, you can add an anonymous message/reply to a message, so that
  other users (Except Admin) don't know who added it (If you're Admin and make
  a message anonymous, only Deities and above will be able to see who added
  it.)  To do this, simply use the 'addanon' and 'replyanon' BBS commands
  respectively (NOTE:  Some topics do not allow anonymous messages  -  Use
  the 'settings' BBS command to check.)

  To reply to a message, type 'reply <NUMBER>', where <NUMBER> is the number
  of the message you'd like to leave a reply to.  You'll then find yourself
  in the TCZ-based MUD's Editor, so you can write your reply.

  If you accidentally add a message to the wrong topic/sub-topic, you can move
  it to another topic/sub-topic by typing 'move <NUMBER> <TOPIC>', where
  <NUMBER> is the number of the message, and <TOPIC> is the name of the topic/
  sub-topic you'd like to move it to, e.g:  'move 5 general' will move message
  number 5 to the topic 'General', and 'move 8 building/help' will move message
  number 8 to the sub-topic 'Help' in the topic 'Building'.

  You can make it so users can vote on your message by simply typing 'vote
  <NUMBER> on'.  You can turn voting off at any time by typing 'vote <NUMBER>
  off' and reset votes for/against the message using 'vote <NUMBER> reset'.


  Changing and deleting messages...
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  You can re-edit any of your messages on the BBS:  Simply go to the topic/
  sub-topic where the message is located (Type 'topic <TOPIC>') and type
  'modify <NUMBER>', where <NUMBER> is the number of the message.  This will
  put you in the TCZ-based MUD's Editor, editing the message (Please see
  section on using the editor further on in this manual before doing this.)
  Once you're finished, type '.save' to save your changes, otherwise type
  '.abort = yes' to abandon them.

  You can delete one of your messages by typing 'delete <NUMBER>', where
  <NUMBER> is the number of the message.  PLEASE NOTE:  Once you've deleted a
  message, there's no way to retrieve it.

  You can also delete a range of messages (Providing you own them, or are of
  a higher level than their owner(s)) by typing 'delete <RANGE>', e.g:
  'delete 2-7' will delete messages 2, 3, 4, 5, 6 and 7.


===============================================================================
  >>>>>                     General BBS commands...                     <<<<<
===============================================================================

  Add and Addanon
  ~~~~~~~~~~~~~~~
  USAGE:  [bbs] add[anon] <SUBJECT> [= <MESSAGE>]

  The 'add' BBS command posts a new message with the subject <SUBJECT> to the
  topic/sub-topic you're currently browsing on the BBS.

  If <MESSAGE> (Your message) is specified, the message will be posted to the
  BBS immediately.  Otherwise, the TCZ-based MUD's Editor will be started, so
  you can write your message (Type it in a line at a time, and then type
  '.save' on a line by itself to exit the editor and post your message to the
  BBS.)

  You can use 'addanon' instead of 'add' to anonymously post a message to the
  BBS.

-------------------------------------------------------------------------------

  Anon
  ~~~~
  USAGE:  [bbs] anon <NUMBER>

  The 'anon' BBS command makes the message number <NUMBER> in the topic/
  sub-topic you're currently browsing on the BBS anonymous.  You can also use
  this BBS command to make a message of yours no-longer anonymous.

  When a message is made anonymous, other users will not be able to see the
  identity of the user who posted the message.  To prevent abuse, Admin are
  able to use the 'readanon' BBS command to read an anonymous message and
  reveal the identity of who posted it.

  You can use the 'addanon', 'replyanon' and 'appendanon' BBS commands to
  anonymously post, reply and append to messages respectively.

-------------------------------------------------------------------------------

  Ignore
  ~~~~~~
  USAGE:  [bbs] ignore [<TOPIC>[/<SUBTOPIC>]]
          [bbs] ignore all

  You will probably find that there are several topics/sub-topics on the BBS
  which you are not interested in reading the messages within.  However, if
  you don't read the messages, they will still appear as unread messages in
  'summary', 'topics', etc.

  You can use the 'ignore' BBS command to ignore the unread messages currently
  within a topic or sub-topic, or ignore every single unread message currently
  on the entire BBS.

  When a message has been ignored, it will be marked as '(Ignored)' and will
  no-longer appear as '(*UNREAD*)', or in 'summary', 'topics', etc.

  To ignore all remaining unread messages within the topic/sub-topic you're
  currently browsing, simply type '[bbs] ignore'.

  To ignore the unread messages currently within a selected topic/sub-topic,
  type '[bbs] ignore <TOPIC>[/<SUBTOPIC>]', where <TOPIC> is the name of the
  topic, and (Optionally) <SUBTOPIC> is the name of the sub-topic, i.e:

     bbs ignore discussion/politics
     bbs ignore discussion
     bbs ignore general

  To ignore all unread messages currently on the entire BBS, simply type 
  '[bbs] ignore all'.

  You can read messages which you have ignored by typing 'read ignored' (This
  is similar to how you can read unread messages, using 'read unread'.)

-------------------------------------------------------------------------------

  Latest
  ~~~~~~
  USAGE:  [bbs] latest <TOPIC>[/<SUBTOPIC>] [= <COUNT>]
          [bbs] latest *<NAME> [= <COUNT>]
          [bbs] latest me [= <COUNT>]
          [bbs] latest

  The 'latest' BBS command lists the most recent messages posted to the BBS,
  along with the topic/sub-topic they're located in.

  By default, the 12 most recent messages are shown, but any number upto a
  maximum of 60 can be shown by specifying <COUNT>, e.g:  'latest = 30' will
  show the 30 most recent messages posted to the BBS.

  You can list the most recent messages posted in a particular topic/sub-topic
  by typing 'latest <TOPIC>[/<SUBTOPIC>]', where <TOPIC> is the name of the
  topic and (Optionally) <SUBTOPIC> is the name of a sub-topic within that
  topic, e.g:  'latest news', 'latest code updates/building', etc.

  You can list the most recent messages you've posted to the BBS by typing
  'latest me'.  This is useful if you wish to review the messages you've posted
  recently.

  You can also list the most recent messages posted by a particular character
  by typing 'latest *<NAME>', where <NAME> is the name of the character (The
  '*' IS important.)

-------------------------------------------------------------------------------

  Read (View) and Messages
  ~~~~~~~~~~~~~~~~~~~~~~~~
  USAGE:  [bbs] read [page] <NUMBER>   [bbs] view [page] <NUMBER>
          [bbs] read unread|ignored    [bbs] view unread|ignored
          [bbs] read next|prev         [bbs] view next|prev

          [bbs] messages [page] <NUMBER>
          [bbs] messages unread|ignored
          [bbs] messages next|prev

  The 'read' (Or 'view') BBS command is used to both list messages in your
  current selected topic/sub-topic and read individual messages.

  To see a list of messages in your current selected topic/sub-topic, simply
  type 'read' (Or 'view'.)  If there are a lot of messages in a topic, you'll
  see the last full page of messages by default.  You can view the other pages
  of messages by typing 'read page <NUMBER>' (Or 'view page <NUMBER>'), where
  <NUMBER> is the number of the page you'd like to view, e.g:  'read page 1'
  will show you the first page of messages in the topic/sub-topic.

  To read a message, simply type 'read <NUMBER>' (Or 'view <NUMBER>'), where
  <NUMBER> is the number of the message, e.g:  'read 43' will read message
  number 43 in your current selected topic/sub-topic.  Once you've read a
  message, you can type 'read next' to read the next message in the topic/
  sub-topic and 'read prev' to read the previous message.

  The 'read unread' BBS command reads the next message on the BBS which you
  haven't read yet (If the next unread message is in another topic/sub-topic,
  your current selected topic/sub-topic will be changed automatically for you.)
  You can effectively use this command to read every single unread message on
  the BBS.

  The 'read ignored' BBS command reads the next unread message on the BBS which
  you have ignored using the 'ignore' BBS command (If the next unread message
  is in another topic/sub-topic, your current selected topic/sub-topic will
  be changed automatically for you.)

  The 'messages' BBS command is identical to the 'read'/'view' BBS commands,
  except that it omits (Ignores) replies to messages.

-------------------------------------------------------------------------------

  Replies
  ~~~~~~~
  USAGE:  [bbs] replies <NUMBER>

  The 'replies' BBS command lists all replies to the message <NUMBER> in your
  current selected topic/sub-topic (Including the original message, if it still
  exists.)

  This allows you to easily find the replies to a given message, all the way
  back to the original message which involked response from other users (If it
  still exists.)  This allows you to follow the thread right from its start,
  and read/find all of the replies which it generated.

-------------------------------------------------------------------------------

  Reply
  ~~~~~
  USAGE:  [bbs] reply[anon] <NUMBER> [= <MESSAGE>]

  The 'reply' BBS command posts a reply to the message number <NUMBER> in the
  topic/sub-topic you're currently browsing on the BBS.

  If <MESSAGE> (Your message) is specified, the reply will be posted to the BBS
  immediately.  Otherwise, the TCZ-based MUD's Editor will be started, so you
  can write your reply to the message (Type it in a line at a time, and then
  type '.save' on a line by itself to exit the editor and add your reply to
  the message to the BBS.)

  You can use 'replyanon' instead of 'reply' to anonymously reply to a message
  on the BBS.

-------------------------------------------------------------------------------

  Search (Find)
  ~~~~~~~~~~~~~
  USAGE:  [bbs] search [next|prev] <TEXT> [= subjects|messages|all]
          [bbs] find [next|prev] <TEXT> [= subjects|messages|all]

  By default, the BBS 'search'/'find' command searches for the next occurence
  of <TEXT> in the subject and message text of messages on the BBS.  If a
  matching message is found, it will be shown (As though you read it, using
  the 'read'/'view' BBS command.)  E.g:  'search fred' will search for the
  next message with the text 'fred' in its subject or message text.

  You can search for the previous matching message using 'search prev', e.g:
  'search prev fred' will search for the previous message with the text 'fred'
  in its subject or message text.

  You can restrict the searching to either the message subject or message text
  only by specifying the second parameter.  E.g:  'search fred = subjects' will
  search for the next message with the text 'fred' in its subject only.

-------------------------------------------------------------------------------

  Settings
  ~~~~~~~~
  USAGE:  [bbs] settings [<TOPIC>]

  The 'settings' BBS command displays information about the topic/sub-topic
  you're currently browsing on the BBS (Or the topic <TOPIC>, if specified,
  e.g:  'settings news'.)

  You can use this BBS command to see the owner of a particular topic/sub-topic
  and the restrictions imposed on it (I.e:  Message limit, whether messages can
  be added, level required to access topic, etc.), even if you can't access the
  topic/sub-topic yourself.

-------------------------------------------------------------------------------

  Subtopic
  ~~~~~~~~
  USAGE:  [bbs] subtopic <NAME>

  If a BBS topic is divided up into several sub-topics, you can use the
  'subtopic' BBS command to pick a sub-topic to browse from the topic.

  Sub-topics are used to group and organise related topics on the BBS.
  For example, the topic NEWS could contain the sub-topics EVENTS, GENERAL,
  MISCELLANEOUS and MEETS.

  You can choose a sub-topic from a topic by either first choosing the topic
  ('topic <NAME>') and then typing 'subtopic <NAME>' or by typing 'topic
  <SUBTOPIC>/<TOPIC>', where <SUBTOPIC> is the name of the sub-topic and
  <TOPIC> is the name of the topic, e.g:  'topic news/general'.

  You can list the sub-topics within a topic using the 'subtopics' BBS command.

-------------------------------------------------------------------------------

  Subtopics
  ~~~~~~~~~
  USAGE:  [bbs] subtopics [page] [<PAGE NO>] [<TOPIC>]

  Sub-topics are used to group and organise related topics on the BBS.
  For example, the topic NEWS could contain the sub-topics EVENTS, GENERAL,
  MISCELLANEOUS and MEETS.

  You can list the sub-topics in a topic by either first choosing the topic
  ('topic <NAME>', where <NAME> is the name of the topic) and then typing
  'subtopics' or by typing 'subtopics <TOPIC>', where <TOPIC> is the name
  of the topic.

  If <PAGE NO> is specified and the list of sub-topics spans more than one
  page, that page of sub-topics will be displayed, e.g:  'subtopics 2' to
  view the 2nd page, 'subtopics 3' to view the 3rd, etc.

  You can choose a sub-topic from a topic by using the 'subtopic' BBS command.

-------------------------------------------------------------------------------

  Summary
  ~~~~~~~
  USAGE:  [bbs] summary [page] [<PAGE NO>]

  The 'summary' BBS command displays a list of topics and sub-topics which
  currently contain messages which you haven't read yet, along with a count
  of the total number of unread messages and the subject and message number
  of the most recent message in each.

  This command can be used to get an overview of unread messages currently on
  the BBS and can help you find topics/sub-topics with new messages you may be
  interested in.

  If <PAGE NO> is specified and the summary spans more than one page, that page
  of the summary will be displayed, e.g:  'summary 2' to view the 2nd page,
  'summary 3' to view the 3rd, etc.

-------------------------------------------------------------------------------

  Topic
  ~~~~~
  USAGE:  [bbs] topic <TOPIC>

  The 'topic' BBS command is used to select a topic that you're interested in
  from the list of available topics on the BBS.  You can list the available
  topics on the BBS by typing 'topics'.

  Once you've selected a topic, you can use the 'read'/'view' BBS command to
  list and read the messages it contains.

  For example:  'topic news' will select the topic NEWS from the list of
                available topics on the BBS.

-------------------------------------------------------------------------------

  Topics
  ~~~~~~
  USAGE:  [bbs] topics [page] [<PAGE NO>]

  The 'topics' BBS command lists the available topics on the BBS.  Some of
  these topics may also contain further related sub-topics (These can be listed
  and selected using the 'subtopics' and 'subtopic' BBS commands respectively.)

  If <PAGE NO> is specified and the list of topics span more than one page,
  that page of the list of topics will be displayed, e.g:  'topics 2' to view
  the 2nd page, 'topics 3' to view the 3rd, etc.

  The numbers in brackets (E.g:  'News (12/100)' after each topic name in the
  list tell you how many unread messages (In this case, 12) and the total
  number of messages altogether (In this case, 100) the topic and its
  sub-topics (If it has any) contain.

  If a topic name in the list is preceeded by a '!', it means that you cannot
  access that topic (E.g:  '!Admin'.)  You can use the 'settings' BBS command
  to find out exactly what restrictions are imposed on a topic/sub-topic, e.g:
  'settings admin'.

  A topic name in the list preceeded by a '*' is a topic that's considered
  important (The name of the topic hilighted and prefixed with a '*' to make
  it stand out from the rest of the topics in the list.)

-------------------------------------------------------------------------------

  Vote
  ~~~~
  USAGE:  [bbs] vote <NUMBER> [=] majority|normal
          [bbs] vote <NUMBER> [=] yes|no|abstain
          [bbs] vote <NUMBER> [=] secret|public
          [bbs] vote <NUMBER> [=] expiry <DAYS>
          [bbs] vote <NUMBER> [=] on|off|reset
          [bbs] vote <NUMBER> [=] list

  The 'vote' BBS command can be used to register your vote on a votable
  message, or to make a message votable, so other users may vote on it.


  Registering your vote
  ~~~~~~~~~~~~~~~~~~~~~
  USAGE:  [bbs] vote <NUMBER> [=] yes|no|abstain

  To register your vote on a votable message, simply type 'vote <NUMBER> for',
  'vote <NUMBER> against' or 'vote <NUMBER> abstain' (If appropriate) to
  register your vote appropriately on the message.  For example, you could
  vote FOR the message number 71 in your current selected topic/sub-topic by
  typing 'vote 71 for'.

  Once you've voted, you can change the direction of your vote, if you decide
  otherwise before the vote is closed.  To change your vote, simply cast it
  again on the message, in the appropriate direction.  Your previous vote will
  be erased, and your new vote registered in its place.


  Making a message votable
  ~~~~~~~~~~~~~~~~~~~~~~~~
  USAGE:  [bbs] vote <NUMBER> [=] on|off|reset

  Any message can be made votable by typing 'vote <NUMBER> on'.  This will
  allow users to vote on the message appropriately.  You can 'close' the vote
  (So that no-one else can vote or change their vote) by typing 'vote <NUMBER>
  off'.  If you wish to clear the results of the vote (I.e:  To start the
  vote again), you can do this by typing 'vote <NUMBER> reset'.


  Making votes subject to a secret ballot
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  USAGE:  [bbs] vote <NUMBER> [=] secret|public

  Voting on a message can be made subject to a secret ballot (I.e:  The current
  results of the vote are not shown to users reading the message) by typing
  'vote <NUMBER> secret'.  The results can be revealed (I.e:  Once you've
  closed the vote) by typing 'vote <NUMBER> public'.


  Making votes subject to the majority factor
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  USAGE:  [bbs] vote <NUMBER> [=] majority|normal

  Voting on a message can also be made subject to the majority factor.  This
  weights votes according to the rank of the user casting the vote (I.e:  So
  that higher ranking users have more influence.)  Please see section on the
  majority factor below for further details, including how the weighting is
  organised.  Voting on a message can be made subject to the majority factor
  by typing 'vote <NUMBER> majority'.  Voting can also be made subject to
  normal majority (Equal weighting) again by typing 'vote <NUMBER> normal'.


  Setting an expiry time for voting
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  USAGE:  [bbs] vote <NUMBER> [=] expiry <DAYS>

  An expiry time can be set for voting on a message.  Once set, voting on
  the message will remain open for that period of time, after which it will
  automatically close.  If the vote has been made subject to a secret ballot,
  the results of the vote will be made public when it closes.

  To set an expiry time for voting on a message, simply type 'vote <NUMBER>
  expiry <DAYS>', where <DAYS> is the time in days (Upto a maximum of 7),
  after which voting on the message will close.

  Once an expiry time has been set, it cannot be reduced or removed.  Voting
  on the message cannot be turned on/off, and the votes on the message cannot
  be reset.  The voting can be made subject to a secret ballot, but cannot be
  made public again.  These restrictions apply until the expiry time for
  voting on the message has passed.

  However, the expiry time can be increased, if more time is required for the
  vote (To do this, simply set an expiry time higher than the current time
  remaining.)


  Listing the votes on a message
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  USAGE:  [bbs] vote <NUMBER> [=] list

  Deities and the Supreme Being can use the 'vote <NUMBER> list' command to
  list the names of users who have cast votes in each direction.  This BBS
  command is restricted to Deities and the Supreme Being to prevent the
  privacy and confidentiality of users casting votes being breached.
  It's main use is to check for possible vote rigging in important votes.


  The majority factor...
  ~~~~~~~~~~~~~~~~~~~~~~
  USAGE:  [bbs] vote <NUMBER> [=] majority|normal

  Using the 'vote <NUMBER> majority' BBS command, the votes of a message on
  the BBS can be made subject to the 'majority factor', which weights the votes
  on the message depending on the rank of each voter.  The 'majority factor' is
  a percentage in favour, which is worked out by dividing the total score of
  votes in each direction (For, against and abstain) and dividing them into
  the total score for every single vote cast on the message.


  The vote weighting is as follows...
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  Moron:  0, Mortal/Builder:  1, Experienced Builder/Assistant:  2, Apprentice
  Wizard/Druid:  3, Wizard/Druid:  4, Elder Wizard/Druid:  5, Deity/The Supreme
  Being:  6.

===============================================================================
  >>>>>          BBS commands you can use on your messages...           <<<<<
===============================================================================

  Append
  ~~~~~~
  USAGE:  [bbs] append[anon] <NUMBER> [= <MESSAGE>]
          [bbs] append <NUMBER> = on|off

  The 'append' BBS command appends to the bottom of a BBS message.

  If <MESSAGE> (Your message) is specified, it will be appended to the message
  on the BBS immediately.  Otherwise, the TCZ-based MUD's Editor will be
  started, so you can write your message (Type it in a line at a time,
  and then type '.save' on a line by itself to exit the editor and append
  it to the message on the BBS.)

  The main use of the 'append' BBS command is to make additions to a message
  you've posted on the BBS at a later date, after it has been read by a number
  of other users.

  Appending to the message will also mark it as unread again (For everyone),
  so that people who have already read the message in the past know to read it
  again (So that they can see your append to the message.)

  If you need to add to or change a message straight after posting, you should
  use the 'modify' BBS command.  Otherwise, you should append to the message,
  so that it's marked as being unread again (The 'modify' BBS command doesn't
  do this.)

  Apprentice Wizards/Druids and above may append to any message, regardless of
  who posted it (Even if it was posted by a higher level administrator.)

  You can use 'appendanon' instead of 'append' to anonymously append to a
  message on the BBS.

  You can prevent a message from being appended to by using '[bbs] append
  <NUMBER> = off', where <NUMBER> is the number of the message.  No user
  (Including yourself) will be able to append to the message, unless '[bbs]
  append <NUMBER> = on' is used to allow appending again.

-------------------------------------------------------------------------------

  Delete
  ~~~~~~
  USAGE:  [bbs] delete <RANGE> [= yes]
          [bbs] delete <NUMBER>

  The 'delete' BBS command will delete a message (Or range of messages) from
  your current selected topic/sub-topic on the BBS, e.g:  'delete 14' will
  delete message number 14.

  In addition to deleting a single message, several messages can be deleted all
  in one go by giving a range.  To do this, the parameter '= yes' must also be
  given.  For example, 'delete 43-47 = yes' will delete messages 43, 44, 45,
  46 and 47.

  PLEASE NOTE:  Deleting a message is permanent.  You can't retrieve a message
                once it's been deleted.

-------------------------------------------------------------------------------

  Modify
  ~~~~~~
  USAGE:  [bbs] modify <NUMBER>

  The 'modify' BBS command allows you to edit and make changes to a message
  you've posted on the BBS (After you've posted it), e.g:  'modify 32' will
  put you into the TCZ-based MUD's Editor, editing message 32 in your current
  selected topic/sub-topic on the BBS.

  Once you've finished making your changes, type '.save' to save them and
  exit the editor, or (If you're unhappy with them, or have made a serious
  mistake (Such as wiping the whole message)) type '.abort' to abandon them.

  If you need to add to or change a message straight after posting, you should
  use the 'modify' BBS command.  Otherwise, you should append to the message
  (Using the 'append' BBS command), so that it's marked as being unread again
  (The 'modify' BBS command doesn't do this.)

-------------------------------------------------------------------------------

  Move
  ~~~~
  USAGE:  [bbs] move <NUMBER> = <TOPIC>

  The 'move' BBS command moves a message from your current selected topic/
  sub-topic to another topic/sub-topic on the BBS, e.g:  'move 52 = general'
  will move message number 52 to the topic GENERAL on the BBS.

  The main use of this BBS command is to move a message you've accidentally
  added to the wrong topic/sub-topic to the correct topic/sub-topic.

-------------------------------------------------------------------------------

  Subject
  ~~~~~~~
  USAGE:  [bbs] subject <NUMBER> = <SUBJECT>

  The 'subject' BBS command changes the subject of a message in your current
  selected topic/sub-topic on the BBS, e.g:  'subject 24 = My message' will
  change the subject of message number 24 to 'My message'.

  The main use of this BBS command is to correct the title of a message you've
  added (If it's incorrect or contains typing errors.)

  The subject of a reply to a message can't be changed.

===============================================================================
  >>>>>                Admin/topic owner BBS commands...                <<<<<
===============================================================================

  Accesslevel
  ~~~~~~~~~~~
  USAGE:  [bbs] accesslevel <TOPIC> = <LEVEL>

  The 'accesslevel' BBS command sets the level (Rank) required to access the
  topic/sub-topic <TOPIC> on the BBS.

  In order to access the topic/sub-topic, the user must be of the given rank
  or above.  The default access level of a topic/sub-topic is Mortal.

  <LEVEL> can be one of the following ranks:  Supreme Being, Deity, Elder,
  Wizard, Apprentice, Experienced Builder, Builder, Mortal, Moron.

  Example:  accesslevel admin = apprentice

-------------------------------------------------------------------------------

  Addtopic
  ~~~~~~~~
  USAGE:  [bbs] addtopic [<SUBTOPIC>/]<NAME> = <DESCRIPTION>

  The 'addtopic' BBS command adds a new topic or sub-topic to the BBS.

  <NAME> is the name of the new topic/sub-topic (Which must not exceed 13
  characters in length) and <DESCRIPTION> is a short description for the
  topic (This will appear at the top of the message list ('read'/'view'.))

  For example, 'addtopic Admin = The Admin only area of the BBS' will add a new
  topic to the BBS called 'Admin'.  The sub-topic 'Social' could then be added
  to the topic 'Admin' by typing 'addtopic Admin/Social = Social area for
  administrators'.

  Sub-topics can't be created within other sub-topics  -  They can only be
  created within the top-level topics (As listed by the 'topics' BBS command.)
  The maximum number of sub-topics allowed within a topic can be set using the
  'subtopiclimit' BBS command (The default is 16.)

-------------------------------------------------------------------------------

  Allowadd
  ~~~~~~~~
  USAGE:  [bbs] allowadd <TOPIC> = yes|no

  The 'allowadd' BBS command sets whether new messages may be posted to a
  topic/sub-topic or not.  The default for a new topic/sub-topic is to allow
  new messages to be added.

  Example:  allowadd information = no

-------------------------------------------------------------------------------

  Allowanon
  ~~~~~~~~~
  USAGE:  [bbs] allowanon <TOPIC> = yes|no

  The 'allowanon' BBS command sets whether messages within a topic/sub-topic
  may be made anonymous or not, and whether the 'addanon', 'replyanon' and
  'appendanon' BBS commands may be used to leave anonymous messages/replies/
  appends to messages within the topic/sub-topic.

  The default for a new topic/sub-topic is to allow anonymous message.

  Example:  allowanon voting forum = yes

-------------------------------------------------------------------------------

  Censor
  ~~~~~~
  USAGE:  [bbs] censor <TOPIC> = yes|no

  The 'censor' BBS command sets whether bad language used within messages in a
  topic/sub-topic will be automatically censored or not.  When bad language is
  censored, matches to most common explicit/vulgar English words will be
  censored with *'s.

  The default for a new topic/sub-topic is to censor bad language.

  Example:  censor general = yes

-------------------------------------------------------------------------------

  Copy
  ~~~~
  USAGE:  [bbs] copy <NUMBER> = <TOPIC>

  The 'copy' BBS command makes a copy of the message <NUMBER> in your current
  selected topic/sub-topic and places it in the topic/sub-topic <TOPIC> (Which
  must be a different topic/sub-topic from the one you're currently browsing.)

  For example, you can copy message number 34 to the topic GENERAL by typing
  'copy 34 = general'.

  This BBS command is especially useful if you need to post the same message
  into more than just one topic/sub-topic.

-------------------------------------------------------------------------------

  Cyclic
  ~~~~~~
  USAGE:  [bbs] cyclic <TOPIC> = yes|no

  The 'cyclic' BBS command sets whether older messages in the topic will be
  automatically deleted to make room for new messages (As they're posted)
  when the topic is full (I.e:  The limit of messages allowed in the topic
  has been reached.)

  If a topic/sub-topic is not subject to cyclic message deletion, no one will
  be able to post new messages or reply to messages when the topic/sub-topic
  is full.

  The default for a new topic/sub-topic is to cyclicly delete messages once the
  topic/sub-topic is full.

  Example:  cyclic general = yes

-------------------------------------------------------------------------------

  Deletetopic
  ~~~~~~~~~~~
  USAGE:  [bbs] deletetopic <TOPIC>

  The 'deletetopic' BBS command deletes the topic/sub-topic <TOPIC> from the
  BBS.  Before a topic/sub-topic can be deleted, it must be completely empty
  (I.e:  Delete all messages from it and ensure it has no sub-topics.)

  For example, you could delete the topic 'Debates' by typing 'deletetopic
  debates', and you could delete the sub-topic 'Clubs/User Group' by typing
  'deletetopic clubs/user group'.

-------------------------------------------------------------------------------

  Desctopic
  ~~~~~~~~~
  USAGE:  [bbs] desctopic <TOPIC> = <DESCRIPTION>

  The 'desctopic' BBS command can be used to change the short description of
  a topic/sub-topic on the BBS (E.g:  If it's incorrect, the purpose of the
  topic/sub-topic has changed or it contains typing errors.)

  For example, you could change the short description of the topic 'Admin'
  to 'Forum for administrators' by typing 'desctopic admin = Forum for
  administrators'.

-------------------------------------------------------------------------------

  Formatting
  ~~~~~~~~~~
  USAGE:  [bbs] formatting <TOPIC> = yes|no

  The 'formatting' BBS command sets whether the text of messages within a
  topic/sub-topic will be automatically formatted and punctuated or not.

  The default for a new topic/sub-topic is to automatically format and
  punctuate the text of messages.

  Example:  formatting ascii art = no

-------------------------------------------------------------------------------

  Hilight
  ~~~~~~~
  USAGE:  [bbs] hilight <TOPIC> = yes|no

  The 'hilight' BBS command sets whether the text of messages within a
  topic/sub-topic will be automatically hilighted in the list of topics/
  sub-topics or not.

  Important topics/sub-topics can be hilighted so that they stand out from
  the rest of the topics/sub-topics in the list.

  A hilighted topic/sub-topic will be displayed in a different colour from
  other topic names in the list, and will also be prefixed with a '*'.

  The default for a new topic/sub-topic is to not be hilighted in the list of
  topics/sub-topics.

  Example:  hilight news = yes

-------------------------------------------------------------------------------

  Messagelimit
  ~~~~~~~~~~~~
  USAGE:  [bbs] messagelimit <TOPIC> = <LIMIT>

  The 'messagelimit' BBS command can be used to change the maximum number of
  messages allowed within a BBS topic/sub-topic.

  The default message limit of a new topic/sub-topic is 100 messages.

  Unless a lower message limit is required in a particular topic/sub-topic,
  changing the message limit of a topic/sub-topic is not usually neccessary.
  Most topics should be subject to cyclic message deletion, and 100 messages
  should be ample to support several days (If not weeks in some topics) worth
  of posting.

  Example:  messagelimit clubs/builder club = 50

-------------------------------------------------------------------------------

  Mortaladd
  ~~~~~~~~~
  USAGE:  [bbs] mortaladd <TOPIC> = yes|no

  The 'mortaladd' BBS command sets whether Mortals may post new messages to a
  topic/sub-topic or not.  The default for a new topic/sub-topic is to allow
  Mortals to post new messages.

  Example:  mortaladd news = no

-------------------------------------------------------------------------------

  Owner
  ~~~~~
  USAGE:  [bbs] owner <NUMBER> = <OWNER>

  The 'owner' BBS command can be used to change the owner of a message within
  your current selected topic/sub-topic to another character, e.g:  'owner 65
  = fred bloggs' will change the owner of message number 65 to the character
  'Fred Bloggs'.

  PLEASE NOTE:  Although the owner of the message will change (So the original
                user who posted the message will not be able to modify or
                delete it), the name of the user who originally posted the
                message will remain the same.

-------------------------------------------------------------------------------

  Ownertopic
  ~~~~~~~~~~
  USAGE:  [bbs] ownertopic <TOPIC> = <OWNER>

  The 'ownertopic' BBS command can be used to change the owner of topic or
  sub-topic on the BBS to another character (Including Mortal characters),
  e.g:  'ownertopic clubs/new club = fred bloggs' will change the owner of
  the sub-topic 'New Club' in the topic 'Clubs' to the character 'Fred Bloggs'.

  One use of this command is to give a Mortal user ownership of their own
  topic or sub-topic, which they can then be responsible for maintaining.
  For example, a Mortal user may have set up a club/social group with other
  users, and wishes to have a sub-topic in the topic 'Clubs' for members to
  post messages to.

  The owner of a topic/sub-topic has the authority to append to, delete, etc.
  messages left by other users (Including users of a higher rank), even if
  they are a Mortal user.

  When giving a topic to a Mortal user, the sub-topic limit of the topic should
  be reduced (Or even zeroed.)  This can be done using the 'subtopiclimit' BBS
  command, i.e:  'subtopiclimit <TOPIC> = 0' will prevent the owner of the
  topic from creating any sub-topics within it.

-------------------------------------------------------------------------------

  Readanon (Viewanon)
  ~~~~~~~~~~~~~~~~~~~
  USAGE:  [bbs] readanon <NUMBER> = <REASON>
          [bbs] viewanon <NUMBER> = <REASON>

  The 'readanon' BBS command can be used by Apprentice Wizards/Druids and above
  to read an anonymous message posted to a topic/sub-topic, revealing the
  identity of the user who posted the message.

  The main use of this BBS command is to find the identity of a user who has
  posted offensive or abusive material to the BBS, so that appropriate action
  can be taken.

  To prevent misuse of this BBS command by administrators, a reason must be
  given, which is logged to the 'Admin' log file.

-------------------------------------------------------------------------------

  Readers
  ~~~~~~~
  USAGE:  [bbs] readers <NUMBER> [= <PAGE NO>]

  The 'readers' BBS command lists the names of users who have read the message
  <NUMBER> in your current selected topic/sub-topic, e.g:  'readers 52' will
  tell you who has read message number 52.

  Messages which have been on the BBS for over a week, or have been read by
  over 250 people are marked as being read by everyone, and no-longer have a
  readers list.

  If <PAGE NO> is specified, that page of users will be displayed (The first
  page is displayed by default), e.g:  '[bbs] readers <NUMBER> = 2' will
  display the 2nd page, '[bbs] readers <NUMBER> = 3' will display the 3rd, etc.

  PLEASE NOTE:  Only Apprentice Wizards/Druids and above can view the readers
                of a message.  The readers of a votable message can only be
                viewed by Deities and the Supreme Being (To prevent breach of
                confidentiality for voters.)

-------------------------------------------------------------------------------

  Renametopic
  ~~~~~~~~~~~
  USAGE:  [bbs] renametopic <TOPIC> = <NAME>

  The 'renametopic' BBS command can be used to rename a topic or sub-topic on
  the BBS.

  For example, the topic 'Opinions' could be renamed to 'Debates' by typing
  'renametopic opinions = Debates'.

-------------------------------------------------------------------------------

  Subtopiclimit
  ~~~~~~~~~~~~~
  USAGE:  [bbs] subtopiclimit <TOPIC> = <LIMIT>

  The 'subtopiclimit' BBS command can be used to restrict the number of
  sub-topics that can be created under a topic.  The default sub-topic limit
  is 16, however this can be decreased or increased using the 'subtopiclimit'
  BBS command.

  For example, you can increase the sub-topic limit of the topic 'Clubs' to
  20 by typing 'subtopiclimit clubs = 20', and decrease the sub-topic limit
  of the topic 'News' to 5 by typing 'subtopiclimit news = 5'.

  When giving a topic to a Mortal user, the sub-topic limit of the topic should
  be reduced (Or even zeroed.)  This can be done using the 'subtopiclimit' BBS
  command, i.e:  'subtopiclimit <TOPIC> = 0' will prevent the owner of the
  topic from creating any sub-topics within it.

-------------------------------------------------------------------------------

  Timelimit
  ~~~~~~~~~
  USAGE:  [bbs] timelimit <TOPIC> = <LIMIT>
          [bbs] timelimit <TOPIC> = off

  The 'timelimit' BBS command can be used to set a time limit (Expiry time) on
  messages within a topic/sub-topic on the BBS.

  <LIMIT> is the time limit (In days) of messages within the topic/sub-topic,
  e.g:  'timelimit general = 30' will impose a time limit of 30 days on
  messages in the topic 'General'.

  When a time limit is set, any messages which have not been read for that
  number of days or greater will be automatically deleted.  Deletion takes
  place automatically on a daily basis.

  This BBS command is most useful for topics/sub-topics which don't see too
  much activity (I.e:  Messages could remain in the topic/sub-topic for months,
  without being read by any further users.)  A time limit of a month or so (30
  days) will help ensure messages in these topics/sub-topics are deleted when
  interest in them ceases, freeing up the memory used by the messages.

  Popular topics/sub-topics don't really need a time limit, as older messages
  will be deleted as a result of cyclic deletion after sufficient new messages
  have been posted.

===============================================================================
  >>>>>                         BBS sub-topics                          <<<<<
===============================================================================

  Topics on the TCZ-based MUD's BBS may contain sub-topics.  This allows topics
  on the BBS to be organised, with topics containing related sub-topics.

  In general, all BBS commands which need to be given a <TOPIC> as one of their
  parameters can also be used to create and maintain sub-topics.  A sub-topic
  is refered to in the following format:  <TOPIC>/<SUB-TOPIC>

  For example, you could refer to the sub-topic 'General' in the topic 'News'
  using 'News/General'.

  To add a new sub-topic, you'd simply use 'addtopic <TOPIC>/<SUB-TOPIC> =
  <DESCRIPTION>', where <TOPIC> is the name of the topic to add it to,
  <SUB-TOPIC> is the name to give the sub-topic and <DESCRIPTION> is the
  short description to give the sub-topic.

  All of the settings and restrictions which can be applied to topics can also
  be applied to individual sub-topics, such as whether messages can be added,
  the access level required, etc.  In order to access a sub-topic, you must
  have access to the topic in which it's located.

  NOTE:  Sub-topics can't contain further sub-topics.

  If a topic contains sub-topics, it's usual practise to leave the topic itself
  empty (I.e:  Move any of the messages in it into its sub-topics) and prevent
  new messages being added to it, using the 'allowadd <TOPIC> = no' command.
  By doing this, users selecting the topic (Using the 'topic <TOPIC>' command)
  will be automatically presented with a list of sub-topics in the topic, to
  choose from.
  
-------------------------------------------------------------------------------

  Bug, Complain, Comment, Suggest
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  USAGE:  bug <BUG REPORT>
          comment <COMMENT>
          complain <COMPLAINT>
          suggest <SUGGESTION>

  The above commands are used to report bugs, make comments, complaints or 
  suggestions.  When used, all administrators (Apprentice Wizards/Druids and
  above) who are not set QUIET are informed, and an entry is made in the
  appropriate log file ('Bugs', 'Comments', 'Complaints' and 'Suggestions'
  log files.)

  'bug' is primarily used to report bugs in the 'hard' code (TCZ source code),
  but can also be used to report bugs in 'soft' code (Compound commands
  created and written by Builders and above) as a last resort.  With 'soft'
  code bugs, you should attempt to contact the creator of the defective
  compound command(s) so that they can resolve the problem(s) (Type 'ex
  <COMMAND NAME>' to find out who owns a particular compound command.)
  Bug reports are logged to the 'Bugs' log file.

  'comment' is used to make comments about the TCZ-based MUD, its
  administrators, builders and users (I.e:  Those who should perhaps be
  promoted in the near future), and anything else related which the
  administrators may wish to know about.  Comments are logged to the
  'Comments' log file.

  'complain' is used to make complaints of any nature, so that Admin. can
  deal with and resolve them as quickly as possible.  I.e:  If you are being
  harrassed, abused or offended by another user, please use 'complain' to 
  complain to Admin. so that they can be stopped.  Complaints are logged
  to the 'Complaints' log file.

  'suggest' is used to make a suggestion for improvement to the TCZ-based MUD
  and its database.  Such suggestions can include improvements to the TCZ-based
  MUD itself and its 'hard' code, 'soft' coded compound commands and areas on
  the TCZ-based MUD, on-line help pages and tutorials, etc.  Suggestions are
  logged to the 'Suggestions' log file.

  NOTE:  'complain' replaces the 'gripe' command, which is now obsolete.
         'gripe' is now an alias for the 'complain' command.

-------------------------------------------------------------------------------

  Chat
  ~~~~
  USAGE:  chat join <NAME>|<CHANNEL NUMBER>
          chat on|off|<CHANNEL NUMBER>
          chat subject <SUBJECT>
          chat public|private
          chat <MESSAGE>
          chat who|list
          chat kick

  'Chat' is used to join and talk over a chatting channel.

  To join a chatting channel, simply type 'chat <CHANNEL NUMBER>' or 'chat
  <NAME>' (Or type 'chat on' to join the default channel (0.))
  <CHANNEL NUMBER> can be any positive number from 0 (Default) to
  2000000000+(!), so you can easily pick your own 'personal' chatting
  channel to chat to your friends over.

  Once you've joined a channel, you can find out who else is on it by typing
  'chat who'.  If you're the first person on the channel, you become the
  'Channel Operator' and have a few extra privileges (Read on for details.)

  You can speak over the chatting channel in the normal manner (I.e:  'chat
  "<MESSAGE>', 'chat '<MESSAGE>', 'chat :<MESSAGE>', etc.)  Only users on
  the same channel as you will hear what you say.

  Typing 'chat off' makes you leave the current chatting channel you're
  joined to and switches chat off.

  If you're the 'Channel Operator', you can type 'chat private' to make your
  channel private (So no-one else can join it), and 'chat public' to make it
  public again.  If someone's being a nuisance, you can kick them off (By
  typing 'chat kick <NAME>') providing they aren't an Apprentice Wizard/Druid
  or above (Of course, Apprentice Wizards/Druids and above can kick people
  off below their level (Including the 'Channel Operator'.))

  Typing 'chat list' lists all chatting channels with 1 or more users on,
  the number of users on them, whether they're private or public, their
  subject, etc.

  If you're the 'Channel Operator', you can give your chatting channel a
  subject by typing 'chat subject <SUBJECT>', e.g:  'chat subject Building
  on TCZ-based MUDs.'  Providing your chatting channel is public, users
  will see its subject under 'Public/Private/Subject' when they type 'chat
  list'.

  'chat' can be used by ANYONE (Unlike the Apprentice Wizard/Druid and
  above 'natter' channel.)

-------------------------------------------------------------------------------

  Close
  ~~~~~
  USAGE:  close <OBJECT>

  The 'close' command closes the container, vehicle or exit <OBJECT>, so that
  you (And other characters) can no-longer access its contents, enter it (Using
  the 'enter' command) or go through it (If an exit.)

-------------------------------------------------------------------------------

  Cls (Clear)
  ~~~~~~~~~~~
  USAGE:  clear
          cls

  Clears (Blanks) your screen and re-displays the TCZ-based MUD's prompt.

-------------------------------------------------------------------------------

  Converse
  ~~~~~~~~
  USAGE:  converse

  Puts you into 'converse' mode or takes you out of it.

  Once in 'converse' mode, EVERYTHING you type will be spoken (Just as if you
  typed 'say'), even if you don't put a " or ' in front.  You can leave
  'converse' mode at any time by typing 'converse' again.  Emoting (:) and
  thinking (+) can still be done in the usual way while in 'converse' mode.

  You can execute any TCZ-based MUD command while in 'converse' mode by typing
  '.<COMMAND>', e.g:  If you wanted to tell a message to another character,
  you'd type '.tell <NAME> [=] <MESSAGE>'.

  You can still obtain help in 'converse' mode by typing 'help' as normal.

-------------------------------------------------------------------------------

  Disclaimer
  ~~~~~~~~~~
  USAGE:  disclaimer          

  Displays the TCZ-based MUD's disclaimer, which you should read thoroughly.

-------------------------------------------------------------------------------

  Drive
  ~~~~~
  USAGE:  drive <DIRECTION>

  The 'drive' command is used to drive a vehicle which can be entered (Using
  the 'enter' command), such as a car, lorry (Truck), bus, etc.

  In order to drive a vehicle, you must first be inside it (Type 'enter
  <VEHICLE>' to attempt to enter it.)  If the vehicle can't be entered,
  it must be riden, using the 'ride' command.

  Once inside the vehicle, you can look out of it (At it's current location)
  by typing 'look outside'.  You can then drive the vehicle, using 'drive
  <DIRECTION>'.  <DIRECTION> is the name of the exit to drive it through,
  the #ID number of an ABODE room or the name of a connected character, e.g:
  'drive east'.

  NOTE:  A vehicle can only be driven into locations which have their TRANSPORT
         flag set.  A vehicle can't be driven through an exit which doesn't
         have its TRANSPORT flag set.

-------------------------------------------------------------------------------

  Drop (Throw)
  ~~~~~~~~~~~~
  USAGE:  drop <OBJECT> [= <LOCATION>]

  Drops <OBJECT>, which you must be holding.

  If <LOCATION> is specified (Which may either be a room or container), the
  object will be dropped into it, otherwise the object will be dropped in
  your current location.

-------------------------------------------------------------------------------

  Edit
  ~~~~
  USAGE:  edit <OBJECT TYPE> [<FIELD>] <OBJECT NAME>
          edit [<FIELD>] <OBJECT>

  Starts the TCZ-based MUD's built in editor.

  The first form creates an object of the type <OBJECT TYPE> with the name
  <OBJECT NAME>.  If <FIELD> is specified, that field of the new object will
  be edited, otherwise it will assume you want to edit its description.

  The second form starts editing the object <OBJECT>, which must already exist.
  If <FIELD> is specified, that field of the object will be edited, otherwise
  it will assume you want to edit its description.

  The editor can be used to edit the elements of a dynamic array (Only one
  element may be edited at a time though.)  To do this, simply specify the
  name of the array along with the element number to edit in square brackets,
  e.g:  'edit myarray[2]' will start editing element 2 of the dynamic array
  'myarray'.
  
  You can use the '.element' command to start editing other elements of the
  dynamic array without leaving the editor (Works in a similar way to
  '.field'.)


  <FIELD> can be one of the following...

  Description ('desc'), failure ('fail'), success ('succ'), drop, odescription
  ('odesc'), ofailure ('ofail'), osuccess ('osucc'), odrop.

  <OBJECT TYPE> can be one of the following...

  Array, command, exit, property, room, thing, variable.


  How to use the editor...
  ~~~~~~~~~~~~~~~~~~~~~~~~
  To begin with (Providing you don't move to a different line), any text you
  type that doesn't begin with a '.' will be added to the end of the edit
  text (The text of the field you're currently editing.)

  If you move to a different line, any text you type (Which doesn't begin with
  a '.') will be inserted above the current line (Or will overwrite the
  current line if overwrite mode is on.)  '.overwrite on' turns overwrite
  mode on and '.overwrite off' turns it off.

  By default, the editor WILL NOT evaluate any {}'s, $'s or \'s, meaning you
  can edit compound commands without having to put a '\' in front of every
  '{' and '$'.  This feature makes the editor perfect for editing/creating
  compound commands without any of the confusion usually involved due to
  all those annoying \'s!

  You CAN however make the editor evaluate {}'s, $'s and \'s by typing
  '.evaluate yes' (And stop it again by typing '.evaluate no'.)

  Don't confuse '.evaluate' with '@evaluate'  -  They're two completely
  different commands. 

  The '.view' or '.display' command displays the edit text around the current
  line you're editing (Try it 'n' see)  -  The line that begins with something
  looking like '[001->' is the line you're currently editing (This is
  highlighted too if you're taking advantage of the TCZ-based MUD's ANSI
  colour support or have your terminal type set correctly.)

  '.view' can be shortened to '.v', and both '.view' and '.display' can be
  given an optional line number to display from, e.g:  '.v 1' to view the
  edit text from line 1, regardless of the line you're currently editing.


  Moving around the text...
  ~~~~~~~~~~~~~~~~~~~~~~~~~
  You can either use '.up' and '.down', or '.prev' and '.next' to move up and
  down the text by one line ('.up' and '.down' are the most easiest to use,
  as they can be shortened to '.u' and '.d'.)

  You can move up/down by more than one line by typing '.up <COUNT>' and
  '.down <COUNT>', where <COUNT> is the number of lines to move up/down by.

  '.home' and '.end' can be used to move to the beginning and end of the
  text respectively.

  '.goto', '.line' or '.position' can be used to go to any line in the edit
  text (So you can edit it.)  All of these can be shortened, e.g:  '.g', '.l'
  and '.p'  -  If you don't specify which line number to go to, the current
  line number you're editing is displayed along with details of whatever 
  you're currently editing.


  Saving or abandoning your changes...
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  If you want to abandon the changes you've made to whatever field you're
  editing, you can do this by typing '.abort = yes' or '.cancel = yes'.

  If you're happy with your changes, you can save them by typing '.exit',
  '.quit', '.save' or '.leave'.


  Editing a different field without leaving the editor...
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  You can edit a different field of the object you're currently editing by
  typing '.field <FIELD>', e.g:  '.field fail' to start editing the fail
  message of the object.

  Before editing the specified field, any changes you've made to the current
  field will be saved.


  Line ranges...
  ~~~~~~~~~~~~~~
  Any editor command that has <LINE RANGE> as one of its parameters can accept
  a range of lines (Or a single line) to operate on.

  A line range is specified as follows...
  
  3-8       ...Line range from line 3 to line 8.
  3..8      ...Same as above.
  3         ...Line 3 only (Equivalent to 3-3.)

  Instead of specifying line numbers, you can use one of the following five
  special keywords instead  -  These are...

  CURRENT   ...Current line that you're editing.
  FIRST     ...First line of edit text.
  LAST      ...Last line.
  END       ...Same as above.
  ALL       ...The whole edit text (Equivalent to FIRST-LAST.)

  NOTE:  You don't have to type them in capitals if you don't want to.


  The Editor Prompt...
  ~~~~~~~~~~~~~~~~~~~~
  When using the editor, you should get a prompt that looks something like
  this...

  [4:7]-->

  The number on the left-hand side of the ':' is the line number you're
  currently editing, and the number on the right-hand side is the total 
  number of lines in the text you're editing.  Don't worry if the number
  on the left is greater than the one on the right  -  This just means 
  you're adding to the end of the text.


  Editor commands...
  ~~~~~~~~~~~~~~~~~~
  A complete list of all editor commands is given below.  This list is also
  available on-line in the TCZ-based MUD  -  Type 'help edit commands' or
  'help editcmds' (Type '.help' instead of 'help' if you're using the editor!)


  .-========================================================================-.
  |                            Editor Commands...                            |
  |--------------------------------------------------------------------------|
  |  .up            .prev          .home          .top           .first      |
  |  .down          .next          .end           .bottom        .last       |
  |                                                                          |
  |  .display       .goto          .line          .position      .view       |
  |                                                                          |
  |  .abort         .append        .cancel        .copy          .delete     |
  |  .element       .erase         .evaluate      .execute       .exit       |
  |  .field         .help          .insert        .leave         .manual     |
  |  .move          .numbering     .overwrite     .quit          .replace    |
  |  .save          .set           .tutorial      .value                     |
  |                                                                          |
  |  .editfail      .editsucc      .permanent                                |
  `-========================================================================-'


  .up (.u), .prev
  ~~~~~~~~~~~~~~~
  USAGE:  .prev [<COUNT>]
          .up [<COUNT>]
          .- [<COUNT>]

  Moves up the edit text by one line if <COUNT> isn't specified, otherwise
  moves up by <COUNT> lines.  


  .down (.d), .next (.n)
  ~~~~~~~~~~~~~~~~~~~~~~
  USAGE:  .down [<COUNT>]
          .next [<COUNT>]
          .+ [<COUNT>]

  Moves down the edit text by one line if <COUNT> isn't specified, otherwise
  moves down by <COUNT> lines.


  .home (.h), .top (.t), .first
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  USAGE:  .first
          .home
          .top
          
  Goes to the first line in the edit text  -  Use this command if you want to
  insert lines at the beginning of the edit text.


  .end (.e), .bottom (.b)
  ~~~~~~~~~~~~~~~~~~~~~~~
  USAGE:  .bottom
          .end

  Goes to the end of the edit text (The line after the last line in the
  text)  -  Use this command if you want to add lines to the end of the
  edit text.


  .last
  ~~~~~
  USAGE:  .last

  Goes to the last line of the edit text.


  .display, .view (.v)
  ~~~~~~~~~~~~~~~~~~~~
  USAGE:  .display [<LINE RANGE>]
          .view [<LINE RANGE>]

  If no <LINE RANGE> is specified, text around the current line you're editing
  is displayed, otherwise if a single line number is given, lines from that
  line number are displayed.  If a range of lines is specified, that range of
  lines are displayed.

  Examples:  .v 3     ...views text from line 3 onwards. 
             .v 2-5   ...views lines 2 to 5.


  .goto (.g), .line (.l), .position (.p)
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  USAGE:  .position <LINE NO.>
          .goto <LINE NO.>
          .line <LINE NO.>

  Goes to the specified line in the edit text.  If <LINE NO.> isn't
  specified, the current line number you're on and details of what you're
  editing are displayed.

  Example:  .p 5     ...Goes to line 5 in the edit text.


  .abort, .cancel
  ~~~~~~~~~~~~~~~
  USAGE:  .cancel = yes
          .abort = yes

  Aborts the edit, abandoning all changes made to whatever object you're
  editing.  If you started the editor with the parameters '<OBJECT TYPE>
  [<FIELD>] <OBJECT NAME>', the new object (Which the editor created) will
  be destroyed.


  .append (.a)
  ~~~~~~~~~~~~
  USAGE:  .append [<LINE NO.> =] <TEXT>

  If <LINE NO> isn't specified, <TEXT> will be appended to the end of the
  current line you're editing, otherwise <TEXT> will be appended to line
  number <LINE NO.>

  This editor command is especially useful if your Telnet client restricts
  the amount of text you can type on a single line.


  .copy (.c)
  ~~~~~~~~~~
  USAGE:  .copy [<LINE RANGE> =] <DESTINATION>

  When overwrite mode is on, '.copy' overwrites the line <DESTINATION> with the
  range of lines <LINE RANGE>.

  When overwrite mode is off, '.copy' inserts the range of lines <LINE RANGE>
  above the line <DESTINATION>.

  If <LINE RANGE> isn't specified, the current line is assumed.

  Examples:  .c 3-5 = 10     ...copies lines 3 to 5 to line 10.
             .c 2 = 4        ...copies line 2 to line 4.


  .delete, .erase
  ~~~~~~~~~~~~~~~
  USAGE:  .delete [<LINE RANGE>]
          .erase [<LINE RANGE>]
  
  Deletes the range of lines <LINE RANGE>.

  If <LINE RANGE> isn't specified, the current line is assumed.

  Examples:  .d 2-8     ...deletes lines 2 to 8.
             .d 1       ...deletes line 1.


  .element
  ~~~~~~~~
  USAGE:  .element [<ELEMENT>]

  Without a parameter, '.element' will save all changes you've made to the
  current dynamic array element you're editing without leaving the editor.

  If <ELEMENT> is specified (Which can either be an element number, element
  index name, 'next' (Next element), 'prev' (Previous element) or one of the
  keywords 'FIRST', 'LAST' or 'END'), the changes you've made to the current
  dynamic array element will be saved, and the current element being edited
  will be changed to that specified.  This allows you to edit other elements
  of the dynamic array without leaving the editor.

  '.element' is an alias for '.field', and will function in the same way as
  '.field' if a dynamic array isn't currently being edited (This means that
  you can use '.field' to move around the elements of a dynamic array too.)

  Example:  .element 5     ...changes current element of dynamic array being
                           edited to element number 5.


  .evaluate
  ~~~~~~~~~
  USAGE:  .evaluate [yes|no]

  By default, the editor WILL NOT evaluate any {}'s, $'s or \'s, meaning you
  can edit compound commands without having to put a '\' in front of every
  '{' and '$'.  This feature makes the editor perfect for editing/creating
  compound commands without any of the confusion usually involved due to
  all those annoying \'s!

  You CAN however make the editor evaluate {}'s, $'s and \'s by typing
  '.evaluate yes', and stop it by typing '.evaluate no'.

  Typing '.evaluate' without any parameters will toggle it between 'yes' and
  'no'.  Don't confuse '.evaluate' with '@evaluate'  -  They're two completely
  different commands. 


  .execute (.x)
  ~~~~~~~~~~~~~
  USAGE:  .execute <TCZ COMMAND>

  Executes the TCZ-based MUD command <TCZ COMMAND>.  Any {}'s and \'s in the
  command will be evaluated, regardless of the current setting of '.evaluate'.

  For example, if someone paged you while you were editing something, you
  could page them back with your reply by typing '.x page <NAME> = <MESSAGE>'.


  .exit, .quit (.q), .save, .leave
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  USAGE:  .leave
          .exit
          .quit
          .save

  Saves changes to the field you're currently editing and exits the editor.


  .field (.f)
  ~~~~~~~~~~~
  USAGE:  .field [<FIELD>]

  Without a parameter, '.field' will save all changes you've made to the
  current field you're editing (E.g:  Description) without leaving the
  editor.  If <FIELD> is specified, the changes you've made to the current
  field will be saved, and the current field will be changed to that
  specified.  This allows you to move between the various fields of an object
  without leaving the editor.

  <FIELD> can be one of the following:

  description ('desc'), failure ('fail'), success ('succ'), drop, odescription
  ('odesc'), ofailure ('ofail'), osuccess ('osucc'), odrop.

  Example:  .f fail     ...changes current field to the fail message of the
                        object you're editing.


  .help, .manual
  ~~~~~~~~~~~~~~
  USAGE:  .manual [<SUBJECT>]
          .help [<SUBJECT>]

  Calls the TCZ-based MUD's On-line Help System and displays help on <SUBJECT>.
  (See the section on 'help' further on in this manual.)


  .insert (.i)
  ~~~~~~~~~~~~
  USAGE:  .insert [<LINE NO.> =] <TEXT>

  Inserts <TEXT> above the line <LINE NO.> (Regardless of whether overwrite
  mode is on or off.)

  If <LINE RANGE> isn't specified, the current line is assumed.

  Example:  .i 3 = Hello World!     ...Inserts "Hello World!" above line 3.


  .move (.m)
  ~~~~~~~~~~
  USAGE:  .move [<LINE RANGE> =] <DESTINATION>

  When overwrite mode is on, .move moves the range of lines <LINE RANGE> to
  the line <DESTINATION>, overwriting it.

  When overwrite mode is off, .move moves the range of lines <LINE RANGE>
  above the line <DESTINATION>.

  If <LINE RANGE> isn't specified, the current line is assumed.

  Examples:  .m 5-7 = 1     ...moves lines 5 to 7 to line 1.
             .m 6 = 3       ...moves line 6 to line 3.


  .numbering
  ~~~~~~~~~~
  USAGE:  .numbering [on|off]

  Turns line numbering on (If 'on' is specified), or off (If 'off' is
  specified), or toggles them on and off if no parameter is given.

  When line numbering is on, the number of each line will be displayed when
  using the '.view' editor command to display the text you're editing, e.g:

  [001]  This is the first line.
  [002-> Editing this line.

  When line numbers are off, the number of each line will not be displayed.
  Instead, the beginning of each line is marked with a '~' symbol, and the
  line you're currently editing is marked with a '>' symbol, e.g:

  ~This is the first line.
  >Editing this line.

  Example:  .numbering off     ...turns line numbering off.


  .overwrite (.o)
  ~~~~~~~~~~~~~~~
  USAGE:  .overwrite [on|off]

  Turns overwrite mode on (If 'on' is specified), or off (If 'off' is
  specified), or toggles it on and off if no parameter is given.

  When in overwrite mode, any text you type will overwrite the current
  line you're on (Unless you're at the end of text, in which case it will
  be added to the end of the text) instead of being inserted above it.

  Overwrite mode also affects the .move and .copy commands, making them
  overwrite the destination line instead of inserting above it.

  Overwrite mode is off by default.

  Example:  .o on     ...turns overwrite mode on.


  .replace (.r)
  ~~~~~~~~~~~~~
  USAGE:  .replace [<LINERANGE>=] "<SEARCHSTR>" "<REPLACESTR>" [[+]<OCCURENCE>]

  '.replace' replaces the specified <OCCURENCE> of <SEARCHSTR> (Within the
  given <LINERANGE>) with <REPLACESTR>.

  If <LINERANGE> isn't specified, the current line is assumed.

  For <OCCURENCE>, an occurence number can be given (I.e:  '2' for the second
  occurence, '3' for the third, etc.), or one of the keywords 'FIRST', 'LAST'
  or 'ALL' (Replace ALL occurences within given <LINERANGE>.)  If <OCCURENCE>
  is prefixed with a '+', the given <OCCURENCE> will be replaced on EVERY line
  in the <LINERANGE>.

  If <OCCURENCE> is omitted, the first occurence of <SEARCHSTR> will be
  assumed.

  Using '.replace' saves you from having to type an entire line out all over
  again if you make a mistake, e.g:

  [005->  This line has a mitsake in it!

  ...To correct the above line, you can just simply type...

  .r "mitsake" "mistake" 1

  ...No line range needs to be specified, because the mistake is in the
  current line you're editing  -  If in the above example, you were currently
  editing line 6, and suddenly noticed the obvious mistake, you could fix it
  by typing...

  .r 5 = "mitsake" "mistake" 1


  .set (.s)
  ~~~~~~~~~
  USAGE:  .set [<LINE NO.> =] <TEXT>

  If <LINE NO.> isn't specified, the current line you're editing will be
  set to <TEXT>, otherwise the line number <LINE NO.> will be set to <TEXT>.

  The main use of this command (Along with .insert) is to allow you to
  insert lines in your edit text which begin with a '.' (Trying to do this
  in the normal way would fail, because the TCZ-based MUD would assume that
  you are trying to execute an editor command.)


  .tutorial
  ~~~~~~~~~
  USAGE:  .tutorial [<SUBJECT>]

  Calls the TCZ-based MUD's On-line Tutorial System and displays the tutorial
  on <SUBJECT> (If available.)

  (See the section on 'tutorial' further on in this manual.)


  .value
  ~~~~~~
  USAGE:  .value [<LINE NO.> =] <TCZ COMMAND>

  Executes the TCZ-based MUD command <TCZ COMMAND> and substitutes its return
  value on the current line you're editing (Or if <LINE NO.> is specified, the
  return value is substituted on that line.)  If overwrite mode is on, the
  current line (Or <LINE NO.>) is overwritten with the return value,
  otherwise, the return value is inserted above the current line (Or
  <LINE NO.>)

  Any {}'s, $'s and \'s in the command will be evaluated, regardless of the
  current setting of '.evaluate'.

  For example, you can substitute your description by typing
  '.val {@?desc me}'.


  .editfail
  ~~~~~~~~~
  USAGE:  .editfail <COMMAND>

  '.editfail' sets an optional compound command which will be executed when
  you leave the editor and ABANDON your changes (Typing '.abort = yes' or
  '.cancel = yes' will do this.)


  Example:
  ~~~~~~~~
  .editfail abandoncmd     (The compound command 'abandoncmd' will be ran when
                           you exit the editor and ABANDON your changes.)


  .editsucc
  ~~~~~~~~~
  USAGE:  .editsucc <COMMAND>

  '.editsucc' sets an optional compound command which will be executed when
  you leave the editor and SAVE your changes (Typing '.exit', '.save' or
 '.leave' will do this.)


  Example:
  ~~~~~~~~
  .editsucc savecmd     (The compound command 'savecmd' will be ran when you
                        exit the editor and SAVE your changes.)


  .permanent
  ~~~~~~~~~~
  USAGE:  .permanent

  '.permanent' makes the settings of '.editsucc' and '.editfail' permanent
  for the rest of the current editing session.

  It also prevents the use of the '.field' and '.element' editor commands,
  preventing the user from changing the field/element currently being edited
  (Although they can still use these editor commands to save the changes made
  to the field of the object currently being edited.)

  Useful if you want to prevent users from changing the settings of '.editsucc'
  and '.editfail', or changing the field/element currently being edited when
  you involke the editor from within a compound command.

-------------------------------------------------------------------------------

  Emaillist (Email)
  ~~~~~~~~~~~~~~~~~
  USAGE:  emaillist [<PAGE NO>] [<NAME>|<FLAGS>] [= public|private|<NUMBER>]
          email [<PAGE NO>] [<NAME>|<FLAGS>] [= public|private|<NUMBER>]

  The 'emaillist' command (Which can only be used by Apprentice Wizards/Druids
  and above) displays a list of connected characters and their private E-mail
  addresses (If set.)

  By default, the private (2nd) E-mail address of each connected character is
  listed.  By specifying 'public' for the second parameter (I.e:  'emaillist
  = public'), you can list all connected characters, along with their 1st
  public E-mail address (If set.)  Likewise, specifying a number between 3
  and 5 will list all connected characters with their appropriate public
  E-mail address.

  If <PAGE NO> is specified, the list of users will be split up into pages and
  the page number specified will be displayed, e.g:  'emaillist 1',
  'emaillist 2', etc.

  If <NAME> is specified, just that one character is listed.  If one or more
  flags (Separated by spaces) are specified instead of <NAME>, only characters
  with those flags are listed, e.g:  'emaillist admin', 'emaillist mortals', 
  'emaillist haven quiet', etc.

-------------------------------------------------------------------------------

  Emergency
  ~~~~~~~~~
  USAGE:  emergency <NAME> = <REASON>

  Sooner or later, you'll probably come across a really annoying character, 
  who spends their time doing nothing else other than abusing or harassing
  you and other characters.

  If you come across a character like this, you can use the 'emergency'
  command to get something done about it...

  Type 'emergency' followed by the name of the character and your reason, e.g:
  'emergency fred = He is using really offensive language' (PLEASE NOTE:  The
  word 'emergency' must be typed in FULL.)

  All commands typed by the user will be logged to the 'Emergency' log file
  for the next 5 minutes, and details of the character and your reason for
  using 'emergency' will be sent to all connected administrators, so that
  they can take appropriate action to sort the problem out.

-------------------------------------------------------------------------------

  Emote
  ~~~~~
  USAGE:  emote <ACTION>
          :<ACTION>
          ;<ACTION>

  Makes you do the action <ACTION>.  This is displayed to you and everyone
  else in the same room as you, with your name in front of <ACTION>, e.g:
  'emote waves' gives 'Fred Bloggs waves.' (If your name is 'Fred Bloggs'.)

  The second and third forms (A ':' or ';' followed by your action) are easier
  to type, e.g:  ':smiles' gives 'Fred Bloggs smiles.'

-------------------------------------------------------------------------------

  Enter
  ~~~~~
  USAGE:  enter <CONTAINER>
          enter <VEHICLE>

  Allows you to climb into the container <CONTAINER> or enter the vehicle
  <VEHICLE> (Providing it's large enough to hold you.)

  Once inside, you can look out of it (Without leaving it), by typing 'look
  outside' (Providing it's currently open.)

  If it's a vehicle, you can drive it using the 'drive' command.

-------------------------------------------------------------------------------

  Escape
  ~~~~~~
  USAGE:  escape

  This command can only be used by Apprentice Wizards/Druids and above.

  'escape' teleports you back to your home room WITHOUT executing fuses in the
  room/container you're currently in (Allowing you to escape from user created
  'jails' without having to disable the fuse(s).)

  PLEASE NOTE:  If you discover a user created jail, the fuse(s) should be
                destroyed as soon as possible, and the user should be warned
                and told to destroy the jail, with the threat of losing their
                Builder flag if they recreate the jail or fuses of a similar
                nature in the future.

-------------------------------------------------------------------------------

  Events
  ~~~~~~
  USAGE:  events [<PAGE NO>|<NAME>]

  Lists or displays information about yearly events, e.g:  Christmas,  New
  Year, the TCZ source code's birthday, etc.

  With no parameters, 'events' will list the first page of yearly events, in
  date order.  You can list further pages of yearly events by giving a
  page number (<PAGE NO>), e.g:  'events 2' lists the 2nd page of events,
  'events 3' lists the 3rd, etc.

  You can display further information about a particular yearly event by
  typing 'events' followed by the name (Or part of the name) of the event,
  e.g:  'events christmas'.

  On the date (And time, if the event occurs at a particular time of the day)
  of a yearly event, an appropriate message will be sent to all connected
  users who do not have their QUIET flag set.  For the remainder of the day
  of the event, users connecting will also see the event when they connect
  to the TCZ-based MUD.

-------------------------------------------------------------------------------

  Examine
  ~~~~~~~
  USAGE:  examine <OBJECT>
          ex <OBJECT>

  Displays all available information about <OBJECT>, providing that you own it
  or have read permission to it.  If you do not have permission, the object
  will be looked at instead ('look'.)

  <OBJECT> can be specified as <NAME> or #<ID>, or as 'me' or 'here'.  
  You can examine objects in other rooms by refering to them using
  their #<ID>.

  You can examine any object which has its VISIBLE flag set (You can reference
  VISIBLE objects by #ID too.)

  Experienced Builders and Apprentice Wizards/Druids and above may examine
  any object which is not set PRIVATE.

-------------------------------------------------------------------------------

  Friends lists (And related commands)...
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  USAGE:  fothers [<PAGE NO>] [<NAME>] [= <FLAG SPEC>]
          fset <NAME> [=] [!]<FLAG> [[!]<FLAG>] [...]
          flist [<PAGE NO>] [<NAME>] [= <FLAG SPEC>]
          friends|fwho [<PAGE NO>] [<NAME>|<FLAGS>]
          fwhere [<PAGE NO>] [<NAME>|<FLAGS>]
          fchat on|off|<MESSAGE>
          fremove <NAME>
          fadd <NAME>

  Every user on a TCZ-based MUD has their own personal friends list.  You can
  add the names of all your friends and any new friends you make by using the
  'fadd' command.  If you fall out with one of your friends, you can either
  remove them using the 'fremove' command or make them one of your enemies
  using 'fset <NAME> = enemy'.

  You can list all of your friends who are currently connected by typing
  'fwho' and see where they currently are by typing 'fwhere'.  

  There's even a special friends chatting channel ('fchat') over which you can
  talk to all your friends (Providing they're connected of course) at once
  (Including those who aren't on your friends list, but you're on theirs.)

  If you're set LISTEN ('@set me = listen'), any friends/enemies who connect
  will have '(Friend)'/'(Enemy)' after their name on their connect message
  (E.g:  '[Fred Bloggs (Friend) has connected.]'.)  If you give a friend
  the INFORM friend flag, you'll get their connect message regardless of
  whether you're set LISTEN or not.  Also, people who are your friends/enemies
  appear in the 'Contents:' list of the room they're in with
  '(Friend)'/'(Enemy)' after their name.

  'fset' is used to set/reset friend flags on your friends.

  'flist' and 'fothers' are used to list people on your friends list and
  people who have you on their friends list respectively.

  Read on for more detailed explanations of the various friends list
  commands...

-------------------------------------------------------------------------------

  Fadd
  ~~~~
  USAGE:  friend <NAME> [= [!]<FLAG> [[!]<FLAG>] [...]]
          fadd <NAME> [= [!]<FLAG> [[!]<FLAG>] [...]]

  The 'fadd' (Or 'friend' if you prefer  -  The choice is yours) command is
  used to add a friend to your friends list, e.g:  'fadd fred bloggs' will
  add the user 'Fred Bloggs' to your friends list.

  Optionally, friend flags to set/reset on the new friend can also be
  specified, i.e:  'fadd fred bloggs = !pagetellfriends' will make the user
  'Fred Bloggs' your friend and also reset their PAGETELLFRIENDS friend flag,
  so that you will not receive pages/tells from them which they send to their
  friends.  For full details of the flags you can set/reset, please see the
  section on 'fset'.

  NOTE:  The friend you'd like to add doesn't have to be connected.

         Typing 'friends' without any parameters will display the
         friends user list ('fwho'.)

-------------------------------------------------------------------------------

  Fchat
  ~~~~~
  USAGE:  fchat <MESSAGE>
          fchat on|off

  The 'fchat' command is used to speak over the friends chatting channel or
  turn it on/off.

  You can use the friends chatting channel to speak to all your friends at
  once (Including those not on your friends list, but you're on theirs (Listed
  in 'fwho' with their name in square brackets ('[]'))  -  However, your
  message wont go to friends who aren't connected or have turned the friends
  chatting channel off by typing 'fchat off' (These people are listed in
  'fwho' with their name in '<>'s.)

  You can stop receiving messages from particular friends over the friends
  chatting channel by removing their FCHAT friend flag  -  See section on
  'fset' for details on how to do this.

  Typing 'fchat off' turns the friends chatting channel facility off (So you
  no-longer get disturbed by messages being sent over it by friends, e.g:
  When you want to do some building.)  Typing 'fchat on' will turn it back
  on again.

-------------------------------------------------------------------------------

  Flist and Fothers
  ~~~~~~~~~~~~~~~~~
  USAGE:  fothers [<PAGE NO>] [<NAME>] [= <FLAG SPEC>]
          flist [<PAGE NO>] [<NAME>] [= <FLAG SPEC>]
  
  The 'flist' command is used to list everyone on your friends list, and the
  'fothers' command is used to list everyone who has you on their friends list.

  If <NAME> is specified, only users with names matching or containing the text
  <NAME> will be listed (I.e:  'flist fred' will list friends who are on your
  friends list and have the text 'fred' in their name (E.g:  'Fred', 'Fred
  Bloggs', 'Freda', 'Frederick', 'Wilfred', etc.))

  Admin can list the friends of other characters by specifying the user's full
  name, prefixed with '*', e.g:  'flist *fred bloggs' to display the user Fred
  Blogg's friends list.  Alternatively, the #ID number of the user can be used.

  If <PAGE NO> is specified, that page of users will be displayed, e.g:
  'flist 1', 'flist 2', 'fothers 1', 'fothers 2', etc.

  If <FLAG SPEC> is specified, only characters with the given flags will be
  listed  -  These can either be friend flags (E.g:  'flist = inform',
  'flist = !pagetell', 'flist = enemy !pagetell !link', etc.), standard
  TCZ-based MUD flags (See '@set', e.g:  'flist = haven', 'flist = male',
  etc.), 'admin' (Apprentice Wizard/Druid or above), 'mortals' or 'all'.

-------------------------------------------------------------------------------

  Fremove
  ~~~~~~~
  USAGE:  fremove <NAME>
 
  The 'fremove' command is used to either remove a friend from your friends
  list, or forcibly remove yourself from another character's friends list
  (Providing they haven't set/reset additional friend flags on you), e.g:
  'fremove fred bloggs' will remove the user 'Fred Bloggs' from your friends
  list, AND/OR remove you from their friends list (If you're on it.)

  NOTE:  The character you'd like to remove doesn't have to be connected.

-------------------------------------------------------------------------------

  Fset
  ~~~~
  USAGE:  fset <NAME> [=] [!]<FLAG> [[!]<FLAG>] [...]

  Allows you to set/reset friend flags on your friends in your friends list.

  To set a friend flag on one of your friends, simply type 'fset <NAME> =
  <FLAG>', e.g:  'fset fred = inform'.  To reset a friend flag, simply type
  'fset <NAME> = !<FLAG>', e.g:  'fset fred = !pagetell'.

  You can test whether you have set/reset particular friend flags on a user, or
  whether they have set/reset them on you, using the '{@?set}' query command
  (See section on '{@?set}' further on in this manual.)

  PLEASE NOTE:  For security, efficiency and integrity, READ, WRITE, CREATE and
                DESTROY privileges gained via friend flags do not apply within
                compound commands.  They are only effective when used on the
                command-line (Outside of a compound command.)


  The following friend flags may be set/reset on your friends...
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  Beep, Combat, Commands, Create, Destroy, Enemy, Exclude, Fchat, Inform,
  Link, Mail, PageTell, PageTellFriends, Read, Sharable, Visit and Write.


  The BEEP friend flag...
  ~~~~~~~~~~~~~~~~~~~~~~~
  USAGE:  fset <NAME> [=] BEEP
          fset <NAME> [=] !BEEP
  
  When this friend flag is set on one of your friends, your computer/terminal
  will beep whenever they connect (Providing you're set LISTEN or you've set
  their INFORM friend flag.)

  If you set your QUIET flag, this will usually override the effects of the
  LISTEN flag and/or INFORM friend flag.  You can make it so that you are
  always informed when a particular user connects (Regardless of QUIET flag)
  by setting both their INFORM and BEEP friend flags.


  The COMBAT friend flag...
  ~~~~~~~~~~~~~~~~~~~~~~~~~
  USAGE:  fset <NAME> [=] COMBAT
          fset <NAME> [=] !COMBAT

  When this friend flag is set on one of your friends, their COMBAT compound
  commands will be usable in your COMBAT areas.  This is ideal if you wish
  to allow weapons and combat commands built by another user to be used in
  your own combat areas.

  NOTE:  By setting this friend flag on a user, you open up the potential
         for cheating and unsuitable combat commands over which you have
         little control (With the exception of resetting the COMBAT friend
         flag of course.)


  The COMMANDS friend flag...
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  USAGE:  fset <NAME> [=] COMMANDS
          fset <NAME> [=] !COMMANDS

  When this friend flag is set on one of your friends, they will be granted
  'write' permission to your compound commands (Providing the appropriate
  other friend flags are set, such as WRITE, CREATE, DESTROY, etc.

  Without this friend flag, they will not be able to create, destroy or
  modify your compound commands, regardless of permissions given to them
  via friend flags.

  Giving permission to users to create or modify your compound commands is
  EXTREMELY DANGEROUS, because this will allow them to modify your compound
  commands at will to give them full 'read' and 'write' privileges to your
  objects AND your character.

  PLEASE NOTE:  For security, efficiency and integrity, READ, WRITE, CREATE and
                DESTROY privileges gained via friend flags do not apply within
                compound commands.  They are only effective when used on the
                command-line (Outside of a compound command.)

  WARNING:  This friend flag should be set with *EXTREME CAUTION*.


  The CREATE friend flag...
  ~~~~~~~~~~~~~~~~~~~~~~~~~
  USAGE:  fset <NAME> [=] CREATE
          fset <NAME> [=] !CREATE

  When this friend flag is set on one of your friends (In conjunction with the
  WRITE friend flag), they will be able to create objects under your ownership
  (Via the '@chuid' command.)  It also allows them to change the ownership of
  any object to you that they have 'write' permission to (I.e:  Objects they
  own.)

  PLEASE NOTE:  Privileges gained via the CREATE friend flag will EXCLUDE
                compound commands, unless the COMMANDS friend flag is also
                set on the user.

                For security, efficiency and integrity, READ, WRITE, CREATE and
                DESTROY privileges gained via friend flags do not apply within
                compound commands.  They are only effective when used on the
                command-line (Outside of a compound command.)

  WARNING:  This friend flag should be set with *EXTREME CAUTION*.


  The DESTROY friend flag...
  ~~~~~~~~~~~~~~~~~~~~~~~~~~
  USAGE:  fset <NAME> [=] DESTROY
          fset <NAME> [=] !DESTROY

  When this friend flag is set on one of your friends (In conjunction with the
  WRITE friend flag), they will be able to destroy any object they have 'write'
  permission to.  It also allows them to change the ownership of these objects
  to themselves or another character.

  PLEASE NOTE:  Privileges gained via the DESTROY friend flag will EXCLUDE
                compound commands, unless the COMMANDS friend flag is also
                set on the user.

                For security, efficiency and integrity, READ, WRITE, CREATE and
                DESTROY privileges gained via friend flags do not apply within
                compound commands.  They are only effective when used on the
                command-line (Outside of a compound command.)

  WARNING:  This friend flag should be set with *EXTREME CAUTION*.


  The ENEMY friend flag...
  ~~~~~~~~~~~~~~~~~~~~~~~~
  USAGE:  fset <NAME> [=] ENEMY
          fset <NAME> [=] !ENEMY

  When this friend flag is set on one of your friends, it makes them an enemy
  of yours.  On its own, this friend flag has very little effect, apart from
  changing '(Friend)' to '(Enemy)', etc.

  If you ever get abused or harassed by another user, and there's no Admin
  around at the time to sort the problem out, you can use friend flags to your
  advantage, e.g:  Simply add them to your friends list ('fadd <NAME>') and
  then type 'fset <NAME> = enemy !fchat !link !mail !pagetell'.  This will
  make it very difficult for this user to continue abusing/harassing you
  (Unless you stay in the same room as them.)


  The EXCLUDE friend flag...
  ~~~~~~~~~~~~~~~~~~~~~~~~~~
  USAGE:  fset <NAME> [=] EXCLUDE
          fset <NAME> [=] !EXCLUDE
  
  The main purpose of this friend flag is to enable you to add users to your
  friends list for setting various friend flags on them (Such as the building
  READ, SHARABLE, WRITE, etc. friend flags), without actually making them a
  friend (Or enemy) of yours.

  Simply set this friend flag ('fset <NAME> = exclude') and they will
  no-longer appear as a friend in your friends list (NOTE:  The effects
  and meaning of setting this friend flag are completely different to
  those of the ENEMY friend flag, which indicates that the user is an
  enemy of yours.)

  Although the user will still appear on your friends list, they will not
  show up as a friend (Or enemy) of yours, and you will not receive
  'page's/'tell's they send to their friends (They will also not receive
  yours), regardless of the setting of the PAGETELLFRIENDS friend flag.

  If you have set your FRIENDS-INFORM flag, so that you are informed when users
  add/remove you from their list, or set/reset friend flags on you, you will
  not be informed if you have set the EXCLUDE friend flag on them in your
  friends list.

  In addition to the above, if another user makes you a friend (Or enemy) of
  theirs against your wishes (I.e:  You are not their friend, or their enemy),
  and have set/reset friend flags on you so that you can't forcefully remove
  yourself from their list (Or they keep adding you again when you do so),
  you can add them to your list ('fadd <NAME>') and then set the EXCLUDE friend
  flag on them to make them no-longer appear as a friend (Or enemy) to you.
  However, you will still appear as a friend (Or enemy) to them.


  The FCHAT friend flag...
  ~~~~~~~~~~~~~~~~~~~~~~~~
  USAGE:  fset <NAME> [=] FCHAT
          fset <NAME> [=] !FCHAT
  
  (By default, every new friend you add has this flag)  When this friend flag
  is set on one of your friends, you'll receive messages sent by them over
  the friends chatting channel (Providing you have the friends chatting
  channel facility turned on ('fchat on'.)  They'll also receive messages
  sent by you (Unless they have reset your FCHAT friend flag on their
  friends list.)


  The INFORM friend flag...
  ~~~~~~~~~~~~~~~~~~~~~~~~~
  USAGE:  fset <NAME> [=] INFORM
          fset <NAME> [=] !INFORM

  When this friend flag is set on one of your friends, you'll be informed when
  they connect and disconnect.  This flag is ideal when you've removed your
  LISTEN flag, but still want to know when particular people connect.  If
  you're set LISTEN, this friend flag has very little effect, except it
  changes the colour of connect/disconnect messages of friends with the
  INFORM friend flag.

  If you set your QUIET flag, this will usually override the effects of the
  LISTEN flag and/or INFORM friend flag.  You can make it so that you are
  always informed when a particular user connects (Regardless of QUIET flag)
  by setting both their INFORM and BEEP friend flags.


  The LINK friend flag...
  ~~~~~~~~~~~~~~~~~~~~~~~
  USAGE:  fset <NAME> [=] LINK
          fset <NAME> [=] !LINK

  (By default, every new friend you add has this flag)  When this friend flag
  is set on one of your friends, they'll be able to '@link' and '@tel'
  themselves to your ABODE rooms/containers and go through exits which lead
  to your rooms/containers.  Without this friend flag, they will not be able
  to get to your rooms/containers, unless they're already in one before you
  reset their LINK friend flag, or they're an Apprentice Wizard/Druid or above.

  If you have a '.message' variable on you, the message stored in the
  description of it will be displayed to any user who tries to '@link'
  or '@tel' themselves to your ABODE rooms/containers or go through
  exits which lead to your rooms/containers, if you have reset their
  LINK friend flag.


  The MAIL friend flag...
  ~~~~~~~~~~~~~~~~~~~~~~~
  USAGE:  fset <NAME> [=] MAIL
          fset <NAME> [=] !MAIL

  (By default, every new friend you add has this flag)  When this friend flag
  is set on one of your friends, they'll be able to send mail to you.  Without
  it, they will not be able to do so.

  If you have a '.message' variable on you, the message stored in the others
  drop message of it will be displayed to any user who tries to 'mail' a
  message to you, if you have reset their MAIL friend flag.


  The PAGETELL friend flag...
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  USAGE:  fset <NAME> [=] PAGETELL
          fset <NAME> [=] !PAGETELL

  (By default, every new friend you add has this flag)  When this friend flag
  is set on one of your friends, they'll be able to 'page' and 'tell' (Long
  distance) messages to you.  Without it, they will not be able to do so.

  If you have a '.message' variable on you, the message stored in the drop
  message of it will be displayed to any user who tries to 'page' or 'tell'
  a message to you, if you have reset their PAGETELL friend flag.

  NOTE:  If you reset this friend flag on a friend, you don't need to reset
         their PAGETELLFRIENDS friend flag as well.


  The PAGETELLFRIENDS friend flag...
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  USAGE:  fset <NAME> [=] PAGETELLFRIENDS
          fset <NAME> [=] !PAGETELLFRIENDS

  (By default, every new friend you add has this flag)  When this friend flag
  is set on one of your friends, you will receive group 'page's/'tell's which
  they send to their friends.  Without it, you will not receive them.  They
  also will not receive group 'page's/'tell's you send to your friends.

  NOTE:  If someone has you on their friends list (But you don't have them on
         yours), you'll receive group 'page's/'tell's they send to their
         friends.

         If you reset this friend flag on a friend, they'll still be able to
         page/tell messages to you (Unless you also reset their PAGETELL
         friend flag.)


  The READ friend flag...
  ~~~~~~~~~~~~~~~~~~~~~~~
  USAGE:  fset <NAME> [=] READ
          fset <NAME> [=] !READ

  When this friend flag is set on one of your friends, they will be granted
  'read' permission to all of your objects (With the exception of your
  character.)  If you also set their SHARABLE friend flag, they will only
  be granted 'read' permission to objects of yours which have their SHARABLE
  flag set (An ideal way of restricting 'read'/'write' permissions you give
  out to users via the READ/WRITE friend flags.)

  Friends who have been granted 'read' permission will be able to 'examine',
  list and perform query commands on your objects.


  The SHARABLE friend flag...
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  USAGE:  fset <NAME> [=] SHARABLE
          fset <NAME> [=] !SHARABLE

  When this friend flag is set on one of your friends (In conjunction with the
  READ and/or WRITE friend flags), they will only be granted 'read'/'write'
  access (Appropriately) to objects of yours which have their SHARABLE flag
  set (An ideal way of restricting 'read'/'write' permissions you give out
  to users via the READ/WRITE friend flags.)

  WARNING:  This friend flag should be reset with *EXTREME CAUTION*.


  The VISIT friend flag...
  ~~~~~~~~~~~~~~~~~~~~~~~~
  USAGE:  fset <NAME> [=] VISIT
          fset <NAME> [=] !VISIT

  When this friend flag is set on one of your friends, they'll be able to
  visit you whenever they like (Using the 'visit' command), regardless of
  your present location.  You can temporarily disable the effects of the VISIT
  friend flag by setting your PRIVATE flag ('@set me = private')  -  Ideal if
  you are holding a private conversation or simply don't want to be disturbed.


  The WRITE friend flag...
  ~~~~~~~~~~~~~~~~~~~~~~~~
  USAGE:  fset <NAME> [=] WRITE
          fset <NAME> [=] !WRITE

  When this friend flag is set on one of your friends, they will be granted
  'write' permission to all of your objects (With the exception of your
  character), providing they are a BUILDER or above.

  Due to the dangers of giving 'write' permission to other users, the SHARABLE
  friend flag is also set automatically and the COMMANDS friend flag is reset
  automatically (This restricts their 'write' permission to objects of yours
  (Excluding compound commands) which have their SHARABLE flag set only.)

  If you want to give full 'write' permission to a user (Which is *EXTREMELY
  DANGEROUS*), simply reset their SHARABLE friend flag ('fset <NAME> =
  !sharable') and set their COMMANDS friend flag ('fset <NAME> = commands'.)

  Friend who have been granted 'write' permission will be able to modify, move,
  'examine', list and perform query commands on your objects.  However, they
  will not be able to destroy objects or create new ones (Unless you set their
  DESTROY and/or CREATE friend flags respectively.)

  The 'write' permission will not apply to compound commands, unless the
  COMMANDS friend flag is also set.

  Giving out 'write' permission to your objects is inheritantly dangerous,
  however their are some sensible precautions you can take:

  *  Ensure each user with 'write' permission also has their SHARABLE friend
     flag set (This will only allow objects of yours with the SHARABLE flag
     set to be modified.)

  *  Ensure that their COMMANDS friend flag is not set, and that they do not
     have access to any of your compound commands, otherwise they will be able
     to modify your compound commands.  This will allow them to modify a
     compound command of yours to give them full 'read' and 'write' privileges
     to your objects AND your character.

     NOTE:  The CREATE friend flag will allow them to create a compound command
            under your ownership, if their COMMANDS friend flag is set.

  PLEASE NOTE:  For security, efficiency and integrity, READ, WRITE, CREATE and
                DESTROY privileges gained via friend flags do not apply within
                compound commands.  They are only effective when used on the
                command-line (Outside of a compound command.)

  WARNING:  This friend flag should be set with *EXTREME CAUTION*.

-------------------------------------------------------------------------------

  Fwhere
  ~~~~~~
  USAGE:  fwhere [<PAGE NO>] [<NAME>|<FLAGS>]

  Displays a list of all your friends who are currently connected and where
  they currently are (Similar to the 'where' command.)

  Any names displayed in square brackets ('[]') are people who have you in
  their friends list, but you don't have them in yours.  Any name displayed
  in '<>'s is a friend (Either in your friends list or you're in theirs) who
  has turned off the friends chatting channel (See 'fchat'), have removed your
  FCHAT friend flag in their friends list, or you've removed theirs (These
  characters wont receive messages sent by you over 'fchat', and you wont
  receive messages from them.)  Any names displayed in '{}'s are people who
  are your enemies.

  If <PAGE NO> is specified, the list of users will be split up into pages and
  the page number specified will be displayed, e.g:  'fwhere 1', 'fwhere 2',
  etc.

  If <NAME> is specified, just that one character is listed.  If one or more
  flags (Separated by spaces) are specified instead of <NAME>, only characters
  with those flags are listed, e.g:  'fwhere admin', 'fwhere mortals',
  'fwhere haven quiet', etc.

  In addition to 'fwho' and 'fwhere', you can also type 'who friends' to list
  your connected friends in the format given by the 'who' command (Single
  column with titles, etc.)

-------------------------------------------------------------------------------

  Fwho (Or Friends)
  ~~~~~~~~~~~~~~~~~
  USAGE:  friends [<PAGE NO>] [<NAME>|<FLAGS>]
          fwho [<PAGE NO>] [<NAME>|<FLAGS>]
          friends

  Displays a list of all your friends who are currently connected in columns
  (Similar to the 'swho' command.)

  Any names displayed in square brackets ('[]') are people who have you in
  their friends list, but you don't have them in yours.  Any name displayed
  in '<>'s is a friend (Either in your friends list or you're in theirs) who
  has turned off the friends chatting channel (See 'fchat'), have removed your
  FCHAT friend flag in their friends list, or you've removed theirs (These
  characters wont receive messages sent by you over 'fchat', and you wont
  receive messages from them.)  Any names displayed in '{}'s are people who
  are your enemies.

  If <PAGE NO> is specified, the list of users will be split up into pages and
  the page number specified will be displayed, e.g:  'fwho 1', 'fwho 2', etc.

  If <NAME> is specified, just that one character is listed.  If one or more
  flags (Separated by spaces) are specified instead of <NAME>, only characters
  with those flags are listed, e.g:  'fwho admin', 'fwho mortals',
  'fwho haven quiet', etc.

  Some characters in the list may have a symbol to the left of their name  -
  See the section on 'swho' for details of their meaning.

  In addition to 'fwho' and 'fwhere', you can also type 'who friends' to list
  your connected friends in the format given by the 'who' command (Single
  column with titles, etc.)

-------------------------------------------------------------------------------

  Give
  ~~~~
  USAGE:  give <OBJECT> to <NAME>
          give <NAME> = <OBJECT>

  Gives <OBJECT> (Which must be a thing) to the character <NAME> without you
  having to drop it and then ask them to pick it up.  Dead useful in a room
  that has a dropto set.

-------------------------------------------------------------------------------

  Goto (Move)
  ~~~~~~~~~~~
  USAGE:  goto <EXIT>
          move <EXIT>

  Makes you go through the exit <EXIT>.  'Move' is an alias for 'goto'.

  PLEASE NOTE:  You DO NOT have to type 'goto' or 'move' to go through an exit
                in TCZ-based MUD's  -  Simply type the short name displayed
                in brackets after the name of the exit, e.g:  To go through
                the exit 'A large oak door (Oak)', simply type 'oak'.

-------------------------------------------------------------------------------

  Help
  ~~~~
  USAGE:  help [<SUBJECT>]
          help [<COMMAND>]

  Displays detailed help on the subject <SUBJECT> or the command <COMMAND>.

  The entire contents of this manual are available on-line on the TCZ-based MUD
  itself though its built-in On-Line Help System for quick and easy reference,
  along with examples and references to other related help screens.

  For example, if you weren't too sure on how to use the 'page' command, you
  could simply type 'help page', which will explain how in full detail.

  Some help screens consist of more than one page (In this case, you will see
  '(Page n of n)' at the top of the help screen, and a message explaining how
  to read the next page at the bottom.)  To read the next page of a help
  screen that has more than one page of help, simply type 'help next'.
  You can also re-read a previous page by typing 'help prev'.

  On some help screens, you may see '[TUTORIAL AVAILABLE]' at the top of the
  screen.  This means that there is also an in-depth tutorial available on
  the same subject/command.  To read the tutorial, simply type 'tutorial
  <SUBJECT>' or 'tutorial <COMMAND>' (I.e:  If 'help @command' has a tutorial
  available, you can read it by typing 'tutorial @command'.)

  The tutorials are designed for complete beginners on the various subjects
  they cover.  These tutorials do not use technical jargon, making them an
  ideal way to increase your knowledge of the TCZ-based MUD and get
  considerably more enjoyment out of it. 

  Typing 'help' without any parameters will display the main index of help
  topics.


  Help screens for newcomers...
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  help
  help tutorial
  help chatting
  help feelings
  help abbreviations
  help ansi colour
  help places

-------------------------------------------------------------------------------

  Home
  ~~~~
  USAGE:  home homeroom
          home <#ID>
          home here
          home room
          home

  Typing 'home' on its own with no parameters will send you back to your home
  location.

  Typing 'homeroom', 'home room' or 'home' (If your home room is your current
  home, or 'home' twice if not) will take you to your home room (Every
  character is given a home room when they are first created.)

  Typing 'home home' or 'home homeroom' will set your home location to your
  home room, so typing 'home' will always take you there.

  You can set your home to any room which either belongs to you or has its
  ABODE flag set (I.e:  You can see it's #ID number when you type 'look'
  while in the room.)

  To set your home, simply type 'home here' while you are in the room you
  wish to make your home.  Alternatively, if you know the room's #ID number,
  simply type 'home <#ID>', where <#ID> is the #ID number of number, e.g:
  'home #12345'.

  NOTE:  You can also set your home using the '@link' command, but the above
         method is far easier.


  *HOME* in csuccess/cfailure of compound commands
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  If the csuccess/cfailure branch of a compound command is set to 'home',
  the TCZ-based MUD will continue searching up the area-tree for another
  compound command with the same name as the compound command currently
  being executed and execute it.

  Setting the csuccess/cfailure branch of '.enter', '.leave', '.login', 
  '.reconnect', and '.logout' compound commands to 'home' allows further 
  '.enter', '.leave', etc. compound commands up the area-tree to be executed.

-------------------------------------------------------------------------------

  Homeroom
  ~~~~~~~~
  USAGE:  homeroom

  Every character is given their own home room when they are first created.

  Your home room is a private room, where you and friends can go for a private
  chat (To invite other characters into your home room, use the 'summon'
  command to ask their permission to be summoned to your home room.)

  If you do not have a home room, you can create one by typing '@homeroom'
  (You can do this even if you are not a Builder!)

  Typing 'homeroom', 'home room' or 'home' (If your home room is your current
  home, or 'home' twice if not) will take you to your home room.

-------------------------------------------------------------------------------

  Hosts (Hostlist or Sites)
  ~~~~~~~~~~~~~~~~~~~~~~~~~
  USAGE:  hostlist [<PAGE NO>] [<NAME>|<FLAGS>]
          hosts [<PAGE NO>] [<NAME>|<FLAGS>]
          sites [<PAGE NO>] [<NAME>|<FLAGS>]

  This command can only be used by Apprentice Wizards/Druids and above.

  Displays a list of all connected characters and the names/IP addresses of
  the host machines they're currently connected from.

  If <PAGE NO> is specified, the list of users will be split up into pages and
  the page number specified will be displayed, e.g:  'hosts 1', 'hosts 2', etc.

  If <NAME> is specified, just that one character is listed.  If one or more 
  flags (Separated by spaces) are specified instead of <NAME>, only characters
  with those flags are listed, e.g:  'hosts admin', 'hosts mortals',
  'hosts haven quiet', etc.

-------------------------------------------------------------------------------

  Idle
  ~~~~
  USAGE:  idle [<NAME>]

  Tells you how long the character <NAME> (Or yourself, if <NAME> isn't
  specified) has been idle (How much time has passed since they last typed
  something.)

  'idle' also tells you if the user is away from their keyboard (AFK) or has
  lost their connection.

-------------------------------------------------------------------------------

  Inventory
  ~~~~~~~~~
  USAGE:  inventory

  Lists everything you're carrying, displays how much Building Quota you have
  in use and your present Building Quota limit, your current score and how
  much credit (Money) you have.

-------------------------------------------------------------------------------

  Junk (kick)
  ~~~~~~~~~~~
  USAGE:  kick <NAME> [= <REASON>]
          junk <OBJECT>

  'kick' allows you to kick an offensive character out of one of your rooms
  into the Junk Pile (#0.)  If the kicked character's home is set to one of
  your rooms, their home will be reset to the Junk Pile (#0) so they can't
  return too easily.  When you kick someone, you should give a <REASON>,
  e.g:  'kick fred = for being offensive'.

  'junk' allows you to junk an object (Even if it's locked against you) that
  belongs to someone else that's been left lying around on your property to
  the Junk Pile (#0.)

  PLEASE NOTE:  In order to allow Apprentice Wizards/Druids to remove unwanted
                objects from public locations, Apprentice Wizards/Druids may
                junk MORTAL owned objects (Wizards/Druids and above can do
                this too of course, with their read/write privileges.)

-------------------------------------------------------------------------------

  Lastcommand
  ~~~~~~~~~~~
  USAGE:  lastcommand [<PAGE NO>] [<NAME>|<FLAGS>]
          last [<PAGE NO>] [<NAME>|<FLAGS>]

  For Admin, 'last' displays a list of all connected characters who are of a
  lower level, along with the command they last typed and executed.

  For Mortals, 'last' only displays your own last command, and those of your
  puppet(s), if connected.

  IMPORTANT:  'last' CAN NOT be used to secretly snoop on your private
              conversations.  All spoken text (Including pages, tells and
              talking on chatting channels) is censored.  You can always
              see your own last command, and those of your puppet(s).

  If <PAGE NO> is specified, the list of users will be split up into pages and
  the page number specified will be displayed, e.g:  'last 1', 'last 2', etc.

  If <NAME> is specified, just that one character is listed.  If one or more
  flags (Separated by spaces) are specified instead of <NAME>, only characters
  with those flags are listed, e.g:  'last admin', 'last haven quiet', etc.

-------------------------------------------------------------------------------

  Lastseen
  ~~~~~~~~
  USAGE:  lastseen [<PAGE NO>] [<NAME>|friends|admin|enemies]

  Ranks and lists every user in the database by how long ago they last
  connected to the TCZ-based MUD.  You can also use this command to find out
  how long ago a particular user connected ('lastseen <NAME>') and when your
  friends last connected ('lastseen friends'.)

  By default, the first page of users (I.e:  Those who last connected most
  recently) will be displayed.  However, if <PAGE NO> is specified, that
  page of users will be displayed, e.g:  'lastseen 2' to display the 2nd
  page, 'lastseen 3' to display the 3rd, etc.

  'lastseen' ranks every user in the database by default, however you can rank
  your friends list by typing 'lastseen friends' or 'lastseen enemies', and
  rank current administrators of the TCZ-based MUD by typing 'lastseen admin'.

  You can see when a particular user last connected by typing 'lastseen
  <NAME>', e.g:  'lastseen fred bloggs' will tell you when the user 'Fred
  Bloggs' last connected, and how long ago that was.

  NOTE:  Each time 'lastseen' is used, every user in the database will be
         ranked using efficient internal sorting algorithms.  This means
         that the list is always fully up-to-date.

-------------------------------------------------------------------------------

  Leave
  ~~~~~
  USAGE:  leave

  Allows you to leave the container or vehicle you're currently inside (If
  you're inside one), providing it's currently open.

  You'll either end up at the location of the container/vehicle or the location
  of the character currently carrying the container.

-------------------------------------------------------------------------------

  Lock
  ~~~~
  USAGE:  lock <OBJECT>

  The 'lock' command locks the container, vehicle or exit <OBJECT>, so that
  it can't be opened or closed (Using the 'open' and 'close' commands.)

  A container or vehicle can only be locked if its lock key ('@key') is
  satified.

-------------------------------------------------------------------------------

  Longspod
  ~~~~~~~~
  USAGE:  longspod [<PAGE NO>] [<NAME>|friends|admin|enemies]

  Ranks and lists every user in the database (Except puppets) by their longest
  connect time (The longest amount of time they've spent in one go connected
  to the TCZ-based MUD without disconnecting.)

  By default, the first page of users (I.e:  Those with the highest longest
  connect time) will be displayed.  However, if <PAGE NO> is specified, that
  page of users will be displayed, e.g:  'longspod 2' to display the 2nd page,
  'longspod 3' to display the 3rd, etc.

  'longspod' ranks every user in the database by default, however you can rank
  your friends list by typing 'longspod friends' or 'longspod enemies', and
  rank current administrators of the TCZ-based MUD by typing 'longspod admin'.

  You can see the position of an individual user by typing 'longspod <NAME>',
  e.g:  'longspod me' will tell you where you are in the list (Out of all of
  the other characters in the database) and 'longspod fred bloggs' will tell
  you where the user 'Fred Bloggs' is in the list.

  You can also list users in a given range of positions by typing 'longspod
  <FROM>-<TO>', e.g:  'longspod 100-150' will list users in the positions
  100 to 150.

  NOTE:  Each time 'longspod' is used, every user in the database will be
         ranked using efficient internal sorting algorithms.  This means
         that the list is always fully up-to-date.

         Puppets are excluded from the list of users.

-------------------------------------------------------------------------------

  Look (Read)
  ~~~~~~~~~~~
  USAGE:  look [at] [<OBJECT>]
          read [<OBJECT>]
          look outside

  Displays the description and contents of <OBJECT>, or your current location,
  if <OBJECT> isn't specified.

  If you're inside a container or vehicle which can be entered, you can look
  out of the container/vehicle (I.e:  Look at its current location) by typing
  'look outside'.  If you're inside a container, it must be open to look out
  of it (If it's closed, you can open it by typing 'open here'.)  You can also
  look out of non-OPAQUE containers.

  'Read' is an alias for 'look'.

-------------------------------------------------------------------------------

  Lwho (Localwho)
  ~~~~~~~~~~~~~~~
  USAGE:  localwho [<PAGE NO>] [<NAME>|<FLAGS>]
          lwho [<PAGE NO>] [<NAME>|<FLAGS>]

  'lwho' displays a list of all characters that are in rooms/containers owned
  by the character who owns the room/container you're currently in.  It also
  tells you where each character listed currently is (This list is similar to
  'where', except localised.)

  If <PAGE NO> is specified, the list of users will be split up into pages and
  the page number specified will be displayed, e.g:  'lwho 1', 'lwho 2', etc.

  If <NAME> is specified, just that one character is listed.  If one or more
  flags (Separated by spaces) are specified instead of <NAME>, only characters
  with those flags are listed, e.g:  'lwho admin', 'lwho mortals', 'lwho haven
  quiet', etc.

-------------------------------------------------------------------------------

  Map
  ~~~
  USAGE:  map [<SECTION>]

  .------+--------+------.
  |  NW  | North  |  NE  |
  |------+--------+------|
  | West | Centre | East |
  |------+--------+------|
  |  SW  | South  |  SE  |
  `------+--------+------'

  For Telnet users, displays an ASCII map of the TCZ-based MUD, divided up
  into sections to make it easier to fit onto smaller text-based screens.
  However, if you have a screen bigger than 80x25, it will be taken advantage
  of if you have set your screen width and height correctly (See section on
  'set'.)

  <SECTION> is the section of the map to view, which is a compass direction
  (With the exception of 'centre'.)  Full or abbreviated names can be used,
  e.g:  'north-west', 'northwest', 'nwest' and 'nw' are all valid.  'map'
  without parameters for Telnet users will display the central section of
  the map.

  If changes are made to the map (By editing its files on the server), they
  can be loaded into the TCZ-based MUD by using '@reload map' (Deities and
  above only.)

-------------------------------------------------------------------------------

  Modules
  ~~~~~~~
  USAGE:  module <NAME> [= <PAGE NO>]
          modules [<PAGE NO>]

  The 'modules' command displays a complete list of source code modules.

  Typing 'modules' without a name of a module will display a complete list of
  all modules.  The first page of modules will be displayed.  You can display
  the other pages using 'modules <PAGE NO>', e.g:  'modules 2'.

  If you are interested in a particular module, you can type 'module <NAME>'
  to view full information (Including authors) about the module.  For example,
  'module tcz.c' will display full information about the module 'tcz.c'.

  The 'modules' command ensures that authors of TCZ source code modules are
  given credit and acknowledgement where due.  It also allows users to find
  out who was responsible for their favourite parts of TCZ.

-------------------------------------------------------------------------------

  More
  ~~~~
  USAGE:  more [<COMMAND>]
          more on|off

  TCZ-based MUD's feature a 'more' paging facility, which can be used to
  page the subsequent output of any command, so you can read it a page at a
  time rather than it uselessly scrolling past continuously.

  You can turn the 'more' paging facility on (The default for new characters)
  by typing 'more on' or 'set more on'.  This will automatically page the
  output of the following commands (Which usually produce a lot of output):
  'look', 'scan', 'inventory', 'examine', the BBS 'read' command, the mail
  'read' command, '@list', '@find', '@entrances' and the various user lists
  (I.e:  'who', 'swho', etc.)

  However, some Telnet clients have a 'more' paging or scroll-back facility
  built into them ('/more on' in TinyFugue for example), in which case you
  may like to disable 'more' paging in the TCZ-based MUD, by typing 'more off'
  or 'set more off'.

  Regardless of whether the 'more' paging facility is on or off, you can
  force the subsequent output of ANY command to be paged by typing
  'more <COMMAND>', e.g:  'more @list me = all'.

  When the output of a command is paged with the TCZ-based MUD's 'more' paging
  facility, you'll see a line which looks something like the following:

  [MORE:  (Page 1 of 3)  -  (N)ext/(P)revious page, (R)e-display or (S)kip...]

  This shows you which page you are currently looking at, and how many pages
  there are in total.  You can display the next page by pressing the RETURN/
  ENTER key on your computer/terminal, or by typing 'n' ('next'.)

  You can re-display the current page by typing 'r' ('redisplay'), go back to
  the previous page by typing 'p' ('previous'.)  You can also go to the first
  page by typing 'f' ('first') and last page by typing 'l' ('last'.)

  You can skip the rest of the pages and leave the 'more' paging facility by
  typing 's' ('skip'.)  You can also execute any TCZ-based MUD command whilst
  in the 'more' paging facility by typing '.<COMMAND>' or '.x <COMMAND>', e.g:
  '.page fred = hello' (PLEASE NOTE:  The output of any commands executed
  from within the 'more' paging facility WILL NOT be paged.)

  HINT:  You can make a compound command that automatically pages its output
         (Depending on the 'more' paging preference of the character executing
         it) by placing the command 'more' (Without any parameters) at the
         beginning of the compound command.

-------------------------------------------------------------------------------

  motd
  ~~~~
  USAGE:  motd

  Re-displays the built-in (Hard-coded) Message(s) Of The Day (MOTD.)  These
  are shown to you when you first connect to the TCZ-based MUD.  You can
  review them again at any time by typing 'motd'.

-------------------------------------------------------------------------------

  News
  ~~~~
  USAGE:  news

  Takes you to the TCZ-based MUD's BBS and changes your current selected topic
  to 'News', so you can read the latest news.

-------------------------------------------------------------------------------

  Open
  ~~~~
  USAGE:  open <OBJECT>

  The 'open' command opens the container, vehicle or exit <OBJECT>, so that
  you can access its contents, enter it (Using the 'enter' command) or go
  through it (If an exit.)

-------------------------------------------------------------------------------

  Page
  ~~~~
  USAGE:  page <NAME>[,<NAME>][,<NAME>][...] [=] <MESSAGE>

  This command is used to page a message to any character who's connected or
  a group of connected characters, regardless of whether they're in the same
  room as you.

  If no message is given, the recipient(s) will be told that you're trying to
  contact them.

  Characters who aren't connected, set HAVEN or have reset your PAGETELL
  friend flag will not receive your page.

  You can page more than one person at once by giving a list of names
  separated by either ',' or ';', e.g:  'page fred;joe = hello' will page the
  message "Hello" to the users Fred and Joe.  If you use 'page' without an '='
  to separate the name(s) and message, the list of names must contain NO
  spaces.

  When paging someone, only the first unique characters of their name are
  needed (E.g:  To page 'Fred Bloggs', you can type 'page fred = <MESSAGE>'.)

  You can send a group page to all your connected friends or enemies by
  typing 'page friends = <MESSAGE>' or 'page enemies = <MESSAGE>' and page
  all connected Admin (Apprentice Wizards/Druids and above) by typing
  'page admin = <MESSAGE>'.  You can also use 'pf <MESSAGE>' to send a
  group page to all your connected friends.


  Blocking pages (And tells) from other characters...
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  You can also stop a particular character from being able to page/tell
  messages to you by adding them to your friends list (By typing 'fadd <NAME>')
  and then typing 'fset <NAME> = !pagetell'.  You can even make them one of
  your enemies by typing 'fset <NAME> = enemy'.
  
  See section on 'fset' for more details on how to use 'fset'.


  The '.page' compound command...
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  If you have a compound command on you called '.page', it will be executed
  when someone successfully pages a message to you.  Within the '.page'
  compound command, $1 holds the name of the person who paged you, and
  $2 holds their message.  Example:

  @command .page = |page $1 = :acknowledges your message and thanks you for
  paging %o.


  The '.message' variable...
  ~~~~~~~~~~~~~~~~~~~~~~~~~~
  The '.message' variable is used to set alternative messages when someone
  pages/tells a message to you when you are set HAVEN, not connected, idle
  or have reset their PAGETELL/MAIL/LINK friend flag(s).

  To create a '.message' variable, simply type '@var .message'.  You can then
  set the messages as follows...

  @succ .message = <TIME>       Sets the time you have to be idle for (In secs)
                                before your idle message ('@osucc' of
                                '.message') is displayed.

  @osucc .message = <MESSAGE>   Displayed when someone tries to page/tell a
                                message to you and you've been idle for the
                                amount of time (Or longer) specified in the
                                '@succ' of your '.message' (In secs.)

  @fail .message = <MESSAGE>    Displayed when someone tries to page/tell a
                                message to you and you're set HAVEN.

  @ofail .message = <MESSAGE>   Displayed when someone tries to page/tell a
                                message to you and you're not connected.

  @drop .message = <MESSAGE>    Displayed when someone tries to page/tell a
                                message to you and you've removed their
                                PAGETELL friend flag (E.g:  'fset <NAME> =
                                !pagetell'.)

  @odrop .message = <MESSAGE>   Displayed when someone tries to send mail to
                                you and you've removed their MAIL friend flag
                                (E.g:  'fset <NAME> = !mail'.)

  @desc .message = <MESSAGE>    Displayed when someone tries to '@link' or
                                '@tel' themselves to one of your (ABODE) rooms
                                and you've removed their LINK friend flag
                                (E.g:  'fset <NAME> = !link'.)

-------------------------------------------------------------------------------

  Pay (@pay)
  ~~~~~~~~~~
  USAGE:  [@]pay <NAME> = <AMOUNT> [= account|pocket]

  The 'pay' command is used to perform transactions with other characters.  You
  can use it to pay credit into the pocket or bank account of another user.

  <NAME> is the name of the user who you would like to pay and <AMOUNT> is the
  amount of credit you would like to pay to them.  For example, 'pay fred
  bloggs = 10' will pay 10 credits to the user Fred Bloggs.

  If 'account' is specified, the credit will be paid directly into the user
  <NAME>'s bank account.  If 'pocket' is specified, the credit will be paid
  into the user's pocket.  If neither are specified, it will be paid into the
  user's pocket by default (Or their bank account, if used within a compound
  command.)

  You can also transfer credit to users directly from your bank account, by
  using the 'transfer' command.

  The '.pay' compound command...
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  If you have a compound command on you called '.pay', it will be executed
  when you successfully pay credits to another character.  Within the '.pay'
  compound command, $1 holds the name of the person whom you paid, and $2 
  holds the amount of credits.  Example:

  @command .paid = |emote puts away %p wallet after paying \$2 credits to \$1.

  The '.paid' compound command...
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  If you have a compound command on you called '.paid', it will be executed
  someone has successfully paid you credits..  Within the '.pay' compound 
  command, $1 holds the name of the person who paid you, and $2 holds the
  amount of credits.  Example:

  @command .pay = |tell $1 = :has received your payment.  Thank you!

  Example use of '@pay' within compound commands...
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  To make a compound command which charges a user credit, simply place the
  following command at the beginning of your compound command, replacing
  <AMOUNT> with the amount of credits you would like to charge...

     @if false {@pay {@?owner {@?myself}} = <AMOUNT>} do @return

  IMPORTANT:  If you build compound commands which charge for their usage, you
              MUST inform the user that they will be charged and how much.
              Failure to do this may result in the earnings you have unfairly
              earned being taken away from you.

  For example, if you built a bar from which users could buy drinks, its
  description should be something like:

     A large bar, selling just about every drink you can think of.
     All drinks cost 1.50 credits.

  ...And the compound command which allows users to buy drinks should be
  something like:

     @if {@eval {@?credit} < 1.50} do
         @echo Sorry, you do not have enough credit to by yourself a drink.
         @return
     @end
     @if false {@pay {@?owner {@?myself}} = 1.50} do @return
     @echo You hand the bartender 1.50 credits and ask for a $1.
     @echo You down it in one go.
     @oemote orders a $1 from the bar and downs it in one.

  You can also pay out money to users from within compound commands by using
  the '@force' command to force yourself to pay the money to them, e.g:

     @force {@?owner {@?myself}} = @pay *{@?name me} = 10 = pocket

  ...Will pay 10 credits into the pocket of the user executing the compound
  command the above line is placed within.

  NOTE:  You can guard against unwanted payments by using the 'restrict' bank
         command to restrict the maximum payment you can make from within a
         compound command.

-------------------------------------------------------------------------------

  Privileges (Or Privs)
  ~~~~~~~~~~~~~~~~~~~~~
  USAGE:  privileges [<NAME>]

  Lists your privileges in the room you're currently in (Or <NAME>'s
  privileges in the room they're currently in, if <NAME> is specified and
  you're an Apprentice Wizard/Druid or above.)

  You can use this command to find out what you can and can't not do in the
  room you're currently in (E.g:  Whether you can talk, yell (A localised
  version of 'shout' for Mortals), fight and use bad language (Even though
  you shouldn't anyway.))

  PLEASE NOTE:  You can ALWAYS yell in your own rooms, regardless of YELL
                flag settings (I.e:  You shouldn't use 'privileges' to see
                if a flag is set on a particular object  -  You should use
                'settings <OBJECT>' instead.)

-------------------------------------------------------------------------------

  Profile
  ~~~~~~~
  USAGE:  profile [<NAME>] [= secret]

  Every character on a TCZ-based MUD has a profile.  You can use your profile
  to set detailed information about yourself, which other users can view (By
  using the 'profile' command) to find out more about you.

  The 'profile' command displays detailed information about the character
  <NAME> (Or yourself, if <NAME> isn't specified.)  You can set your own
  profile by using the '@profile' command.

  If the second parameter ('= secret') is specified, the user's '.profile'
  compound command (If they have one (See below)) will not be executed.


  The '.profile' compound command...
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  If you have a compound command on you called '.profile', it will be executed
  whenever someone views your profile (Providing you have set one.)  Within
  the '.profile' compound command, $1 holds the name of the person who viewed
  your profile.  Example:

  @command .profile = @echo %m%l[%w%l$1 %m%lviewed your profile.]

-------------------------------------------------------------------------------

  QUIT
  ~~~~
  USAGE:  QUIT

  Makes you log out and leave the TCZ-based MUD.  This command MUST be typed
  in capitals.

  'QUIT' can be used at any time, even if you haven't created or connected a
  character, however, it CAN'T be used from within a compound command.

-------------------------------------------------------------------------------

  Recall
  ~~~~~~
  USAGE:  recall <NUMBER>
          recall all
          recall list
          recall last

  The 'recall' command allows you to recall the last 8 messages sent to you
  via 'page' or 'tell'.

  Typing 'recall' on its own (Without any parameters) will recall the last
  message sent to you (Along with the time, date and who it was from.) Typing
  'recall all' will show all of your recently received messages.

  'recall list' will list the names of the senders of the last 8 messages,
  along with the time and date.  You can see the actual message by typing
  'recall <NUMBER>', where <NUMBER> is the number of the message, e.g:
  'recall 1'.

  You can reply to the last message you received by typing 'reply <MESSAGE>'
  or reply to the message <NUMBER> in the list by typing 'page <NUMBER>
  <MESSAGE>' or 'tell <NUMBER> <MESSAGE>'.

-------------------------------------------------------------------------------

  Repeat
  ~~~~~~
  USAGE:  repeat <NAME>[,<NAME>][,<NAME>...]

  Repeats (Re-sends) the last message you sent via 'page' or 'tell', sending
  it to another character or group of characters.

  This command is ideal when you accidentally send a message to the wrong
  person, allowing you to send it to the correct person without having to
  retype the message all over again.

-------------------------------------------------------------------------------

  Reply
  ~~~~~
  USAGE:  reply <MESSAGE>

  Replies to the sender of the last message you received via 'page' or 'tell'.

  If you accidentally send a reply to the wrong person when using this command
  (I.e:  Someone else sends you a message while you're typing your reply), you
  can re-send your reply to the correct person by typing 'repeat <NAME>', where
  <NAME> is the name of the person.

-------------------------------------------------------------------------------

  Rem
  ~~~
  USAGE:  rem <COMMENT>

  This command can only be used from within a compound command.

  It allows comments to be put into compound commands.  You can use comments
  to briefly explain what the compound command does (For the reference of
  people examining the command), e.g:  'rem This command allows users to
  'order' drinks from the bar.'

-------------------------------------------------------------------------------

  Ride
  ~~~~
  USAGE:  ride <VEHICLE> = <DIRECTION>

  The 'ride' command is used to ride a vehicle which can't be entered and
  driven (Using the 'enter' and 'drive' commands), such as a motorcycle, horse,
  bicycle, etc.

  <VEHICLE> is the name of the vehicle, which must be in the same location as
  you.  <DIRECTION> is the name of the exit to drive it through, the #ID number
  of an ABODE room or the name of a connected character, e.g:  'drive east'.

  NOTE:  A vehicle can only be riden into locations which have their TRANSPORT
         flag set.  A vehicle can't be riden through an exit which doesn't have
         its TRANSPORT flag set.

-------------------------------------------------------------------------------

  Say
  ~~~
  USAGE:  say <MESSAGE>
          "<MESSAGE>

  Makes you say "<MESSAGE>" to everyone in the same room as you.  The second
  form (A double-quote followed by your message) is easier to type.

  You can use ' or ` instead of " if you prefer.

-------------------------------------------------------------------------------

  Scan (Or Finger)
  ~~~~~~~~~~~~~~~~
  USAGE:  finger[full|brief] [<NAME>] [= secret]
          scan[full|brief] [<NAME>] [= secret]
          x[f|b] [<NAME>] [= secret]

  Displays information about the character <NAME> (Or yourself, if <NAME>
  isn't specified), such as their description, time they last connected and
  how long ago that was, race, score, credit, current location, etc.

  Two formats of 'scan' are available (Brief and full.)  'scan', 'finger'
  and 'x' display the brief format.

. 'scanfull', 'fingerfull' and 'xf' display the full format, and 'scanbrief',
  'fingerbrief' and 'xb' display the brief format.

  Both the brief and full format of 'scan' show similar information, but the
  full format goes into more detail, showing average idle/active times,
  creation date, total number of logins, etc. (This results in more screen
  output.)

  If the second parameter ('= secret') is specified, the scanned user's '.scan'
  compound command (If they have one (See below)) will not be executed.


  The '.scan' compound command...
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  If you have a compound command on you called '.scan', it will be executed
  whenever someone scans you.  Within the '.scan' compound command, $1 holds
  the name of the person who scanned you.  Example:

  @command .scan = @echo %r%l[%w%l$1 %r%lscanned you.]

-------------------------------------------------------------------------------

  Score
  ~~~~~
  USAGE:  score

  Displays how much Building Quota you have in use and your present building
  quota limit, your current score and how much credit (Money) you have.

  You can rank users by typing '@rank' followed by one of the following:
  Score, Credit, Balance, Quotalimit (Admin. only).  See section on '@rank'
  for further information.

-------------------------------------------------------------------------------

  Screenconfig
  ~~~~~~~~~~~~
  USAGE:  screenconfig

  Asks you a number of questions designed to help you set up the TCZ-based MUD
  to suit your computer/terminal.  If you connect from a different computer/
  terminal than the one you used when you first connected, you may find you
  need to run through the 'screenconfig' questions again.


  'screenconfig' does the following...
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *  Determines whether your computer/terminal supports ANSI colour.
     (Also determines whether 8 or 16 colour ANSI should be used.)
  *  Determines whether your computer/terminal can display underlined text.

-------------------------------------------------------------------------------

  Set
  ~~~
  USAGE:  set [<OPTION> [=] <SETTING>]

  The 'set' command is used to set your preferences for the following:

  set wrap        Word-wrapping.
  set lftocr      End-of-line termination sequence.
  set term        Terminal type.
  set echo        Local echo.
  set more        'more' paging.
  set afk         Auto-AFK (Away From Keyboard.)
  set ansi        ANSI colour.
  set underline   Text underlining.
  set pagebell    Bell (Beep) when receiving pages.
  set timediff    Time difference (Your local time vs server time.)
  set prompt      Command-line prompt.

  Typing 'set' without any parameters displays your current preferences for
  all of the above.

  Descriptions of what each of the above 'set' commands do follows...

  NOTE:  'Set' may be used at the title screen (Before you've even connected)
         to set things such as your terminal type (If necessary), end-of-line
         termination sequence, echo, etc.

         Most of the things you can set using 'set' are set automatically
         when you connect with your character.

-------------------------------------------------------------------------------

  Set wrap
  ~~~~~~~~
  USAGE:  set wrap [=] [<SCREEN WIDTH>]
          set wrap [=] off
          set wrap [=] on
          set wrap

  Allows you to set your preferences for word-wrapping.  If the TCZ-based MUD
  can work out what terminal you're using when you connect, word-wrap is set
  automatically for you, otherwise an 80 character wide screen is assumed.

  You can change word-wrap to suit your screen by typing 'set wrap' followed by
  the width of the screen in characters.

  'set wrap on' turns word wrapping on (With screen width set to the default
  of 80 characters), and 'set wrap off' turns word wrapping off.

  'set wrap' with no parameters displays the current status of word wrapping
  and your current set screen width.

-------------------------------------------------------------------------------

  Set scrheight
  ~~~~~~~~~~~~~
  USAGE:  set scrheight [=] <SCREEN HEIGHT>
          set scrheight

  Allows you to set the height of your screen, in lines.  By default, a 24
  line screen is assumed, but if you're using a screen with more lines than
  this (I.e:  Xterm, etc.), you can set your screen height so you can take
  advantage of the extra lines.

  Your screen height setting is used to determine the number of entries per
  page on user lists, BBS topic and message lists, object lists (From
  '@find'/'@list'), etc.  It's also used to determine your default group size
  when using grouping/range operators.

  'set scrheight' with no parameters displays your current set screen height.

  NOTE:  Your screen width setting is remembered when you disconnect.

-------------------------------------------------------------------------------

  Set lftocr
  ~~~~~~~~~~
  USAGE:  set lftocr [=] lfcr|crlf|lf|cr
          set lftocr

  Some Telnet clients don't return the cursor to the far left of the screen
  when they receive a LF (Line Feed) character.  This results in a grossly
  messed up display.

  To solve this problem, 'set lftocr' is provided, which allows you to change
  the end-of-line termination sequence that the TCZ-based MUD uses to suit
  your Telnet client.

  In most cases, typing either 'set lftocr lfcr' or 'set lftocr crlf' fixes
  display problems.  The other options are 'set lftocr cr' and 'set lftocr
  lf' (Default.)  LF is a Line Feed character, and CR is a Carriage Return.

  Typing 'set lftocr' without any parameters will display your current
  end-of-line termination sequence.

  NOTE:  Your preferred end-of-line termination sequence is remembered when you
         disconnect.

-------------------------------------------------------------------------------

  Set term
  ~~~~~~~~
  USAGE:  set term [=] [<TERMINAL TYPE>]

  Allows you to set your terminal type (If it's incorrect  -  Type 'set term'
  without any parameters to find out what terminal type the TCZ-based MUD
  currently thinks you're using.)

  To set your terminal type, simply type 'set term' followed by the name of
  your terminal, e.g:  'set term vt100', 'set term xterm', etc.  If your
  terminal type isn't supported, either choose a similar terminal type, or
  type 'set term none'.

-------------------------------------------------------------------------------

  Set more
  ~~~~~~~~
  USAGE:  set more [=] off
          set more [=] on
          set more

  When 'more' paging is on ('set more on'), certain commands which usually
  produce a lot of output are automatically paged, allowing you to read the
  output without it scrolling past continuously.  These commands include:
  'look', 'scan', 'inventory', 'examine', the BBS 'read' command, the mail
  'read' command, '@list', '@find' and '@entrances'.

  However, some Telnet clients have a 'more' paging or scroll-back facility
  built into them ('/more on' in TinyFugue for example), in which case you
  may like to disable 'more' paging in the TCZ-based MUD, by typing
  'set more off'.

  NOTE:  Your 'more' paging preference is remembered when you disconnect.

-------------------------------------------------------------------------------

  Set afk
  ~~~~~~~
  USAGE:  set afk [=] <TIME>
          set afk [=] off
          set afk [=] on
          set afk

  TCZ-based MUDs feature an auto-AFK facility, which (By default) sends you
  AFK (Away From Keyboard) automatically when you idle for 10 or more minutes.

  This time can be changed by typing 'set afk <TIME>', where <TIME> is the
  time in minutes.  The auto-AFK facility can also be turned off, by typing
  'set afk off'.

  NOTE:  Your auto-AFK preference is remembered when you disconnect.

-------------------------------------------------------------------------------

  Set echo
  ~~~~~~~~
  USAGE:  set echo [=] off
          set echo [=] on
          set echo

  When echo is on ('set echo on'), the TCZ-based MUD will echo everything you
  type to your screen.  In most cases, you shouldn't need to turn echo on, as
  your Telnet client should echo what you type locally (If it doesn't, try
  turning the LOCAL ECHO option in your Telnet/communications software ON
  (You will usually find this in the software's configuration/options
  screen/menu.))

  NOTE:  Your echo preference is remembered when you disconnect, so if you
         connect from a different computer/terminal and find everything you
         type being double-echoed, or echoed twice, type 'set echo off'.

-------------------------------------------------------------------------------

  Set ansi
  ~~~~~~~~
  USAGE:  set ansi [=] 8 colour
          set ansi [=] off
          set ansi [=] on
          set ansi

  Turns ANSI colour on ('set ansi on' (16 colour) or 'set ansi 8 colour'
  (8 colour)) or off ('set ansi off'.)

  If your terminal supports ANSI colour, you can enjoy any TCZ-based MUD
  in full colour!  See section near the beginning of this manual for more
  detailed information about ANSI colour support.

  NOTE:  Your ANSI colour preference is remembered when you disconnect.

-------------------------------------------------------------------------------

  Set underlining
  ~~~~~~~~~~~~~~~
  USAGE:  set underlining [=] off
          set underlining [=] on
          set underlining

  When underlining is on ('set underlining on'), titles usually underlined
  with tildes (~) will be underlined with a proper underline, e.g:

  Obvious exits:

  When it's off ('set underlining off'), titles will be underlined with
  tildes (~)  -  The default, e.g:

  Obvious exits:
  ~~~~~~~~~~~~~~ 

  NOTE:  Not all terminals can do underlines (Xterm can do them.)

         Your underlining preference is remembered when you disconnect.

-------------------------------------------------------------------------------

  Set pagebell
  ~~~~~~~~~~~~
  USAGE:  set pagebell [=] off
          set pagebell [=] on
          set pagebell

  When page bell is on ('set pagebell on'), paged messages will cause your
  terminal to beep (See section on 'page'.)

  NOTE:  Your page bell preference is remembered when you disconnect.

-------------------------------------------------------------------------------

  Set timediff
  ~~~~~~~~~~~~
  USAGE:  set timediff [=] [<DIFFERENCE>]
          set timediff

  This setting is useful to overseas users  -  It sets your time difference
  between the TCZ-based MUD's server time and your local time.

  <DIFFERENCE> is the difference in hours between the TCZ-based MUD's server
  time and your country's local time (This can be any value between -24 and
  +24), e.g:  If your country's local time is 2 hours ahead of the TCZ-based
  MUD's server time, simply type 'set timediff 2'.

  Please bear in mind that clocks may go back/forward by 1 hour during the
  summer if the TCZ-based MUD is located in a country that uses Daylight
  Saving Time (DST.)  This may affect your local time (Especially if your
  country does not use Daylight Saving Time, or has different start/end
  rules.)  If this is the case for you, simply check and adjust your
  time difference when this occurs.

  NOTE:  Your time difference setting is remembered when you disconnect.

-------------------------------------------------------------------------------

  Set prompt
  ~~~~~~~~~~
  USAGE:  set prompt [=] [<PROMPT>]

  Allows you to set your prompt, which can be up to 80 characters in length,
  and may contain ANSI %-type substitutions if you like.

  Your prompt isn't permanent, and only remains in effect while you're still
  connected.  You can of course put 'set prompt' in your '.login' compound
  command if you're a Builder, so your prompt is set automatically each time
  you connect.

  You can remove your prompt at any time by typing 'set prompt' on it's own.


  Example:
  ~~~~~~~~
  set prompt What next?

  ...gives you the prompt...

  What next?

  ...in front of what you're typing.

-------------------------------------------------------------------------------

  Settings
  ~~~~~~~~
  USAGE:  settings <OBJECT>

  Displays brief information about the object <OBJECT>, providing you either
  own/control it, or you're an Experienced Builder or an Apprentice Wizard/
  Druid or above.

  The information displayed includes the object's name, owner, Building Quota
  used/in use, flags currently set on object and its lock specification (If
  it has a lock.)

  The 'settings' command is useful for finding out what flags are currently set
  or the lock specification of an object without having to use the 'examine'
  command to examine it (Which can produce a lot of output.)

  The 'examine' command can be used to obtain more detailed information about
  a particular object.

-------------------------------------------------------------------------------

  Shout
  ~~~~~
  USAGE:  shout <MESSAGE>
          shout :<MESSAGE>
          shout ;<MESSAGE>

  'shout' can only be used by Apprentice Wizards/Druids and above, providing
  their SHOUT flag hasn't been reset.

  The first form shouts "<MESSAGE>" to every character connected.

  The second form (Putting a ':' in front of your message) broadcasts
  '[ANNOUNCEMENT:  <NAME> <MESSAGE>]' to every character connected (It works
  just like emoting (Or posing) a message.)

  The third form (Putting a ';' in front of your message, which can only be
  used by Wizards/Druids and above) broadcasts '[BROADCAST MESSAGE from <NAME>:
  <MESSAGE>]' to every character connected and makes their terminal beep.

-------------------------------------------------------------------------------

  Spod
  ~~~~
  USAGE:  spod [<PAGE NO>] [<NAME>|friends|admin|enemies]

  Ranks and lists every user in the database (Except puppets) by their total
  time spent active (The total amount of time they've spent logged into the
  TCZ-based MUD without idling.)  Those users near the top of the spod list
  are some of the TCZ-based MUD's most dedicated users, who have been using
  the TCZ-based MUD for a long time.

  By default, the first page of users (I.e:  Those with the highest total
  connect time) will be displayed.  However, if <PAGE NO> is specified, that
  page of users will be displayed, e.g:  'spod 2' to display the 2nd page,
  'spod 3' to display the 3rd, etc.

  'spod' ranks every user in the database by default, however you can rank
  your friends list by typing 'spod friends' or 'spod enemies', and rank
  current administrators of the TCZ-based MUD by typing 'spod admin'.

  You can see the position of an individual user by typing 'spod <NAME>', e.g:
  'spod me' will tell you where you are in the list (Out of all of the other
  characters in the database) and 'spod fred bloggs' will tell you where the
  user 'Fred Bloggs' is in the list.

  You can also list users in a given range of positions by typing 'spod
  <FROM>-<TO>', e.g:  'spod 100-150' will list users in the positions
  100 to 150.

  NOTE:  Each time 'spod' is used, every user in the database will be ranked
         using efficient internal sorting algorithms.  This means that the
         list is always fully up-to-date.

         Puppets are excluded from the list of users.

-------------------------------------------------------------------------------

  Statistics (Or Attributes)
  ~~~~~~~~~~~~~~~~~~~~~~~~~~
  USAGE:  statistics [<NAME>]
          attributes [<NAME>]

  Displays your combat statistics, or the character <NAME>'s combat statistics.
  You can view the combat statistics of any character, so you can decide who
  to fight and who to avoid.


  Combat statistics comprise of...
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  Character's current health, score, number of battles won, battles lost,
  total number of battles fought and their combat performance (The higher
  this percentage, the better they are at fighting.)


  You can rank users by their combat statistics, by typing '@rank' followed
  by one of the following:  Score, Won, Lost, Battles, Performance.
  See section on '@rank' for further details.

-------------------------------------------------------------------------------

  Summon
  ~~~~~~
  USAGE:  summon <NAME> [= <REASON>]
          summon accept|refuse
          
  The 'summon' command allows you to summon a user to your current location.

  If no reason is given (I.e:  'summon <NAME>'), the user <NAME> will be told
  that you wish to summon them to your present location, and can accept by
  typing 'summon accept' or refuse by typing 'summon refuse'.  If they accept,
  then they will be teleported to your current location.

  This usage of 'summon' can be used by anyone (Including Mortal users) and is
  ideal for allowing users into your private rooms/areas without having to set
  ABODE flags, unlock exits, etc.  It's also ideal for summoning your Puppet to
  your current location (As you control your puppet, they do not need to accept
  your summon  -  They'll be immediately teleported to your current location.)

  If you're an Apprentice Wizard/Druid and above, and give a reason, the
  summon will be unconditional and the user will be immediately teleported
  to your current location (The reason you give will be shown to the user
  being summoned and logged to the 'Summon' log file.)  This usage of
  'summon' is useful when dealing with abusive/problem users.

-------------------------------------------------------------------------------

  Swho
  ~~~~
  USAGE:  shortwho [<PAGE NO>] [<NAME>|<FLAGS>]
          swho [<PAGE NO>] [<NAME>|<FLAGS>]

  Displays a full list of all characters connected to the TCZ-based MUD in
  multiple columns (Names of characters only.)

  If <PAGE NO> is specified, the list of users will be split up into pages and
  the page number specified will be displayed, e.g:  'swho 1', 'swho 2', etc.

  If <NAME> is specified, just that one character is listed.  If one or more
  flags (Separated by spaces) are specified instead of <NAME>, only characters
  with those flags are listed, e.g:  'swho admin', 'swho mortals', 
  'swho haven quiet', etc.

  Some characters in the list may have a symbol to the left of their name.  The
  symbol indicates their rank/status, which is as follows:

     @   Elder Wizard/Druid or above.
     *   Wizard/Druid.
     ~   Apprentice Wizard/Druid.
     =   Experienced Builder/Retired Wizard.
     +   Assistant/Retired Druid.
     `   Puppet.
     !   Moron.

-------------------------------------------------------------------------------

  Take (Get)
  ~~~~~~~~~~
  USAGE:  take <OBJECT> [= <CONTAINER>]
          get <OBJECT> [= <CONTAINER>]
          

  Makes you pick up <OBJECT>, which you must be able to reach.  'Get' is an
  alias for 'take'.

  You can't pick up objects that are locked against you or objects that are
  inside a closed container.

  If <CONTAINER> is specified, the object will be put into the container
  <CONTAINER>, which you must be carrying.

-------------------------------------------------------------------------------

  Tell
  ~~~~
  USAGE:  tell <NAME>[,<NAME>][,<NAME>][...] [=] <MESSAGE>
          ><NAME>[,<NAME>][,<NAME>][...] [=] <MESSAGE>
          .<NAME>[,<NAME>][,<NAME>][...] [=] <MESSAGE>

  This command is used to tell a message to any character who's connected, or
  a group of connected characters, regardless of whether they're in the same
  room as you.

  If all of the characters are in the same room as you, everyone else will
  hear what you say to them (Making 'tell' a great way of directing messages
  to particular characters when having a big conversation in a room.)  If
  one or more recipients aren't in the same room as you, only the recipients
  will receive your message.

  Characters who aren't connected, set HAVEN or have reset your PAGETELL
  friend flag will only receive your message if they're in the same room
  as you.

  You can tell a message to more than one person at once by giving a list of
  names separated by ',' or ';', e.g:  'tell fred;joe = hello' will tell the
  users Fred and Joe "Hello".  If you use 'tell' without an '=' to separate
  the name(s) and message, the list of names must contain NO spaces.

  When telling a message to someone, only the first unique characters of
  their name are needed (E.g:  To tell 'Fred Bloggs' something, you can type
  'tell fred = <MESSAGE>'.)

  You can tell all your connected friends or enemies a message by typing
  'tell friends <MESSAGE>' or 'tell enemies <MESSAGE>' and tell all
  connected Admin (Apprentice Wizards/Druids and above) a message by
  typing 'tell admin <MESSAGE>'.  You can also use 'tf <MESSAGE>' to
  tell a message to all your connected friends.

  The second and third forms (A '>' or '.' followed by your message) are
  easier to type, e.g:  '.fred hello' to tell Fred "Hello".


  Blocking tells (And pages) from other characters...
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  You can also stop a particular character from being able to page/tell
  messages to you by adding them to your friends list (By typing 'fadd <NAME>')
  and then typing 'fset <NAME> = !pagetell'.  You can even make them one of
  your enemies by typing 'fset <NAME> = enemy'.
  
  See section on 'fset' for more details on how to use 'fset'.


  The '.tell' compound command...
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  If you have a compound command on you called '.tell', it will be executed
  when someone successfully tells a message to you.  Within the '.tell'
  compound command, $1 holds the name of the person who told the message
  to you, and $2 holds their message.  Example:

  @command .tell = |tell $1 = :acknowledges your message and thanks you for
  contacting %o.

-------------------------------------------------------------------------------

  TF and PF
  ~~~~~~~~~
  USAGE:  tf <MESSAGE>
          pf <MESSAGE>

  The above two commands ('tf' and 'pf') are aliases for the commands 'tell
  friends <MESSAGE>' and 'page friends <MESSAGE>' respectively.  They are
  provided for convenience (And are easier/quicker to type too.)

-------------------------------------------------------------------------------

  Think
  ~~~~~
  USAGE:  think <THOUGHT>
          +<THOUGHT>
          =<THOUGHT>

  Makes you think  . o O ( <THOUGHT> ) to everyone in the same room as you.
  The second and third forms (A '+' or '=' followed by your thought) are
  easier to type.

-------------------------------------------------------------------------------

  Time (Date)
  ~~~~~~~~~~~
  USAGE:  time
          date

  Tells you the current time and date.  Unless you've set your time difference
  using 'set timediff <DIFFERENCE IN HOURS>', this time will be the TCZ-based
  MUD's server time, otherwise it will be your local time.

-------------------------------------------------------------------------------

  Title (Or @title)
  ~~~~~~~~~~~~~~~~~
  USAGE:  @title <NAME> [= <TITLE>]
          @title me [= <TITLE>]
          title <TITLE>
  
  The 'title' command (Or '@title me = <TITLE>') is used to set your title on
  the user list ('who'), e.g:  'title explores the virtual world!'  Typing
  'title' on its own or '@title me =' will reset your title.

  The maximum length of your title is 100 characters, however if you have a
  long title, it may be truncated on the user list (Although it will appear
  in full when users 'scan' you.)

  '@title <NAME> = <TITLE>' may be used by Wizards/Druids and above to set the
  title of other (Lower level) characters (I.e:  If their title is unsuitable,
  abusive, etc.)

  You can use text colour substitutions in your title, if you wish.

-------------------------------------------------------------------------------

  Titles
  ~~~~~~
  USAGE:  titles

  When users connect through Telnet, an 'ASCII art' title screen is displayed
  at random from a selection of title screens.

  The 'titles' command displays these title screens at random, without needing
  to disconnect and then reconnect to the TCZ-based MUD.

-------------------------------------------------------------------------------

  To
  ~~
  USAGE:  to #<ROOM ID>

  The 'to' command takes you to the room/container #<ROOM ID>, providing it's
  set ABODE.  E.g:  'to #12345'.

-------------------------------------------------------------------------------

  Transfer (@transfer)
  ~~~~~~~~~~~~~~~~~~~~
  USAGE:  [@]transfer <NAME> = <AMOUNT> [= account|pocket]

  The 'transfer' command is used to perform transactions with other characters.
  It's used to transfer credit directly from your bank account into the pocket
  or bank account of another user.

  <NAME> is the name of the user who you would like to transfer credit to, and
  <AMOUNT> is the amount of credit you would like to transfer to them from from
  your bank account.  For example, 'transfer fred bloggs = 10 = account' will
  transfer 10 credits from your bank account to to the user Fred Bloggs's bank
  account.

  If 'account' is specified, the credit will be transfered into the user
  <NAME>'s bank account.  If 'pocket' is specified, the credit will be
  transfered into the user's pocket.  If neither are specified, it will be
  transfered into the user's pocket by default (Or their bank account, if
  used within a compound command.)

  You can also pay credit to users from your pocket, by using the 'pay'
  command.

  NOTE:  You can guard against unwanted payments by using the 'restrict' bank
         command to restrict the maximum payment you can make from within a
         compound command.

-------------------------------------------------------------------------------

  Tutorial
  ~~~~~~~~
  USAGE:  tutorial [<SUBJECT>]

  When using the On-Line Help System, you may see '[TUTORIAL AVAILABLE]' at
  the top of some of the help screens.  This means that there is also an
  in-depth tutorial available on the same subject/command.  To read the
  tutorial, simply type 'tutorial <SUBJECT>' or 'tutorial <COMMAND>'
  (I.e:  If 'help @command' has a tutorial available, you can read it
  by typing 'tutorial @command'.)

  The tutorials are designed for complete beginners on the various subjects
  they cover.  These tutorials do not use technical jargon, making them an
  ideal way to increase your knowledge of the TCZ-based MUD and get
  considerably more enjoyment out of it.

  Typing 'tutorial' on its own (I.e:  Without specifying <SUBJECT>) will
  display a list of available tutorials.

-------------------------------------------------------------------------------

  Unlock
  ~~~~~~
  USAGE:  unlock <OBJECT>

  The 'unlock' command unlocks the container, vehicle or exit <OBJECT>, so that
  it can be opened and closed (Using the 'open' and 'close' commands.)  A
  container or vehicle can only be unlocked if its lock key ('@key') is
  satified.

-------------------------------------------------------------------------------

  Use
  ~~~
  USAGE:  use <OBJECT> [[on|in|with|to] <PARAMETERS>]
          use <OBJECT> [= <PARAMETERS>]

  Allows you to use the specified object (If it can be used), where <OBJECT> is
  the name of the object.

  <PARAMETERS> are optional parameters that can be given when using the object,
  for example, if the object was a weapon, its parameters could be the name of
  the character to use it on, e.g:  'use sword on fred bloggs', 'use armour on
  me', etc.

  <OBJECT> can be any type of object (I.e:  It doesn't neccessarily have to be
  a thing.)

  The following types of objects have a default use (If they do not have a
  '.use' compound command attached):

    *  Compound Command  -  Executes with optional parameters given to 'use'.
    *  Thing/Room        -  Looks at room/thing.
    *  Character         -  Shows character's 'scan'.
    *  Exit              -  Go through exit.


  The '.use' compound command
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  In order for an object to be used, it must have a compound command named
  '.use' attached to it.  To attach a '.use' compound command to an object,
  simply teleport it into the object, e.g:  '@tel .use = <OBJECT>'.

  When the object is used (By typing 'use <OBJECT>'), its '.use' compound
  command is executed.  If optional <PARAMETERS> have been specified by the
  user, these will be given as parameters to the compound command in the
  usual manner (I.e:  $1, $2, $3, etc.)

  NOTE:  Any type of object which can have compound commands attached to it
         can be used using the 'use' command, even compound commands.

         A compound command with multiple names can include '.use', e.g:
         'attack;.use'.

-------------------------------------------------------------------------------

  Version (Info)
  ~~~~~~~~~~~~~~
  USAGE:  version
          info

  Displays version and copyright information about the TCZ-based MUD code base:

  *  The GNU General Public License (GPL) notice.
  *  The source code version, operating system and compilation date/time.
  *  The code base name.
  *  The code base description.
  *  The code base web site.
  *  The code base project name.
  *  Related commands and help topics.

-------------------------------------------------------------------------------

  Wake
  ~~~~
  USAGE:  wake <NAME>

  The 'wake' command is used to 'wake up' and get the attention of another
  user (Especially someone who's currently idle.)  It sends a wake up message
  to the character <NAME> along with an attention grabbing beep and the time
  you tried to wake them.

-------------------------------------------------------------------------------

  Warn
  ~~~~
  USAGE:  warn <NAME> = <WARNING>

  This command can only be used by Apprentice Wizards/Druids and above.

  Issues an official warning to the character <NAME>.  This command should be
  used to warn characters who are breaking the rules of the game, being
  abusive, harrassing other users, etc.

  Official warnings are logged to the 'Warn' log file.

-------------------------------------------------------------------------------

  Warp
  ~~~~
  USAGE:  warp [<NAME>]

  Teleports you to a random ABODE location in the TCZ-based MUD  -  This
  is a great way of exploring the virtual world and discovering new areas
  (Especially those built by Builders, which are seldomly linked up to the
  rest of the virtual world or advertised on the TCZ-based MUD's BBS.)

  If <NAME> is specified, you'll be teleported to one of the character <NAME>'s
  ABODE locations at random (A great way for finding the ABODE rooms of a user
  without remembering the #ID numbers.)

  PLEASE NOTE:  Locations which have their WARP flag reset (The default for
                things) will be excluded from the 'warp' command.  This is
                ideal if you have an ABODE location which you don't want
                other users to teleport to at random via the 'warp' command.

-------------------------------------------------------------------------------

  Welcome
  ~~~~~~~
  USAGE:  welcome list [<PAGE NO>]
          welcome [<NAME>]

  This command can only be used by Apprentice Wizards/Druids and above,
  and Experienced Builders/Assistants (Providing there are 3 or less
  Apprentice Wizards/Druids and above connected.)
   
  The 'welcome' command is used to welcome new users to the TCZ-based MUD,
  and offer them your help, should they need it.

  Typing 'welcome list' will display a list of new users who need welcoming  -
  You can welcome one of these users by typing 'welcome <NAME>', or welcome
  the first user in the list by typing 'welcome' on its own.

  NOTE:  Expererienced Builders/Assistants above can welcome users who have
         been connected for over 2 minutes without being welcomed, or when
         there are 3 or less Apprentice Wizards/Druids and above connected.

  If <PAGE NO> is specified, the list of users who need welcoming will be
  split up into pages and the page number specified will be displayed, e.g:
  'welcome list 1', 'welcome list 2', etc.

  Usage of the 'welcome' command is logged to the 'Welcome' log file.

-------------------------------------------------------------------------------

  Where
  ~~~~~
  USAGE:  where [<PAGE NO>] [<FLAGS>]
          where *<NAME>

  The first form ('where [<PAGE NO>] [<FLAGS>]') displays a full list
  of all characters connected to the TCZ-based MUD and where they currently
  are (I.e:  The name of the room/container they're currently in.)

  If <PAGE NO> is specified, the list of users will be split up into pages and
  the page number specified will be displayed, e.g:  'where 1', 'where 2', etc.

  If one or more flags (Separated by spaces) are specified, only characters
  with those flags are listed, e.g:  'where admin', 'where mortals',
  'where haven quiet', etc.

  The second form ('where *<NAME>') tells you where the character <NAME>
  presently is (Regardless of whether they are connected or not.)  If they're
  connected and in a room with other users, the users they're with are listed
  too.  (NOTE:  You don't have to put a '*' in front of <NAME>  -  However, if
  you don't, the chances are that the name you give may match to a TCZ-based
  MUD flag.)

-------------------------------------------------------------------------------

  Whisper
  ~~~~~~~
  USAGE:  whisper <NAME> [=] <MESSAGE>

  Whispers <MESSAGE> to the character <NAME>, providing they're in the same
  room as you.  Only the recipient will receive the message  -  However,
  everyone else in the room will see a message along the lines of:

  Fred Bloggs whispers something to Joe Bloggs.

  If Morons try to whisper, everyone in the room overhears what they say.

-------------------------------------------------------------------------------

  Who (Users or Userlist)
  ~~~~~~~~~~~~~~~~~~~~~~~
  USAGE:  userlist [<PAGE NO>] [<NAME>|<FLAGS>]
          users [<PAGE NO>] [<NAME|<FLAGS>]
          who [<PAGE NO>] [<NAME>|<FLAGS>]

  Displays a full list of all characters connected to the TCZ-based MUD, along
  with their login time, title, flags and idle time (You can set your title
  (The message that appears after your name) by typing 'title <TITLE>'.)

  If <PAGE NO> is specified, the list of users will be split up into pages and
  the page number specified will be displayed, e.g:  'who 1', 'who 2', etc.

  If <NAME> is specified, just that one character is listed.  If one or more
  flags (Separated by spaces) are specified instead of <NAME>, only characters
  with those flags are listed, e.g:  'who admin',  'who mortals',
  'who haven quiet', etc.

  You can also type 'who friends' to list your connected friends (As an
  alternative to 'fwho'/'fwhere'.)


  The flags displayed for each character are as follows:
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  H    Character is HAVEN and doesn't wish to be disturbed.
  Q    Character is QUIET and wont see connects, shouts, etc.
  F    Character is one of your friends.
  !    Character is one of your enemies.

  M    Character is a Moron.
  p    Character is a puppet under the control of another user.
  b    Character is a virtual Being under computer control.
  B    Character is a Builder and may build locations, areas, etc.
  X x  Character is an Experienced Builder or Assistant.
  R r  Character is a Retired Wizard or Retired Druid.
  A a  Character is an Apprentice Wizard or Apprentice Druid.
  W w  Character is a Wizard or Druid.
  E e  Character is an Elder Wizard or Elder Druid.
  D    Character is a Deity or the Supreme Being.


  Time:   How long each character has been connected to the TCZ-based MUD.

  Idle:   How long each character has been idle (Doing nothing.)

  Users:  Tells you how many users are currently connected and how many of
          them are Deities, Elder Wizards/Druids, Wizards/Druids, Apprentice
          Wizards/Druids, Builders/Experienced Builders, Mortals, Puppets and
          Morons.  For Admin, the percentage of users who are currently idle
          and the percentage of users who are Admin are also displayed.

  Peak:   Tells you the largest number of users connected simultaneously
          so far today (Since midnight) and the average daily peak.

  Up:     How long the TCZ-based MUD has been running without being shutdown
          by the administrator(s).


  NOTE:   The peak number of users, etc. and the uptime are also displayed
          on the other user lists too (E.g:  'swho', 'where', etc.)

-------------------------------------------------------------------------------

  Uptime
  ~~~~~~
  USAGE:  uptime

  The 'uptime' command shows the following:
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *  The time and date when the TCZ-based MUD was last restarted.

  *  How long it has been running for (Without being shutdown) since that date.

  *  The time and date when the database was created.

  *  The accumulated up-time since the database was created (The total
     accumulated time the TCZ-based MUD has been running for since the
     database was created, excluding periods when it was down.)

  *  The average up-time (Worked out by dividing the accumulated up-time by
     the number of times the TCZ-based MUD has been restarted.)

  *  The longest recorded up-time and the time/date it occurred.

-------------------------------------------------------------------------------

  Visit (Go)
  ~~~~~~~~~~
  USAGE:  visit <NAME>
          go <NAME>

  The 'visit' (Or 'go') command takes you to the location of the character
  <NAME>, providing their location has its ABODE and VISIT flags set or
  they have set the VISIT friend flag on you in their friends list.
  E.g:  'go fred bloggs'.

  If you have set the VISIT friend flag on any of your friends, you can
  temporarily disable its effect by setting your PRIVATE flag ('@set me
  = private')  -  Having done this, you can allow your friends to visit
  you again whenever they like by simply resetting your PRIVATE flag
  ('@set me = !private'.)

-------------------------------------------------------------------------------

  Yell
  ~~~~
  USAGE:  yell <MESSAGE>

  'yell' is a localised version of 'shout' that allows Mortals to yell messages
  to everyone listed on 'lwho' (Local user list) who are in a room with its
  YELL flag set.

  Only characters with a YELL flag may yell messages (Everyone starts off with
  a YELL flag  -  You only lose it if you abuse it!)  You can yell in your own
  rooms regardless of whether you have a YELL flag or not.  Morons can't yell
  anywhere.  You can find out if you can yell in a room by simply typing
  'privs'.

===============================================================================

  @admin
  ~~~~~~
  USAGE:  @admin [<OPTION> [=] <SETTING>]
          @admin options [<OPTION> [[=] <SETTING>]]

  The '@admin' command (Which may only be used by Apprentice Wizards/Druids
  and above) is used to view/adjust various parameters of the TCZ-based MUD.
  Typing '@admin' without any parameters displays all '@admin' options and
  their current settings.

  '@admin options' displays the current server options given to the TCZ-based
  MUD at start-up either on the command-line or from within a configuration
  file.  Some of these can be temporarily changed while the TCZ-based MUD is
  running by Deities and the Supreme Being (Using '@admin option <OPTION>
  [[=] <SETTING>]'.)  (NOTE:  DO NOT change these options unless you know
  *exactly* what you are doing.)


  Database dumping status
  ~~~~~~~~~~~~~~~~~~~~~~~
  When the database is being dumped to disk, this field will show you its
  progress so far, e.g:  'Database dumping status:  9032/40142 objects dumped.'
  

  Database dumping duration
  ~~~~~~~~~~~~~~~~~~~~~~~~~
  This field is a summary of the time taken to dump the database to disk  -
  The minimum, average and maximum times are shown (In that order) in
  hours, minutes and seconds.


  Time until next dump
  ~~~~~~~~~~~~~~~~~~~~
  When the database isn't being dumped to disk, this field will show the amount
  of time remaining before the next database dump starts.
  

  Server shutdown
  ~~~~~~~~~~~~~~~
  If server shutdown has been started (Using the '@shutdown' command), this
  field will show the amount of time remaining before the TCZ-based MUD will
  shutdown.

  NOTE:  Server shutdown can be cancelled by typing '@shutdown cancel'.


  Database dumping interval               (Elder Wizards/Druids and above only)
  ~~~~~~~~~~~~~~~~~~~~~~~~~
  USAGE:  @admin dumping [=] <TIME IN MINUTES>      

  This option is the amount of time (In minutes) between database dumps to
  disk.

  NOTE:  The database can be forcefully dumped to disk using the '@dump'
         command (However, this should only ever be done in an emergency.)


  Data dumped per cycle                    (Deities and the Supreme Being only)
  ~~~~~~~~~~~~~~~~~~~~~
  USAGE:  @admin data [=] <SIZE IN KILOBYTES>

  This option is the amount of database data (In kilobytes) which will be
  dumped to disk in a single dump cycle.

  The higher this setting, the faster database dumps will be completed.
  However, setting this value too high will result in the operating system's
  disk cache getting swamped, and the TCZ-based MUD lagging while it tries
  to catch up.

  NOTE:  This option does not affect the forked database dump.


  Dump cycle interval                      (Deities and the Supreme Being only)
  ~~~~~~~~~~~~~~~~~~~
  USAGE:  @admin cycle [=] <TIME IN SECONDS>

  This option is the amount of time (In seconds) between each database dump
  cycle (Once the database dump has started.)

  The lower this setting, the faster database dumps will be completed.
  However, setting this value too low will result in the operating system's
  disk cache getting swamped, and the game lagging while it tries to catch up.

  NOTE:  This option does not affect the forked database dump.


  Limit maximum connections               (Elder Wizards/Druids and above only)
  ~~~~~~~~~~~~~~~~~~~~~~~~~
  USAGE:  @admin limit [=] yes|no

  When set to 'yes', the maximum number of users simultaneously connected to
  the TCZ-based MUD at any one time will be limited to the number set with
  the 'Connections allowed' option.

  If the maximum number of users is reached or exceeded (When this option is
  set to 'yes'), only Apprentice Wizards/Druids and above will be able to
  connect until the number of connected users drops below the limit again.


  Connections allowed                     (Elder Wizards/Druids and above only)
  ~~~~~~~~~~~~~~~~~~~
  USAGE:  @admin allowed [=] <LIMIT>

  This option is the maximum number of users which can be simultaneously
  connected at any one time.  For this restriction to take any effect,
  'Limit maximum connections' must be set to 'yes'.


  Home rooms container                          (Deities and the Supreme Being only)
  ~~~~~~~~~~~~~~~~~~~~
  USAGE:  @admin homes [=] #<ID>

  This option is the #ID of the room which the home rooms of users will be
  stored in.  It can not be accessed publicly (However, administrators can
  teleport there of course, if neccessary.)


  Allow user creations                    (Elder Wizards/Druids and above only)
  ~~~~~~~~~~~~~~~~~~~~
  USAGE:  @admin creations [=] yes|guests|no

  This option determines whether new users may be created (This excludes
  new users created by administrators using the '@character' command.)

  If this restriction is set 'no', no new users can be created, and no Guest
  characters may be connected.  If it's set to 'guests', only Guest characters
  may be connected.


  Allow user connections                   (Deities and the Supreme Being only)
  ~~~~~~~~~~~~~~~~~~~~~~
  USAGE:  @admin connections [=] yes|no

  This option determines whether non-administators will be able to connect to
  the TCZ-based MUD.  If this restriction is set to 'no', only Apprentice
  Wizards/Druids and above will be able to connect.


  Bank access room                         (Deities and the Supreme Being only)
  ~~~~~~~~~~~~~~~~
  USAGE:  @admin bank [=] #<ID>

  This option is the #ID of the room from which the bank of the TCZ-based MUD
  can be accessed, where users will be able to withdraw from and deposit
  credit into their bank account.


  Mail access room                         (Deities and the Supreme Being only)
  ~~~~~~~~~~~~~~~~
  USAGE:  @admin mail [=] #<ID>

  This option is the #ID of the room from which the internal mail system can
  be accessed.


  BBS access room                          (Deities and the Supreme Being only)
  ~~~~~~~~~~~~~~~
  USAGE:  @admin bbs [=] #<ID>

  This option is the #ID of the room from which the TCZ-based MUD's BBS
  (Bulletin Board System) can be accessed.


  Time adjustment                         (Apprentice Wizards/Druids and above)
  ~~~~~~~~~~~~~~~
  USAGE:  @admin time [=] [+/-] <TIME ADJUSTMENT>

  This option is the time adjustment from the system time of the server machine
  the TCZ-based MUD is running on.  It allows adjustments to be made to the
  server time (Time on the TCZ-based MUD, NOT the server machine) to be made
  (If the system time is incorrect) without affecting the TCZ-based MUD's
  up-time, idle and login times of connected users, database dumping timings,
  etc.
  
  For example, if the server time was 4 minutes behind, you could type
  '@admin time = +4 minutes' to correct it, and if it was 23 minutes fast,
  you could type '@admin time = -23 minutes'.  You can also use any other
  interval of time if you like (E.g:  'seconds', 'hours', etc.)


  Global Aliases                                           (Supreme Being only)
  ~~~~~~~~~~~~~~
  USAGE:  @admin global [= <NAME>]

  This option allows the Supreme Being to set the owner of global aliases.
  Once set, all aliases of the global aliases owner will be global to every
  user of the TCZ-based MUD (Even from within compound commands.)

  Global aliases are matched after user-defined aliases, so a user can
  override a global alias if they wish to do so by defining an alias with
  the same name.

  Global aliases are a high security risk, so only the Supreme Being may set
  this option.  The global aliases owner should ideally be a Deity, and only
  the Supreme Being should know their password.


  Maintenance                              (Deities and the Supreme Being only)
  ~~~~~~~~~~~
  USAGE:  @admin maintenance [=] on|off

  When set to 'yes', unused characters and objects will be destroyed on a
  weekly basis.  Maintenance helps keep the database free of redundant
  characters and objects which will probably never be used again.

  Any character or object which couldn't be destroyed by maintenance (E.g:
  A Builder who has objects locked to them, an object used in the lock of
  another object, etc.) will have its ASHCAN flag set (You can use '@list all
  = ashcanned characters' or '@list all = ashcanned' to list them.)

  NOTE:  Deities and the Supreme Being may use the '@maintenance' command to
         manually start character, object, mail or BBS maintenance.


  USAGE:  @admin owner [=] <OWNER>

  This option is the character who will take over the ownership of objects
  which were owned by characters destroyed by maintenance.  This character
  will also take over the ownership of any objects owned by characters
  destroyed using the '@destroy' command.


  USAGE:  @admin builders [=] <UNUSED TIME>|off
          @admin newbies [=] <UNUSED TIME>|off
          @admin mortals [=] <UNUSED TIME>|off
          @admin objects [=] <UNUSED TIME>|off
          @admin morons [=] <UNUSED TIME>|off
          @admin junk [=] <UNUSED TIME>|off

  These options are the times (In days) after which unused Mortal characters
  of each type (Morons, newbies (Characters who have less than 1 day's total
  connect time), Mortals and Builders) and unused/junked objects/objects with
  their ASHCAN flag set will be destroyed.  Maintenance on each of the above
  character types and objects may be optionally turned off, if the parameter
  'off' is given instead of a time (In days.)

-------------------------------------------------------------------------------

  @alarm
  ~~~~~~
  USAGE:  @alarm <NAME> = <SECONDS> <MINUTES> <HOURS> <DAYS>
          @alarm <NAME> = + <SECONDS> <MINUTES> <HOURS> <DAYS>

  Alarms can only be created by Wizards/Druids and above.  They allow the
  compound command linked by their '@csucc' to be executed automatically at
  certain time(s) during the week, or every given interval of time.

  The first form causes the alarm to go off at the same time each week.

  Days are numbered from 1 - 7, with day 1 being Monday.  If you enter a '*'
  in any field instead of a number, the alarm will execute regardless of the
  value of that field, e.g:  '0 0 12 *' would cause the alarm to go off at
  midday every day.

  The second form causes the alarm to go off every given interval of time,
  e.g:  '+ 0 10 0 0' would cause the alarm to execute every 10 minutes and
  '+ 0 0 2 0' would cause the alarm to execute every 2 hours.

  You can disable an alarm (Without destroying it), by either resetting its
  description or csuccess branch ('@csucc'.)

  WARNING:  Alarms are restricted to Wizards/Druids and above due to the
            potential CPU usage and lag they could cause if used incorrectly.
            Lots of alarms executing at regular intervals (I.e:  One or more
            times every 5 minutes) or straight after each other (Because their
            time of execution is the same) could cause lag and/or slow the
            TCZ-based MUD down  -  Especially if the compound commands being
            executed are relatively complex.

-------------------------------------------------------------------------------

  @alias and @unalias
  ~~~~~~~~~~~~~~~~~~~
  USAGE:  @alias <NAME> [<NAME>] [...] [= <COMMAND>]
          @unalias <NAME> [<NAME>] [...]

  The '@alias' command is used to add or change aliases for TCZ-based MUD
  commands.  '@unalias' is used to remove them.

  Mortals may have up to 100 unique aliases, Apprentice Wizards/Druids and
  Wizards/Druids may have up to 200, and Elder Wizards/Druids and above are
  unrestricted.

  NOTE:  If a compound command has its APPRENTICE or WIZARD flag set, or
         is owned by an Apprentice Wizard/Druid or above, the aliases of
         the compound command's owner will be taken into account when the
         compound command is executed.


  Adding aliases...
  ~~~~~~~~~~~~~~~~~
  To add an alias, simply type '@alias <NAME> = <COMMAND>', e.g:  '@alias
  bye = say I'm off now - See ya later!' will add an alias 'bye' which when
  typed as a command will make you say "I'm off now - See ya later!" to
  everyone in the same room.

  Multiple aliases may be defined for a command, by specifying more than one
  name, e.g:  '@alias bye goodbye seeya = say I'm off now - See ya later!'  -
  With this alias, you can type 'bye', 'goodbye' or 'seeya' to say "I'm off
  now - See ya later!" to everyone in the same room.

  Aliases may also be given a parameter, which can be substituted into the
  alias using '!*', e.g:  '@alias say " ' ` = say %r%l!*' will alias the
  'say' command, so that you speak in colour (Red) everytime you use it.

  '@mexec' can also be used with aliases, allowing you to use them as a
  cheap alternative to compound commands for performing small tasks, e.g:
  '@alias toparea = @mexec \{:%g%lheads back to %p Top Area.}\{@tel me =
  #12345}\{@echo %g%lYou head back to your Top Area.}' (NOTE:  '\'s MUST
  be used in front of '{'s on the command line to prevent them from being
  evaluated)  -  This alias will teleport you back to your Top Area (Replace
  #12345 with the #ID of your Top Area.))


  Changing aliases...
  ~~~~~~~~~~~~~~~~~~~
  To change an alias, simply type '@alias <NAME> = <NEW COMMAND>', e.g:
  '@alias say = say %g%l!*' will change the alias for 'say' so that you
  speak in green text rather than red.


  Removing aliases...
  ~~~~~~~~~~~~~~~~~~~
  To remove an alias, simply type '@unalias <NAME>', e.g:  '@unalias say'
  will remove the alias for 'say'.


  Global aliases
  ~~~~~~~~~~~~~~
  An alias may be made global, so that it applies to every character on the
  TCZ-based MUD, including from within compound commands.  To do this, the
  global aliases owner must be set by the Supreme Being using '@admin'.
  All aliases of this character (When set) will be global.  See section
  on '@admin' for further information on global aliases.


  Example aliases:
  ~~~~~~~~~~~~~~~~
  @alias say " ' ` = say %r%l!*
  @alias block = @if \{@?set me = haven} do @set me = !haven; else @set me =
     haven
  @alias toparea = @mexec \{:%g%lheads back to %p Top Area.}\{@tel me = #12345}
     \{@echo %g%lYou head back to your Top Area.}

-------------------------------------------------------------------------------

  @array
  ~~~~~~
  USAGE:  @array <NAME> [= <INITIAL SIZE>]

  Creates a dynamic array called <NAME> (Building Quota used:  1.)
  If <INITIAL SIZE> is specified, the new dynamic array is given that number
  of blank elements (Providing you have sufficient Building Quota (Building
  quota used by each element:  1.))

  Dynamic arrays are similar to the arrays found in most high-level
  programming langauges such as Pascal, C, etc.  However, the main difference
  is that arrays in TCZ-based MUDs are DYNAMIC (I.e:  There's no limit to the
  the number of elements an array can have (Except your Building Quota limit),
  and the size of the array can easily be changed by inserting or destroying
  elements.)

  Once a dynamic array has been created, its elements can be referenced either
  by number, index name or one of the keywords 'FIRST' (First element), 'LAST'
  (Last element) or 'END' (Add new element to end of array) enclosed in square
  brackets after its name (E.g:  You could reference the 2nd element of the
  dynamic array 'myarray' using 'myarray[2]' and reference the indexed element
  'test' using 'myarray[test]'.)

  You can also specify a range of elements by using '[<FROM>..<TO>]' or
  '[<FROM>-<TO>]', e.g:  You could reference elements 4, 5, 6 and 7 of
  'myarray' by using either 'myarray[4..7]' or 'myarray[4-7]'.  Using ranges
  allows you to describe, destroy, etc. several elements at once.  You can use
  the keyword 'ALL' to reference every element of the dynamic array (This is
  the same as using '[FIRST..LAST]'), e.g:  You could reference every element
  of 'myarray' by using 'myarray[ALL]'.


  Describing and adding new elements...
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  You can set the description of an element by using '@desc <ARRAY>[<ELEMENT>]
  [= <DESCRIPTION>]'  -  This sets the description of the given element(s) to
  <DESCRIPTION> (Or clears the description of the given element(s) if
  <DESCRIPTION> isn't specified.), e.g:  '@desc myarray[2] = element 2', '@desc
  myarray[test] = indexed element 'test''.

  If the element(s) being described do not exist, they'll be created (Building
  quota used by each new element:  1.)  If the element being described is an
  element with an index name, and an element with that index name doesn't
  already exist, a new element will be added to the end of the dynamic array
  and given the specified index name and description.

  You can easily add a new element to the end of a dynamic array using the
  'END' keyword, e.g:  '@desc myarray[END] = a new element'.

  For further information, see section on '@desc'.


  Inserting a new element...
  ~~~~~~~~~~~~~~~~~~~~~~~~~~
  You can insert a new element in front of any element of a dynamic array by
  using '@insert <ARRAY>[<ELEMENT>] [= <DESCRIPTION>'  -  This inserts a new
  element in front of element <ELEMENT> (Or if <ELEMENT> is a range, the new
  element will be inserted in front of the first element of the range) and
  sets its description to <DESCRIPTION> (If <DESCRIPTION> is specified), e.g:
  '@insert myarray[2] = a new inserted element', '@insert myarray[test] = a
  new inserted element in front of indexed element 'test''.

  For further information, see section on '@insert'.


  Destroying an element...
  ~~~~~~~~~~~~~~~~~~~~~~~~
  You can destroy an element and remove it from a dynamic array by using
  '@destroy <ARRAY>[<ELEMENT>]'  -  This destroys the element <ELEMENT> (Or
  range of elements, if a range is specified), e.g:  '@dest myarray[2]',
  '@dest myarray[test]'.  An alternative to destroying an element is simply
  clearing its description (I.e:  If you purposely want the dynamic array to
  stay a fixed size.)

  For further information, see section on '@destroy'.


  Returning the description of an element (Or range of elements)...
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  You can get the description of an element (Or range of elements) by using
  the '{@?elementno}' query command, for example '@echo {@?elementno
  myarray[2]}' will display the description of the 2nd element of 'myarray'
  and '@echo {@?elementno myarray[test]}' will display the description of the
  element with the index name 'test' of 'myarray'.

  For further information, see section on '{@?elementno}'.


  Processing the elements or index names of a dynamic array...
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  You can process the elements or index names of a dynamic array (Or a range
  of specific elements) using the '@with' command.  For details on how to do
  this, see section on '@with'.  Example:  '@with elements myarray do @echo
  $6', '@with indexnames myarray do @echo $6'.


  Editing the elements of a dynamic array...
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  You can use the TCZ-based MUD's built-in editor to edit the elements of a
  dynamic array (However, you can only edit a single element at a time.)

  To edit the elements of a dynamic array, simply start up the editor in the
  usual way, referencing the element you'd like to edit, e.g:  'edit
  myarray[2]' will start the editor, editing the 2nd element of 'myarray'
  and 'edit myarray[test]' will start the editor, editing the element with
  the index name 'test' of 'myarray'.

  You can move around the elements of the dynamic array you're editing using
  the '.element' command, for example, typing '.element 3' will save the
  changes you've made to the element you're currently editing and start
  editing the 3rd element.  You can use the keywords 'FIRST', 'LAST' and
  'END' with '.element' if you like.

  For further information, see section on the editor and the '.element'
  editor command.

-------------------------------------------------------------------------------

  @areaname
  ~~~~~~~~~
  USAGE:  @areaname <OBJECT> [= <NAME>]

  Gives the room or thing <OBJECT> the area name <NAME> (Or clears <OBJECT>'s
  area name if <NAME> isn't specified.)

  To have several rooms with the same area name and to have the features
  described below, here are some basic guidelines:

  *   There's no need to set the area name of ALL of the rooms in the area
      (This will prevent the features below from being able to work properly.)

  *   ONLY set the area name of the TOPMOST room in the area to the desired
      area name.

  EXAMPLE:  Room #1 contains:  Room #2, Room #3 and Room #4.  To have
            all these rooms with the same area name and have the features
            described below, simply type '@areaname here = <NAME>'
            ONLY in Room #1.


  When a room/thing has an area name, it has the following effects...
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *   Yelled messages only go to rooms/things within the named area instead
      of every room/thing the owner of the room/thing you're in owns.

  *   'localwho' (Or 'lwho' for short) lists everyone within the named area
      rather than everyone who's within a room/thing owned by the owner of
      your current location.

  *   Many other commands will tell you not only what room/thing a character
      is in, but also what named area it's within, e.g:  'PAGING from A dark
      cave in The Adventure Zone:  Fred says "Hello!"'  (The named area in
      this case is 'The Adventure Zone'.)

-------------------------------------------------------------------------------

  @areawrite
  ~~~~~~~~~~
  USAGE:  @areawrite <MESSAGE>

  '@areawrite' is similar to the '@write' command, except that it displays
  <MESSAGE> in your current location, and all locations within that location.

  You must own or have write permission to your current location to use
  '@areawrite'.  If there are locations owned by other users within the
  location, the message will be displayed in them, even if you don't have
  write permission.

  Messages sent using '@areawrite' exclude your name, and will not be seen
  in locations set QUIET or by characters who have set their QUIET flag.


  Example:
  ~~~~~~~~
  @tel me = <#ID OF YOUR TOP AREA>
  @areawrite Hello everyone in my area!

-------------------------------------------------------------------------------

  @ban
  ~~~~
  USAGE:  @ban <NAME> = permanently = <REASON>
          @ban <NAME> = <TIME> = <REASON>
          @ban <NAME> = lift = <REASON>

  This command can only be used by Wizards/Druids and above on Mortals and
  Morons and should be used as an *absolute* last resort.

  The first form ('@ban <NAME> = permanently = <REASON>') bans a character
  permanently from the TCZ-based MUD.

  The second form ('@ban <NAME> = <TIME> = <REASON>') bans a character for
  the given amount of time, e.g:

  @ban <NAME> = 1 hour = <REASON>   ...Bans the character <NAME> for 1 hour.
  @ban <NAME> = 3 days = <REASON>   ...Bans <NAME> for 3 days.

  The third form ('@ban <NAME> = lift = <REASON>') lifts a character's ban
  (Regardless of whether it's permanent or for a specific amount of time),
  allowing them to connect again and use the TCZ-based MUD.
  
-------------------------------------------------------------------------------

  @banish
  ~~~~~~~
  USAGE:  @banish add|remove <NAME> = <REASON>
          @banish list [<PAGE NO>] [<NAME>]
          @banish check <NAME>

  This command can only be used by Apprentice Wizards/Druids and above.

  '@banish' is used to banish the use of unsuitable, abusive, offensive,
  racist, etc. character names.  Once a character name has been banished,
  new users will not be able to be created with a name beginning with the
  banished name, and existing users will not be able to change their name
  to the banished name (Or a name which begins with it.)  Banished character
  names also can't be used in the name prefix or suffix of a character.

  '@banish add <NAME> = <REASON>' is used to add a character name to the list
  of banished names, where <NAME> is the character name to add and <REASON> is
  the reason for banishing the name.  You can banish character names which
  currently don't exist in the database to prevent future use/misuse.  For
  example, '@banish add crap = some people might be offended by this name'
  will banish the use of the character names beginning with 'Crap'.

  '@banish remove <NAME> = <REASON>' will remove a character name from the list
  of banished names, where <NAME> is the character name to remove and <REASON>
  is reason for removing it from the banished list.  For example, '@banish
  remove wibble = this name isn't offensive enough to be banished' will
  remove the character name 'Wibble' from the banished list (If it has been
  banished.)

  '@banish list' lists character names which are currently banished, sorted
  into alphabetical order.  If <NAME> is specified, names which contain the
  text <NAME> will be displayed only (For example, '@banish list fred' will
  only list banished character names which contain the text 'fred'.)

  If <PAGE NO> is specified, that page of banished names will be displayed (The
  first page is displayed by default), e.g:  '@banish list 2' will display the
  2nd page, '@banish list 3' will display the 3rd, etc.

  '@banish check' allows you to check for and list characters who have names
  beginning with <NAME>, i.e:  '@banish check fred' will list all characters
  who have names beginning with 'Fred'.  You can even check for names which
  aren't currently banished.

-------------------------------------------------------------------------------

  @beep
  ~~~~~
  USAGE:  @beep

  '@beep' causes the person executing it's terminal to beep
  (Character 7 (BEL.))

-------------------------------------------------------------------------------

  @begin
  ~~~~~~
  USAGE:  <CONDITION>:@begin
                         <COMMANDS>
                         ...
                      @end

  The '@begin' command is used within a <CONDITION> statement of '@case' to
  allow a block of commands to be executed, rather than a single command.
  The block of commands MUST be followed by '@end' on a line by itself.

  For further information, please see the section on '@case'.


  Example:
  ~~~~~~~~
  @command BeginTest =\
  @case $3 do\
     block:@begin\
              @echo %w%l>>>  %xThis demonstrates executing\
              @echo %w%l>>>  %xa block of commands.\
           @end\
     DEFAULT:@echo USAGE: %g%l \{@?cmdname} block\
  @end


-------------------------------------------------------------------------------

  @boot
  ~~~~~
  USAGE:  @boot <NAME> [= <BAN TIME>] = <REASON>

  This command can only be used by Apprentice Wizards/Druids and above,
  providing their BOOT flag hasn't been reset.

  The '@boot' command can be used (As a last resort) to kick a character off
  the TCZ-based MUD (I.e:  If they're being abusive/harassive and refuse to
  stop, even after being given a Moron flag, etc.)

  If <BAN TIME> is specified, the booted character will be banned for that
  amount of time (In minutes.)  This is ideal when booting abusive/problem
  users, as it can be used to stop them from simply connecting again as
  soon as they're booted.  The ban time can be between 1 and 60 minutes.
  The '@ban' command can be used to impose longer bans.

  The '@boot' command boots ALL connections of the specified character off
  the TCZ-based MUD.  Connections which have stopped responding should be
  booted using the '@bootdead' command.

  NOTE:  All boots are logged to the 'Boot' log file.

-------------------------------------------------------------------------------

  @bootdead
  ~~~~~~~~~
  USAGE:  @bootdead [<NAME>]

  '@bootdead' is used to get rid of 'dead' connections when your session
  has stopped responding.  When your character is connected multiple times
  (I.e:  Reconnecting after your connection has stopped responding will often
  result in you being connected twice), you'll need to use the '@bootdead'
  command to get rid of your connections which have stopped responding.

  Simply type '@bootdead' and your connections which have stopped responding
  will be booted from the TCZ-based MUD (NOTE:  Only connections with an idle
  time of more than 1 minute will be booted.)

  If you're an Apprentice Wizard/Druid or above, you can optionally specify a
  <NAME> to boot the connections which have stopped responding of another
  character (If a user asks you to do this, you should tell them how to use
  the '@bootdead' command.)

  NOTE:  Unlike '@boot', '@bootdead' is NOT logged (There is no need), no
         reason needs to be given and there is no broadcast message.

-------------------------------------------------------------------------------

  @break
  ~~~~~~
  USAGE:  @break [true|false]

  '@break' stops execution of the current compound command and skips to the
  end, executing the compound command linked via the cfailure if 'false' is
  specified, csuccess if 'true' or no parameter is specified or the csuccess/
  cfailure appropriately depending on the return result of the previous
  executed command if 'current' is specified.

  NOTE:  '@break' does not change the return value from the previous executed
         command.


  Example compound command:
  ~~~~~~~~~~~~~~~~~~~~~~~~~
  @if {@eval "$3" = "skip"} do @break
  @echo The rest of this command will be skipped if given the parameter 'skip'.

-------------------------------------------------------------------------------

  @breakloop
  ~~~~~~~~~~
  USAGE:  @breakloop [all]

  '@breakloop' breaks out of the present loop ('@for', '@foreach', '@while'
  or '@with') and continues executing the current compound command.  Without
  the parameter 'all', '@breakloop' will only break out of the current loop
  -  With the parameter 'all', '@breakloop' will break out of ALL loops.

  NOTE:  '@breakloop' does not change the return value or return result
         (Success/failure) from the previous executed command.


  Example compound command:
  ~~~~~~~~~~~~~~~~~~~~~~~~~  
  @for 1 to 10 do @if {@eval $4 >= 5} do @breakloop
  @echo '@for' looped $5 times.

-------------------------------------------------------------------------------

  @case
  ~~~~~
  USAGE:  @case[first|random] <VALUE> do
                [<CRITERIA>]:<COMMAND>
                [<CRITERIA>]:@begin
                                <COMMANDS>
                                ...
                             @end
          @end

  The '@case' command is used to test <VALUE> to see if it matches one or more
  <CRITERIA>, executing the specified <COMMAND> or block of <COMMANDS>.

  NOTE:  All comparisons performed by '@case' are NOT case sensitive.

  <VALUE> is the string to match against the various <CRITERIA>, for example,
  this could be '$3', or the contents of a temporary variable.

  <CRITERIA> can be one or more of the following, separated by ',':

  value		Exact match against 'value', e.g:  'MyValue'.
  from-to       Exact range match between 'from' and 'to', e.g:  'A-Z'.
  from..to      Exact range match between 'from' and 'to', e.g:  '0-9'.
  from->to      Prefix range match between 'from' and 'to', e.g:  'A->Z'.
  wildvalue     Wildcard match against 'wildvalue', e.g:  '*and*', 'prefix*',
                '*suffix', 't?z', etc.
  DEFAULT       If specified, matched if no other <CRITERIA> in the '@case'
                statement is matched.

  NOTE:  For an exact range match, <VALUE> MUST be within the range, e.g:
         'AAA' will not match 'A-ZZ', but 'AB' or 'C' will.

  NOTE:  For a prefix range match, <VALUE> must be prefixed by the range,
         e.g:  'Test' will match 'A->Z' ('T' is within the range, and
         prefixes 'Test'.)

  The <CRITERIA> must be followed by ':' and the <COMMAND> to execute, or if
  you wish to execute more than one command, '@begin', followed by the
  command(s) on separate lines, and finally, '@end' on a line by itself
  (See example below.)


  For example:
  ~~~~~~~~~~~~
  @command CaseTest =\
  @case $3 do\
     single:@echo Single value.\
     one,two,three:@echo Value '%w%l$6%x'.\
     AA-ZZZ:@echo Exact range '%w%l$6%c-%w%l$7%x'.\
     B-P:@echo Exact range '%w%l$6%c-%w%l$7%x'.\
     0..9:@echo Exact range '%w%l$6%c..%w%l$7%x'.\
     Q->Z:@echo Prefix range '%w%l$6%c->%w%l$7%x'.\
     *and*:@echo Contains the wildcard '%w%l$6%x'.\
     a*:@echo Begins with the wildcard '%w%l$6%x'.\
     block:@begin\
              @echo %w%l>>>  %xThis demonstrates executing\
              @echo %w%l>>>  %xa block of commands.\
           @end\
     DEFAULT:@echo %r%lNothing matched.\
  @end

  Try executing the above compound command with the following parameters (See
  if you can work out why you get each result):

     b  2  Test  two  band  ascii  block  single  wibble  error  ba  tcz  dddd

  When '@case' is matching against the specified criteria, it first matches
  against exact values, followed by ranges, then wildcards and finally the
  default, if it has been specified.  Bear this in mind when writing '@case'
  statements, because the order of criteria can make a difference to the
  results when using it.  Place more important criteria near the top of
  the '@case' statement and less important near the bottom.

  In addition to '@case', you can also use '@casefirst' or '@caserandom'.
  These are identical to '@case', except '@casefirst' stops at the very
  first match it finds, and '@caserandom' picks a random condition from
  all those which match.

  When using '@casefirst', order is *extremely* important.  If you place a
  range (E.g:  'A-Z') before an exact value (E.g:  'test'), the range will
  always be matched instead of 'test'.  '@casefirst' may be slightly more
  efficient than '@case', due to the fact that it does not need to match
  against every condition in the case statement.

  With '@caserandom', you can specify multiple identical <CONDITION>
  statements.  One at random will be picked when the condition is
  matched, e.g:

     @command CaseRandom =\
     @caserandom $3 do\
        rand:@echo Random value %w%l1%x.\
        rand:@echo Random value %w%l2%x.\
        rand:@echo Random value %w%l3%x.\
        DEFAULT:@echo USAGE: %g%l \{@?cmdname} rand\
     @end

  The reserved variables $6 and $7 are useful in an '@case' statement  -  These
  substitute the following...

  $6 substitutes the matched <CONDITION> statement.
  $7 substitutes the second value of a range, if <CONDITION> is a range.

  NOTE:  '@case' cannot be used on the command-line, or within {}'s, e.g:
         '{@case ...}'.

  PLEASE NOTE:  You can 'nest' further '@if', '@case', '@for', '@with',
                '@while' and '@foreach' statements (Both single and
                multiple lined) within a block of commands in a '@case'
                statement.

-------------------------------------------------------------------------------

  @censor
  ~~~~~~~
  USAGE:  @censor

  This command can only be used Apprentice Wizards/Druids and above from within
  a compound command.

  The TCZ-based MUD remembers the last command typed by every user who is
  currently logged on.  This allows you to recall (Execute) the last command
  you typed (By typing '!!') and Admin to list the last command typed by
  every user (Or a particular user), using the 'last' command.  This
  facility enables Admin to help new users (By being able to see what
  they are doing wrong.)

  To prevent invasion of privacy, all built-in communication commands (I.e:
  'say', 'page', 'tell', etc.) are censored, so that Admin CAN'T 'snoop' on
  the private conversations of users.

  However, user-created custom communications commands (I.e:  Constructed with
  compound commands) are not subject to censorship by default, and will appear
  in the 'last' commands listing.

  If '@censor' is placed at the beginning of a compound command (Or linked
  sequence of compound commands), use of the compound command will be censored
  in the 'last' commands listing, allowing complete guaranteed privacy for its
  users.

  If the editor is started from a compound command, and '@censor' is executed
  before the compound command finishes, the edit session will be censored
  (With the exception of executing a command, using '.execute' or '.x',
  unless it's normally censored on the command-line.)

  '@censor' may be used from within a Builder owned compound command, providing
  it either has its APPRENTICE or WIZARD flag set.

-------------------------------------------------------------------------------

  @cfail
  ~~~~~~
  USAGE:  @cfail <COMMAND1> = <COMMAND2>

  Sets the cfailure branch of <COMMAND1> to <COMMAND2> if <COMMAND2> is
  specified, otherwise resets it.

  Each individual command in <COMMAND1> either returns success or failure
  when it's executed.  If the last command in <COMMAND1> returns failure,
  the cfailure branch will be followed, and the compound command this is
  set to (If any) will be executed (<COMMAND2>.)

  If the cfailure branch of a compound command is set to 'HOME', the TCZ-based
  MUD will continue searching up the area-tree for another compound command
  with the same name as the compound command currently being executed and
  execute it.

-------------------------------------------------------------------------------

  @character
  ~~~~~~~~~~
  USAGE:  @character <NAME> = <PASSWORD>

  This command can only be used by Apprentice Wizards/Druids and above.

  '@character' creates a new character with the name <NAME> and password
  <PASSWORD>.  The main use of this command is to allow Apprentice Wizards/
  Druids and above to create a character for new users who can't create one
  themselves at the login screen (Due to their site being prevented from
  creating characters, due to abuse, etc.)

  '@character' can't be used from within a compound command.

-------------------------------------------------------------------------------

  @chpid
  ~~~~~~
  USAGE:  @chpid

  This command can only be used within a compound command.

  When used in a compound command, '@chpid' gives the person who executed the
  compound command the privileges of the owner of the compound command.

  Privileges picked up through '@chpid' remain in effect until the compound
  command finishes executing or when another compound command is called
  (Either via the '@csucc'/'@cfail' links or from within the compound command
  itself.)  Privileges picked up through '@chpid' can also be cancelled out
  by using the '@unchpid' command.

  You'll find you need to use an '@chpid' at the beginning of any compound
  command that modifies objects you own, references objects you own by ID
  number or gets the contents of various fields via query commands (E.g:
  '{@?drop <OBJECT>}'.

  NOTE:  When a character executes a compound command that is not owned by
         themselves, write permission from within the compound command will
         be denied to both the character and their objects unless the
         APPRENTICE flag is set on the compound command, or it is owned
         by an Apprentice Wizard/Druid or above.  This safe-guards users
         against malicious 'trojan' compound commands created by Builders,
         which otherwise could alter their character and/or objects without
         their permission.

  NOTE:  Unless it has its WIZARD flag set, a compound command will
         automatically '@chpid' (Even if omitted) to its owner if the
         compound command is an area command (E.g:  '.enter'), triggered
         via a fuse, or the character executing the compound command
         is an Apprentice Wizard/Druid or above.

-------------------------------------------------------------------------------

  @chuid
  ~~~~~~
  USAGE:  @chuid [<NAME>]

  The '@chuid' (Stands for CHange User ID) command changes who you are
  currently building as.  If another character has given you 'write'
  permissions to their objects via the WRITE friend flag (Or some of
  their objects via the SHARABLE friend flag) and permission to create
  objects under their ownership (Using their Building Quota) via the
  CREATE friend flag, you can use the '@chuid' command to set them as
  the character who you are building as.

  Once you have used '@chuid' to set who you are building as, all further
  objects you create will be created under that character's ID, using their
  Building Quota.  You can return to building objects under your own ID
  (Using your own Building Quota) by typing '@chuid' without any parameters.

  PLEASE NOTE:  The effects of '@chuid' are only effective on the command line
                (I.e:  You can only build as another character on the command
                line, NOT from within a compound command.)


  Group building projects...
  ~~~~~~~~~~~~~~~~~~~~~~~~~~
  If you and your proposed group are starting a building project from scratch,
  you may like to ask a member of Admin to create a character for the purpose
  with an appropriate Building Quota limit, with all members of the group being
  given full 'read' and 'write' permissions to this character (I.e:  'fset
  <NAME> = read write create destroy !sharable'.)

  All work on the building project should then be done under the ownership of
  this character (Using the '@chuid' command when working on the project.)
  This will prevent problems arising if a member of the group suddenly decides
  to pull out or a new member joins the group, and will keep all of the
  building project together in one place, owned by a single character.  The
  password of this character should only be disclosed to the founder (Or user
  in charge) of the group, allowing them to remain in full control of the
  group and building project.

-------------------------------------------------------------------------------

  @command
  ~~~~~~~~
  USAGE:  @command <NAME>[;<NAME>][;<NAME>...] [= <COMMANDS>]

  Creates a compound command with the name <NAME> (Building Quota used:  10.)
  The compound command can be given multiple names by seperated them with
  semicolons (';'), however the names mustn't have spaces in them, e.g:
  '@command gohome;house;residence'.

  The most easiest and user-friendly way to write/modify a compound command is
  with the editor (See section on the editor for full details on how to it.)
  You can create a new compound command and start entering the commands it
  should execute by typing 'edit command desc <NAME>[;<NAME>][;<NAME>...]',
  or edit an existing compound command by typing 'edit <NAME>'.

  In its simplest (And probably most easiest to understand) form, a compound
  command simply holds a list of the commands (Each on a separate line) it
  should execute (In sequence, as though you typed them yourself on your
  keyboard) in its description, for example, the compound command 'gohome'
  could be described (Using the editor) as follows
  (E.g:  'edit command desc gohome')...

  :waves to all %p friends and heads off to %p home.
  home
  :wanders in from outside.

  On typing 'gohome', the above commands would be executed in sequence (As
  though you actually typed them yourself on your keyboard), making you
  emote '<YOUR NAME> waves to all %p friends and heads off to %p home.', then
  go home and then emote '<YOUR NAME> wanders in from outside.'

  PLEASE NOTE:  '%p' is a pronoun substitution string which returns 'his',
                'her' or 'its' appropriately depending on your gender  -
                See section on pronoun substitution strings for more details.

  The above is fine, but what happens if you wanted to make a compound command
  that takes a parameter and does something appropriate to whatever parameter
  it was given?

  The compound command system built into TCZ-based MUDs is very powerful and
  supports most features you'd expect to find in a high-level programming
  language, including flow control, 'If...Then...Else' selection, 'For' and
  'While' loops, variables, arrays, etc.  Other features include string,
  sentence and list processing, linked list processing and inheritance.

  DON'T WORRY if you're not a programmer, and just the thought of programming
  makes you shiver  -  The TCZ-based MUD's compound command system is designed
  to be easy for non-programmers to learn and use  -  There's no bewildering
  command set or programming language to learn;  You just simply use commands
  similar to the ones you've already used when chatting and exploring in the
  virtual world of the TCZ-based MUD.

  Now it's time to learn how to write slightly more complex compound
  commands...


  '{<COMMAND>}' (Substitute return result of <COMMAND>)...
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  '{<COMMAND>}' is used to execute the TCZ-based MUD command <COMMAND> and
  substitute its return result in place of the '{<COMMAND>}', e.g:  '@echo
  {@?name me}'  -  '@?name me' is executed first and the return result (Your
  name) is substituted in place of '{@?name me}' (Giving '@echo <YOUR NAME>'.)
  The '@echo' command simply echoes its parameters to your screen.

  Try typing '@echo {@?name me}' and watch what happens.  Now replace '@?name'
  with '@?desc' or '@?race'.  A command that starts with '@?' is called a
  QUERY COMMAND  -  See command lists near the beginning of this manual for
  the other query commands you can use.

  Commands in '{}'s can be nested, e.g:  '@echo {@?name {@?location me}}'.


  '$<NAME>' (Substitute contents of variable <NAME>)...
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  A '$' in a TCZ-based MUD is used to reference and substitute the contents
  of a variable (Either reserved ($0 - $9) or user defined (Which can be a
  temporary variable, property, variable or dynamic array element, e.g:
  '$myvariable'.))

  Please see section on variable substitution near the beginning of this
  manual for further information on how to substitute temporary variables,
  variables, properties, dynamic array elements, etc.

  Reserved variables ($0 - $9) are built into the TCZ-based MUD and are mainly
  used within compound commands.


  Variable:   What it substitutes:
  =============================================================================
  $0          Return result of last command executed.
  $1          First parameter given to compound command.
  $2          Second parameter given to compound command.
  $3          Both parameters (Including the '=') given to compound command.
  $4          The current loop value ('@for'/'@while'), or the item number
              currently being processed ('@with'.)
  $5          The total number of loops (Repetitions) so far ('@for'/'@while'),
              or the total number of items processed so far ('@with'.)
  $6          ('@with')  The name/#ID number of the object currently being
              processed or the contents/index name of the dynamic array
              element currently being processed.
  $7          ('@with')  The description of the object currently being
              processed or the index name/contents of the dynamic array
              element currently being processed.
  $8 - $9     Reserved for future development.
  =============================================================================


  Protecting '$'s, '{'s and '\'s...
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  You may have noticed that when you try to say something with a '{' or '\'
  in it, your message ends up with either '<UNKNOWN VARIABLE>', 'Error' or
  absolutely nothing substituted in place of where the '{' or '\' should have
  been.  This is because the TCZ-based MUD either tried to execute it as a
  command ('{') or took it as a protecting backslash ('\'.)

  To use a '{' or '\' in your spoken messages, etc. you must protect it
  with a backslash ('\'), e.g:  'say \{ = Curly bracket, \\ = Backslash.'
  Try typing this with and without the protecting backslashes and see
  what happens.

  When using the editor, '{'s and '\'s are NOT evaluated, which means you
  DON'T need to precede them with a protecting backslash.  This makes the
  editor especially ideal for writing compound commands.

  '$'s also need to be protected within compound commands, otherwise they
  will be looked up as the name of a variable.


  Compound command parameters...
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  When a compound command is executed, it can be given up to two parameters,
  separated with an equals sign ('='.)  The reserved variables $1, $2 and $3
  are used to return these parameters within the compound command, e.g:

  mycommand param1 = param2

  If the compound command 'mycommand' was executed as above, the first
  parameter ($1) would be set to the text 'param1' and the second ($2) would
  be set to 'param2'.  $3 would be set to 'param1 = param2' (Both parameters,
  including the '='.)


  Example...
  ~~~~~~~~~~
  Using the editor, create a compound command and describe it as follows...

  @echo Parameter 1 (\$1) is:  $1
  @echo Parameter 2 (\$2) is:  $2
  @echo Both parameters together (\$3) are:  $3

  (Note the use of protecting backslashes)  Now try executing this command,
  giving it a variety of parameters and watch what happens.  Try giving it
  a single parameter (E.g:  'hello') as well as two parameters
  (E.g:  'param1 = param2'.)


  Success and failure...
  ~~~~~~~~~~~~~~~~~~~~~~
  Every TCZ-based MUD command executed either succeeds or fails, returning an
  appropriate return result (In most cases, 'OK' (Command succeeded) and
  'Error' (Command failed.))

  The last command executed in a compound command determines whether the
  compound command succeeds or fails.

  If it succeeds, the compound command's success (Set using '@succ') and others
  success (Set using '@osucc') messages are displayed (If set) and the compound
  command that the csuccess (Set using '@csucc') is linked to is executed.

  If it fails, the compound command's failure (Set using '@fail') and others
  failure (Set using '@ofail') messages are displayed (If set) and the
  compound command that the cfailure (Set using '@cfail') is linked to is
  executed.


  Compound command basics...
  ~~~~~~~~~~~~~~~~~~~~~~~~~~
  edit command desc <COMMAND>   Creates new compound command called <COMMAND>
                                and lets you set its description (Commands it
                                will execute.)
  edit <COMMAND>                Lets you edit the description of <COMMAND>.

  @success <COMMAND> = <MESSAGE>    Displayed to user when compound command
  @failure <COMMAND> = <MESSAGE>    succeeds/fails.
  @osuccess <COMMAND> = <MESSAGE>   Displayed to other users in same room as
  @ofailure <COMMAND> = <MESSAGE>   user when compound command succeeds/fails.

  @csucc <COMMAND> = #<ID OF COMMAND TO EXECUTE WHEN COMP. COMMAND SUCCEEDS>
  @cfail <COMMAND> = #<ID OF COMMAND TO EXECUTE WHEN COMP. COMMAND FAILS>

  @lock <COMMAND> = <LOCK SPEC>     Locks the compound command so only users
                                    who satisfy its lock can execute it.

  @set <COMMAND> = DARK             Makes it so compound command CANNOT be
                                    executed by typing its name at the
                                    TCZ-based MUD's prompt (Useful for
                                    sub-compound commands, which should
                                    only be executed via the csuccess/cfailure
                                    of another compound command, '@if',
                                    '@with', etc.)


  Modulising compound commands...
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  When creating a compound command which consists of more than just a single
  compound command, you can teleport all the sub-compound commands (I.e:
  Those called via csuccess/cfailure, etc.) into the first compound command
  (I.e:  The one which users type the name of.)  This helps keep your compound
  commands neat and managable, and keeps all their related parts together in
  one place (You can also teleport variables, properties and dynamic arrays
  into the module.)  E.g:  '@tel mycommand.test = mycommand'.


  Further education...
  ~~~~~~~~~~~~~~~~~~~~
  The best way to learn how to write compound commands (Especially more complex
  ones) is to experiment.  If you haven't already got a BUILDER flag, which
  allows you to build things (Including compound commands), ask someone who's
  Admin to give you one (Type 'who admin' to see the names of currently
  connected Admin of the TCZ-based MUD.)

  If you get stuck writing a compound command, or need any help, don't hesitate
  to ask someone who's Admin or anyone else who's a Builder (Builders have 'B'
  in their flags on the 'who' list)  -  Most fellow Builders (Especially the
  more proficient ones) will be happy to help you out if no Admin are
  connected, or are currently very busy.

-------------------------------------------------------------------------------

  @contents (Or @count)
  ~~~~~~~~~~~~~~~~~~~~~
  USAGE:  @contents <OBJECT> [= <NAME>]
          @count <OBJECT> [= <NAME>]

  Displays the total amount of each different type of object that <OBJECT>
  contains (Characters, rooms, things, etc.)  The totals include objects
  carried by characters within <OBJECT> and the contents of rooms, things,
  etc. within <OBJECT>.

  If you're an Apprentice Wizard/Druid or above, you can specify the name of a
  character for the optional second parameter ('= <NAME>'.)  This has the
  effect of listing the contents totals of <OBJECT> in relation to the
  character <NAME> rather than yourself.

-------------------------------------------------------------------------------

  @continue
  ~~~~~~~~~
  USAGE:  @continue

  If used within the compound command executed by a fuse with its ABORT flag
  set, '@continue' will prevent the effects of the ABORT flag (I.e:  Prevent
  the fuse from aborting the command which triggered the fuse's execution.)

-------------------------------------------------------------------------------

  @controller  (Or @puppet)
  ~~~~~~~~~~~~~~~~~~~~~~~~~
  USAGE:  @controller <NAME> = <CONTROLLER>
          @puppet <NAME> = <CONTROLLER>

  This command can only be used by Apprentice Wizards/Druids and above.

  Sets the controller of the character <NAME> to the character <CONTROLLER>.

  When you're the controller of a character, you can '@force' them to do things
  and examine/modify/destroy most of the objects which belong to them.

  For any testing of compound commands/areas/building work you must use a
  hirable puppet from the Puppet Bank (Type 'puppet' to access this.)

  It is now advised that the desire for receptionists, bar tenders, waiters,
  shop keepers, etc. be fulfilled by using things, compound commands and fuses.

  Please note that puppets will now only be issued under extremely exceptional
  circumstances and where the possibility of other routes to meet your needs
  are ruled out totally.

-------------------------------------------------------------------------------

  @credit
  ~~~~~~~
  USAGE:  @credit <NAME> = <AMOUNT> = account|pocket = <REASON>

  This command can only be used by Apprentice Wizards/Druids and above.

  The '@credit' command adjusts the bank account ('account') or the credit
  in pocket ('pocket') of the character <NAME> to <AMOUNT> credits.  It's
  main use is to deal with users who have obtained credit by unfair means
  or users who have managed their money badly and got themselves into
  severe debt.

  Only Wizards/Druids and above may reduce the bank account or credit in pocket
  of a user.  Apprentice Wizards/Druids and above may raise the total credit
  of a user who has less than 100 credits to a maximum of 1000 credits.

  Elder Wizards/Druids and above may set the bank account or credit in pocket
  of a user to any positive value.

  A <REASON> in all cases must be given to use this command.  The bank account
  or credit in pocket of a user MUST NOT be altered unless you have good reason
  (I.e:  User has obtained credit by unfair means.)

  This is important, because improper use of this command (I.e:  Injecting
  excessive money into the system or taking it out) could ruin the entire
  monetry system and make it worthless.

-------------------------------------------------------------------------------

  @cstring
  ~~~~~~~~
  USAGE:  @cstring <OBJECT> [= <DESCRIPTION>]

  Sets (Or resets, if <DESCRIPTION> is omitted) an alternative contents
  string for a room or thing, which will be displayed instead of the standard
  'Contents:' when the room/thing has visible contents and is looked at.

  NOTE:  The maximum length for a contents string is 79 characters.


  Examples:
  ~~~~~~~~~
  @cstring desk = On the desk, you see:
  @cstring bed = Fast asleep in the bed, you see:
  @cstring here = Inside the room, you see:

-------------------------------------------------------------------------------

  @csucc
  ~~~~~~
  USAGE:  @csucc <COMMAND1> = <COMMAND2>

  Sets the csuccess branch of <COMMAND1> to <COMMAND2> if <COMMAND2> is
  specified, otherwise resets it.

  Each individual command in <COMMAND1> either returns success or failure
  when it's executed.  If the last command in <COMMAND1> returns success,
  the csuccess branch will be followed, and the compound command this is
  set to (If any) will be executed (<COMMAND2>.)

  If the csuccess branch of a compound command is set to 'HOME', the TCZ-based
  MUD will continue searching up the area-tree for another compound command
  with the same name as the compound command currently being executed and
  execute it.

-------------------------------------------------------------------------------

  @damage
  ~~~~~~~
  USAGE:  @damage <NAME> = <ACCURACY> <MIN DAMAGE> <MAX DAMAGE> <DELAY> <SCORE>

  This command can only be used from within a compound command with its
  COMBAT flag set, in a location which also has its COMBAT flag set.  Both
  must be owned by the same character.

  '@damage' attempts to damage the character <NAME>.  Whether it succeeds or
  not is determined by <ACCURACY>, which is a percentage (Out of 100.)  The
  lower this percentage, the more likely '@damage' will fail and return
  'MISS'.

  If '@damage' succeeds, the victim will lose a random amount of health
  between <MIN DAMAGE> and <MAX DAMAGE>.  If the victim survives, '@damage'
  will succeed and return 'HIT', otherwise the attacker will be awarded
  <SCORE> points, the victim will lose 2/3rds of <SCORE> from their current
  score and '@damage' will succeed and return 'KILL'.

  Whether '@damage' is successful or not, the attacker will not be able to
  fight again (I.e:  Use '@damage') for <DELAY> seconds.  When a character
  is still subject to a combat delay, '@damage' returns 'DELAY'.

  NOTE:  '@damage' cannot be used on yourself if you own the compound command
         or location in which it is used, or the character <NAME> is not in
         the same location as you.  These restrictions can be removed by
         setting WIZARD or ELDER flags on the combat commands respectively.

         Score is not awarded unless an APPRENTICE, WIZARD or ELDER flag
         is set on the compound command containing the '@damage' command.

         Battles won, lost and score are not updated if you are the owner
         of the compound command containing the '@damage' command.  This
         is to prevent the owner of a combat area from cheating to
         improve their performance or score.

         Combat can only take place in locations which have their COMBAT flag
         set and do not have their HAVEN flag set.


  Some of the parameters of '@damage' may be subject to restrictions,
  depending on flags set on the compound command(s):


                 COMBAT   APPRENTICE   WIZARD   ELDER
  Parameter:     flag:    flag:        flag:    flag:
  ===================================================
  <ACCURACY>     60       80           100      100
  <MIN DAMAGE>   50       75           100      1000
  <MAX DAMAGE>   50       75           100      1000
  <DELAY>        30       45           60       60
  <SCORE>        100      500          1000     10000
  ===================================================


  Return string:   Description:
  =======================================================================
  MISS             Attacker missed.
  HIT              Attacker hit victim, but victim didn't die.
  KILL             Attacker hit victim and killed them.
  DELAY            Attacker is still subject to combat delay.
  Error            Character <NAME> doesn't exist, isn't connected, isn't
                   in the same room, or no/invalid parameters given to
                   '@damage'.
  =======================================================================
  PLEASE NOTE:  $0 holds the return result of the last command executed.

-------------------------------------------------------------------------------

  @dateformat
  ~~~~~~~~~~~
  USAGE:  @dateformat [<CHARACTER> =] [long|short|time|separator] [= <FORMAT>]

  Not yet implemented.


  Code:  Description                                             Example
  ~~~~~  ~~~~~~~~~~~                                             ~~~~~~~
  d      Day of month without leading zero (1 - 31)              2
  dd     Day of month with leading zero (01 - 31)                02
  ddd    Day of month with leading space ( 1 - 31)                2
  D      Ranked day of month without leading zero (1st - 31st)   2nd
  DD     Ranked day of month with leading zero (01st - 31st)     02nd
  DDD    Ranked day of month with leading space ( 1st - 31st)     2nd

  e      Number of seconds since midnight, 1st January 1970.     96740872

  h      12-hour hour without leading zero (1 - 12)              7
  hh     12-hour hour with leading zero (01 - 12)                03
  hhh    12-hour hour with leading space ( 1 - 12)                3
  H      24-hour hour without leading zero (0 - 23)              23
  HH     24-hour hour with leading zero (00 - 23)                09
  HHH    24-hour hour with leading space ( 0 - 23)                9

  j      Day of year without leading zero (1 - 366)              34
  jj     Day of year with leading zero (001 - 366)               034
  jjj    Day of year with leading space (  1 - 366)               34

  m      Month without leading zero (1 - 12)                     8
  mm     Month with leading zero (01 - 12)                       08
  mmm    Month with leading space ( 1 - 12)                       8
  M      Abbreviated name of month (Jan - Dec)                   Aug
  MM     Full name of month (January - December)                 August

  n      Minute without leading zero (0 - 59)                    9
  nn     Minute with leading zero (00 - 59)                      09
  nnn    Minute with leading space ( 0 - 59)                      9

  p      Lowercase a/p.                                          a
  P      Uppercase A/P.                                          A
  pp     Lowercase am/pm.                                        pm
  PP     Uppercase AM/PM.                                        PM

  s      Second without leading zero (0 - 59)                    3
  ss     Second with leading zero (00 - 59)                      03
  sss    Second with leading space ( 0 - 59)                      3

  u      Day of week (0 - 6), 0 = Sunday.                        2
  U      Day of week (1 - 7), 1 = Sunday.                        3

  w      Week of year without leading zero (0 - 53)              8
  ww     Week of year with leading zero (00 - 53)                08
  www    Week of year with leading space ( 0 - 53)                8
  W      Abbreviated name of weekday (Sun - Sat)                 Tue
  WW     Full name of weekday (Sunday - Saturday)                Tuesday

  y      1-digit year (0 - 9)                                    1
  yy     2-digit year (00 - 99)                                  01
  yyy    3-digit year (000 - 999)                                001
  yyyy   4-digit year (0000 - 9999)                              2001

  Z      Server time zone.                                       GMT


  Examples:
  ~~~~~~~~~
  @dateformat long = W d M yyyy
  @dateformat short = mm/dd/yyyy
  @dateformat time = H:nn Z

-------------------------------------------------------------------------------

  @delay
  ~~~~~~
  USAGE:  @delay <NAME> = [+/-]<TIME>

  This command can only be used from within a compound command with its
  COMBAT flag set, in a location which also has its COMBAT flag set.  Both
  must be owned by the same character.

  '@delay' increases (Or decreases, if a negative <TIME> is specified) the
  character <NAME>'s combat delay by <TIME> seconds, and is ideal for
  creating 'stun' weapons, e.g:  '@delay *fred = 10' will increase the
  character "Fred"'s combat delay by 10 seconds.

  A character subject to a combat delay can't fight again (I.e:  Use
  '@damage') until their time of the delay has passed.

  NOTE:  '@delay' cannot be used on yourself if you own the compound command
         or location in which it is used, or the character <NAME> is not in
         the same location as you.  These restrictions can be removed by
         setting WIZARD or ELDER flags on the combat commands respectively.


-------------------------------------------------------------------------------

  @desc
  ~~~~~
  USAGE:  @desc <ARRAY>[<ELEMENT>] [= <TEXT>]
          @desc <OBJECT> [= <DESCRIPTION>]

  This command sets the description of <OBJECT> to <DESCRIPTION>.  If
  <DESCRIPTION> isn't specified, <OBJECT>'s description will be cleared.

  You see the description of the <OBJECT> when you (Or others) 'look' at it.

  The description of an exit is only seen when the exit is set OPAQUE.

  The description of a fuse is the value it counts down from (To zero.)

  The description of a compound command is the commands (On separate lines)
  that the compound command will execute.

  '@desc' can also be used to set the description (Or contents if you like) of
  dynamic array elements, e.g:  '@desc myarray[2] = some text' will set the
  description of the 2nd element of 'myarray' to 'some text' and '@desc
  myarray[test] = indexed element 'test'' will set the description of the
  element with the index name 'test' of 'myarray' to 'indexed element 'test''.

  You can set the description of more than one dynamic array element at once
  by using a range, e.g:  '@desc myarray[4..7] = some more text' will set the
  description of elements 4, 5, 6 and 7 of 'myarray' to 'some more text'.

  If the element(s) being described do not exist, they'll be created (Building
  quota used by each new element:  1.)  You can add new elements to the end
  of a dynamic array using the 'END' keyword, e.g:  '@desc myarray[END] = a
  new element' will add a new element to the end of the dynamic array
  'myarray' and set its description to 'a new element'.

-------------------------------------------------------------------------------

  @destall
  ~~~~~~~~
  USAGE:  @destall <NAME> = yes = <REASON>

  This command can only be used by Wizards/Druids and above.

  '@destall' destroys ALL objects owned by the character <NAME>, who must be
  a Mortal, Builder or Moron and set ASHCAN.

  The main use of '@destall' is to destroy all of the objects owned by a
  character who was set ASHCAN by character maintenance, and it should NEVER
  be used without first checking what objects the character owns (They could
  own public locations.)

  PLEASE NOTE:  Objects destroyed by '@destall' are destroyed PERMANENTLY and
                can't be recovered with the '@undestroy' command.

-------------------------------------------------------------------------------

  @destroy
  ~~~~~~~~
  USAGE:  @destroy <OBJECT> [= yes|permanent]
          @destroy <ARRAY>[<ELEMENT>]
          @purge <OBJECT> [= yes]

  This command destroys (Deletes) the specified <OBJECT> providing you own it,
  or are of a higher level than its owner, e.g:  '@destroy mything' will
  destroy the object 'mything'.  '@destroy <OBJECT> = yes' must be typed to
  destroy an object which you do not own.

  When you destroy an object, the amount of Building Quota used by it will
  be reimbursed to you.

  You should destroy objects which are useless, no-longer needed or unwanted,
  as this will reimbursed the Building Quota used for you to use on something
  else, free up space in the database and also helps to reduce its size, rate
  of expansion and the overall total amount of junk/useless objects in it.

  If you accidentally destroy an object (Or the wrong object), you can recover
  the destroyed object by using the '@undestroy' command.  Please see section
  on '@undestroy' for full details on how to do this.

  However, if a compound command of yours creates and destroys objects on a
  temporary basis (I.e:  Properties, variables or dynamic arrays), regular
  usage would result in the destroyed object queue (Which is a fixed size)
  becoming 'flooded' with objects which will never need to be recovered.

  For this reason, the '@purge <OBJECT>' or '@destroy <OBJECT> = permanent'
  commands are provided to destroy an object permanently without placing it
  on the queue.  However, the object must be yours, or owned by the owner of
  the compound command the '@purge' command is used within (Otherwise, the
  object will still be placed on the queue.)

  '@destroy' can also be used to destroy elements of a dynamic array, e.g:
  '@destroy myarray[2]' will destroy the 2nd element of the dynamic array
  'myarray' and '@destroy myarray[test]' will destroy the element with the
  index name 'test' of 'myarray'.

  A range of elements can be destroyed all in one go, e.g:  '@destroy
  myarray[4..7]' will destroy elements 4, 5, 6 and 7.  When you destroy
  element(s) of a dynamic array, they are removed from the array altogether.

-------------------------------------------------------------------------------

  @dolist  (OBSOLETE)
  ~~~~~~~
  USAGE:  @dolist <FROM ITEMNO> <TO ITEMNO> "<COMMAND>" "<SEPARATOR>"
          "<LIST>"

  '@dolist' starts at item number <FROM ITEMNO> in the list <LIST> and 
  continues going through (From left to right) until it reaches item number
  <TO ITEMNO>.  For each item in the list it processes, it executes the
  command '<COMMAND>'.

  <SEPARATOR> is the string used to separate the items in the list from each
  other.

  Just executing <COMMAND> for each item in the list isn't much use  -  You
  really need some sort of way of returning the item currently being
  processed.  As with '@with', this can be done by using the compound command
  parameter $6.  '$'s and '{'s must be prefixed with three backslashes
  ('\\\$6'), otherwise they will be evaluated before the '@dolist' is
  executed, returning absolutely nothing.

  The words 'FIRST' or 'LAST' can be used instead of a number for
  <FROM ITEMNO> and <TO ITEMNO>.  'FIRST' represents the first item
  in the list, and 'LAST' represents the last item in the list.


  Example ('pagelist' command):
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  @command pagelist;plist;pl = @dolist first last "page \\\$6 = \$2" ";" "\$1"

  (NOTE:  $1 and $2 don't need to be prefixed with three backslashes, because
          unlike $6, they remain constant throughout the whole compound
          command.)

  @fail pagelist = USAGE: pagelist <NAME>[;<NAME>][;<NAME>...] = <MESSAGE>

  ...Assume that Adversary, Ratty and UK1 are connected  -  You could page
  them with the message 'Hi!' by typing 'pagelist adversary;ratty;uk1 = Hi!'.

  There are two other compound command parameters that can be used in the
  <COMMAND> part of '@dolist'  -  These are $4 and $5...

  $4 returns the current item number being processed.
  $5 returns the total number of items processed so far.

  As with $6, these must be prefixed with three backslashes.


  Example:
  ~~~~~~~~
  @command dolisttest = @dolist 2 5 "@echo List item: \\\$6 - Current item
  number: \\\$4 - Total items processed: \\\$5." ";"
  "eggs;bacon;sausage;chips;mushrooms"

  If you now typed 'dolisttest', you'd see something like...

  List item: bacon - Current item number: 2 - Total items processed: 1.
  List item: sausage - Current item number: 3 - Total items processed: 2.
  List item: chips - Current item number: 4 - Total items processed: 3.
  List item: mushroom - Current item number: 5 - Total items processed: 4.

-------------------------------------------------------------------------------

  @drop
  ~~~~~
  USAGE:  @drop <OBJECT> [= <MESSAGE>]

  This command sets the drop message for the <OBJECT> specified.

  The drop message of a thing is displayed when a character drops the thing
  (After picking it up using 'take'), and is displayed on their screen only.

  The drop message of a room is displayed when a character drops a thing in
  that room, and is displayed on their screen only.

  The drop message of an exit is displayed to a character after they've gone
  through the exit and arrived in its destination room, and is displayed on
  their screen only.

  The drop message of a fuse is the value its description is reset to when
  it's ticked down to 0.

  The drop message of a compound command is not used, and can be freely used
  as a 'free' property for storing things in.

  If <MESSAGE> isn't specified, the drop message is cleared.


  When is the drop message displayed?
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  Room   -  Displayed when an object is dropped in room.

  Thing  -  Displayed when object is dropped.

  Exit   -  Displayed when a character goes through the exit and arrives in
            the exit's destination.

-------------------------------------------------------------------------------

  @dump
  ~~~~~
  USAGE:  @dump [restart|abort|email|forward]

  This command can only be used by Elder Wizards/Druids and above.

  '@dump' forcefully starts dumping the TCZ-based MUD's database to disk.
  The database is automatically dumped at regular intervals, so this command
  should only ever be used in an emergency (PLEASE NOTE:  The database is also
  automatically dumped when the TCZ-based MUD is shutdown.)

  If either of the parameters 'restart' ('@dump restart') or 'abort' ('@dump
  abort') are given, the current database dump will be aborted and (If
  'restart' is specified) restarted from scratch.

  '@dump email' dumps the private E-mail address of every character in the
  database to the file 'lib/email.tcz', and can only be used by Deities and
  the Supreme Being.  This file can then be processed externally with a script
  to send an important E-mail to every user (I.e:  If the TCZ-based MUD moves
  to a new site, for example.)

  NOTE:  The E-mail addresses of permanently banned characters are not dumped.

  '@dump forward' dumps the E-mail forwarding address of every character in the
  database to the file 'lib/forward.tcz', and can only be used by Elder
  Wizards/Druids and above.  This is done automatically on a daily basis, so
  this command should not need to be used.

-------------------------------------------------------------------------------

  @duplicate
  ~~~~~~~~~~
  USAGE:  @duplicate <OBJECT> [= <NEW NAME>] [= inherit]

  '@duplicate' creates a duplicate of the object <OBJECT>.  If <NEW NAME> is
  specified, the duplicate will be given that name, otherwise it will be
  given the name of the object it was duplicated from.

  If the optional parameter 'inherit' is given, the object will be duplicated
  so that it makes as much use of inheritance as possible, saving on memory
  usage.  The parent of the duplicated object is automatically set to the
  object it was duplicated from.

  The duplicated object will use the same amount of Building Quota as the
  object it was duplicated from, so you need sufficient Building Quota to
  duplicate the object.

  The duplicated object will be in the same place as the object was duplicated
  from (Apart from if the location of the object being duplicated is a
  character of the same or a higher level than yourself, in which case the 
  duplicated object will be attached to you.)

  NOTE:  '@duplicate' can't be used to duplicate characters, and DOESN'T
         duplicate the contents of objects.      

-------------------------------------------------------------------------------

  @echo
  ~~~~~
  USAGE:  @echo <MESSAGE>

  '@echo' is only of real use from within a compound command.  It basically
  echos <MESSAGE> to the command caller's screen (Or your screen if you
  type it in), e.g:

  @echo Only I will see this!

-------------------------------------------------------------------------------

  @echolist
  ~~~~~~~~~
  USAGE:  @echolist <ITEM NO> = <ITEM DESCRIPTION>

  '@echolist' is used to output lists with correct formatting, e.g:

  @echolist 1 = This is the first item in the list!

  ...Would display...

  (1)    This is the first item in the list!


  Example:
  ~~~~~~~~
  @with contents here do @echolist $4 = {@?name $6}

-------------------------------------------------------------------------------

  @else
  ~~~~~
  USAGE:  @else [<CONDITION> do]

  '@else' marks a 'block' of alternative commands to execute in an '@if'
  statement, if the <CONDITION> command fails (Or succeeds, if the keyword
  'false' is specified), e.g:

  @if {@?set me = neuter} do
      @echo You are neuter.
      @oemote suddenly realises that they're neutered.
  @else {@?set me = male} do
      @echo You are male.
      @oemote suddenly realises that %s's male!
  @else
      @echo You are female.
      @oemote suddenly realises that %s's female!
  @end

  '@else' statements may optionally be conditional (If a <CONDITION> command is
  specified.)  If the <CONDITION> command succeeds (Or fails, and the keyword
  'false' is specified), the following 'block' of commands will be executed.

  Each '@else' statement MUST be spread over multiple lines and terminated with
  '@end'.  '@else' and '@end' MUST NOT be preceeded by any text other than
  blank space, or used within {}'s (I.e:  '{@else ...}'.)  The 'do'
  keyword MUST NOT be followed by any text.

  PLEASE NOTE:  You can 'nest' further '@if', '@case', '@for', '@with',
                '@while' and '@foreach' statements (Both single and
                multiple lined) within an '@else' statement.

-------------------------------------------------------------------------------

  @end
  ~~~~
  USAGE:  @end

  '@end' is used to mark the end of a 'block' of commands executed by the
  multiple line formats of '@if', '@case', '@for', '@with', '@while' and
  '@foreach', e.g:

  @if {@?set me = haven} do
      @echo You will not receive any pages/tells as you're currently set HAVEN.
      @oemote is currently set HAVEN and can't be contacted via page or tell.
  @end

-------------------------------------------------------------------------------

  @email
  ~~~~~~
  USAGE:  @email [<NAME> =] public|private|<NUMBER> <EMAIL ADDRESS>
          @email [<NAME> =] public|private|<NUMBER> reset
          @email [<NAME> =] public forward

  The '@email' command is used to set your public and private E-mail addresses.


  Your private E-mail address
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  You must at least set your private E-mail address (Especially if you wish to
  obtain building privileges, which will allow you to build your own rooms,
  objects, areas, etc.)

  Your private E-mail address can only be seen by yourself and the
  adminstrators of the TCZ-based MUD, and will be kept STRICTLY CONFIDENTIAL.
  An anonymous or forwarding E-mail address (Widely available on the Internet)
  cannot be accepted as a valid private E-mail address.  Please set your
  private E-mail address to your REAL E-mail address.

  You can set your private E-mail address by typing '@email private <EMAIL
  ADDRESS>', for example, if your E-maill address is 'fred@wibble.wobble.com',
  you can set your E-mail to this address by typing '@email private
  fred@wibble.wobble.com'.

  If your private E-mail address is already set, you will not be able to change
  or reset it.  If it is incorrect, please ask an administrator to change it
  for you (Type 'who admin' for a list of currently connected administrators.)


  Your public E-mail addresses
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  In addition to your private E-mail address, you may set upto four public
  E-mail addresses, which other users will be able to see and use to contact
  you if they wish to do so.  Your public E-mail addresses will appear on
  your 'scan' and 'profile'.

  Unlike your private E-mail address, you may freely use anonymous or
  forwarding E-mail addresses for any of your public E-mail addresses.  You
  may also change or reset any of your public E-mail addresses as often as
  you wish.

  To set your first public E-mail address, simply type '@email public <EMAIL
  ADDRESS>', e.g:  '@email public fred@anonymous.email.com'.  To set your
  other public E-mail addresses, simply type '@email <NUMBER> <EMAIL ADDRESS>',
  where <NUMBER> is a number between 3 and 5 (1 is your first public E-mail
  address, and 2 is your private E-mail address), e.g:  '@email 3
  fred@email.forward.com'.

  To reset any of your public E-mail addresses, simply type '@email public
  reset' (To reset your first public E-mail address) or '@email <NUMBER>
  reset', where <NUMBER> is the number of the public E-mail address you wish
  to reset (A number between 3 and 5.)


  The E-mail forwarding facility...
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  If your private E-mail address is set correctly, you will also be able to
  take part in the E-mail forwarding facility built into most TCZ-based MUDs.

  This will give you an E-mail forwarding address along the lines of
  'tcz.user.name@tcz.mud.host'.  For example, if your name on the
  TCZ-based MUD was 'Fred Bloggs', your E-mail forwarding address
  would be 'fred.bloggs@tcz.mud.host'.

  If you do not wish to initially give your real E-mail address to other users,
  you can give them your forwarding E-mail address, through which they will be
  able to send an E-mail to you, without knowing your real E-mail address.

  By default, your first public E-mail address will be used as the destination
  for E-mail sent to your E-mail forwarding address.  However, you can
  alternatively use your private E-mail address instead, by typing '@email
  public forward'.  If you do this, you can disable it again by setting (Or
  resetting your first public E-mail address.)

  NOTE:  Your E-mail forwarding address will be your TCZ-based MUD character
         name (Excluding prefix/suffix) in lowercase with spaces replaced by
         '.'s, e.g:  'Fred Bloggs' will be 'fred.bloggs@tcz.mud.host',
         'JC Digita' will be 'jc.digita@tcz.mud.host', etc.

         For E-mail forwarding to work, your private E-mail address must be
         set.

         Please allow 24 hours for E-mail address changes to take effect (The
         E-mail forwarding database is updated once daily.)

  IMPORTANT:  When your E-mail forwarding address is available, it will appear
              in your 'scan' and 'profile'.  Please don't set any your E-mail
              addresses to your forwarding E-mail address (This excludes typing
              '@email public forward'), otherwise the forwarding may no-longer
              work.

-------------------------------------------------------------------------------

  @entrances
  ~~~~~~~~~~
  USAGE:  @entrances [#<ID>]

  Displays a list of rooms with exits which lead to the room/thing #<ID>, along
  with the exit name (As displayed if you typed 'look' in the room.)

  If #<ID> isn't specified, your present location is assumed.

-------------------------------------------------------------------------------

  @estring
  ~~~~~~~~
  USAGE:  @estring <OBJECT> [= <DESCRIPTION>]

  Sets (Or resets, if <DESCRIPTION> is ommited) an alternative obvious exits
  string for a room or thing, which will be displayed instead of the standard
  'Obvious exits:' when the room/thing has visible exits and is looked at.

  NOTE:  The maximum length for an obvious exits string is 79 characters.


  Examples:
  ~~~~~~~~~
  @estring here = Ways out of this room:
  @estring here = Other places you can visit:

-------------------------------------------------------------------------------

  {@eval}  ({@calc})
  ~~~~~~~~~~~~~~~~~~
  USAGE:  {@calc <EXPRESSION>}
          {@eval <EXPRESSION>}

  '{@eval}' returns the result of calculating <EXPRESSION>, which can be
  string, numeric or both.  Most standard comparison, arithmetic, logical
  and bitwise operators are supported (Including C programming language
  style ones.)

  The result returned by '{@eval}' is usually numeric when doing comparisons, 
  with '1' meaning TRUE and '0' meaning FALSE.  Within compound commands, 
  you will usually use '{@eval}' in conjunction with a selection command
  such as '@if'  -  The general format for this is '@if {@eval <EXPRESSION>}
  do <COMMAND>[; else <COMMAND>]'.

  Parentheses (Brackets) can be used to group subexpressions.  Precedence is
  STRICTLY LEFT-TO-RIGHT, e.g:  '@echo {@eval 3 * 5 - 1}' gives '14' and
  '@echo {@eval 3 * (5 - 1)}' gives '12' (You don't have to separate the
  operators with spaces, however it does look neater and more readable.)

  NOTE:  Enclose ALL string parameters in double-quotes (""), e.g:
         '@if {@eval "$1" = "Hello"} do ...'

         Don't enclose numeric parameters in double-quotes, or they'll be
         taken as strings, and numeric operations on them will fail.  E.g:
         '@if {@eval $1 = 15} do ...'


  Arithmetic operators:
  ~~~~~~~~~~~~~~~~~~~~~
  +   ##    Addition (Concatenates strings), e.g:
            @echo {@eval "Hello " + "world!"}
            @echo {@eval 2 + 2}         ...gives '4'.

  -         Subtraction.

  /   div   Division.

  *         Multiplication.

  %   mod   Modulus (Remainer of integer division), e.g:
            @echo {@eval 6 % 4}         ...gives '2'.

  ^   **    Raise to the power.
            @echo {@eval 2 ^ 8}         ...gives '256.0'.

     sqrt   Square root, e.g:
            @echo {@eval sqrt 4}        ...gives '2.0'.


      sin   Sine (In radians), e.g:
            @echo {@eval sin 2.3}       ...gives '0.7457052122'.

      cos   Cosine (In radians), e.g:
            @echo {@eval cos 2.3}       ...gives '-0.6662760213'.

      tan   Tangent (In radians), e.g:
            @echo {@eval tan 2.3}       ...gives '-1.1192136417'.

     asin   Arc sine (In radians), e.g:
            @echo {@eval asin 0.5}      ...gives '0.5235987756'.

     acos   Arc cosine (In radians), e.g:
            @echo {@eval acos 0.5}      ...gives '1.0471975512'.

     atan   Arc tangent (In radians), e.g:
            @echo {@eval atan 0.5}      ...gives '0.463647609'.


      abs   Absolute value, e.g:
            @echo {@eval 1 + (abs -3)}  ...gives '4'.
            @echo {@eval 1 + (abs 3)}   ...gives '4'.

      int   Converts from floating point to integer, e.g:
            @echo {@eval int 3.45}      ...gives '3'.

    float   Converts from integer to floating point, e.g:
     real   @echo {@eval float 2}       ...gives '2.0'.


  Logical operators:
  ~~~~~~~~~~~~~~~~~~
  &&  and   Logical AND, e.g:
            @echo {@eval 1 && 1}   ...gives '1'.
            @echo {@eval 1 and 0)  ...gives '0'.

  ||  or    Logical OR, e.g:
            @echo {@eval 1 || 0)   ...gives '1'.
            @echo {@eval 0 or 0)   ...gives '0'.

  !   not   Logical NOT, e.g:
            @echo {@eval !1}       ...gives '0'.
            @echo {@eval not 0}    ...gives '1'.


  Bitwise operators:
  ~~~~~~~~~~~~~~~~~~
  &         Bitwise AND, e.g:
            @echo {@eval 255 & 15}  ...gives '15'.

  |         Bitwise OR, e.g:
            @echo {@eval 16 | 32}   ...gives '48'.

  ~         Bitwise NOT, e.g:
            @echo {@eval ~1}        ...gives '-2'.

  <<  shl   Bitwise shift-left, e.g:
            @echo {@eval 2 << 1}    ...gives '4'.

  >>  shr   Bitwise shift-right, e.g:
            @echo {@eval 2 >> 1}    ...gives '1'.


  Comparative operators:
  ~~~~~~~~~~~~~~~~~~~~~~
  ==  =     Equal to, e.g:
            @echo {@eval "hello" = "hello"}   ...gives '1' (TRUE.)

  !=  <>    Not equal to, e.g:
            @echo {@eval "hello" <> "hello"}  ...gives '0' (FALSE.)

  <         Less than, e.g:
            @echo {@eval 10 < 50}             ...gives '1'.

  >         Greater than, e.g:
            @echo {@eval 5 > 1}               ...gives '1'.

  <=  =<    Less than or equal to, e.g:
            @echo {@eval 3 <= 10}             ...gives '1'.

  >=  =>    Greater than or equal to, e.g:
            @echo {@eval 10 >= 10}            ...gives '1'.


  NOTE:  '{@eval "hello" = "hello" = "hello"}' will not give '1' (TRUE)  -
         Why?  Well, it first compares "hello" with "hello", giving the
         result '1', and then compares '1' with "hello", giving '0' (FALSE.)
         (Remember that precedence is STRICTLY LEFT-TO-RIGHT.)


  Rounding floating point numbers to a number of decimal places...
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  Floating point numbers can be rounded to a number of decimal places by using 
  <DP>:<NUMBER>', where <DP> is the number of decimal places to round to, and
  <NUMBER> is the floating point number, e.g:  '@echo {@eval 2:3.4561}' gives
  '3.46'.

  You can round the result of an entire calculation to a given number of
  decimal places by doing '{@eval <DP>:(<EXPRESSION>)}', e.g:
  '@echo {@eval 3:(2.14523 + 1.78291 + 5.4382)}' gives '9.366'.


  Some '{@eval}'/'{@calc}' tips...
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  If you'd like to force the result of your calculation to be returned as an
  integer, you can do this by doing '{@eval int (<EXPRESSION>)}', e.g:

  @echo {@eval 2 + 1.3 ^ 7}           ...gives '4261.8438666261'.
  @echo {@eval int (2 + 1.3 ^ 7)}     ...gives '4261'.

  ...Likewise, you can force the result of your calculation to be returned as
  a floating point number by doing '{@eval float (<EXPRESSION>)}'.


  Using '{@eval}'/'{@calc}' within compound commands...
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  '@eval' within compound commands is usually used in conjunction with the
  '@if' command when performing comparisons, and '@echo' when you simply
  want to display the result of a calculation.


  Example:
  ~~~~~~~~
  @command evaltest = @if \{@eval "$3" = ""} do\
     @echo %c%lUSAGE: %g %l\{@?cmdname} <PARAMETERS>\
  @else\
     @echo %g%lYou gave me the parameter(s) '%w%l$3%g%l'.\
  @end

-------------------------------------------------------------------------------

  @execution (@executionlimit)
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  USAGE:  @executionlimit <LIMIT>
          @execution <LIMIT>

  Sets the execution time limit (In seconds) for a compound command.  The
  execution time limit is the maximum execution time allowed for the compound
  command and any other compound commands called from within it (The default
  execution time limit is 3 seconds.)  If the execution time limit is
  exceeded, execution of the current compound command will be terminated.


  The maximum execution time limits are as follows:
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  Mortal                      3 seconds
  Apprentice Wizard/Druid     5 seconds
  Wizard/Druid                5 seconds
  Elder Wizard/Druid          10 seconds
  Deity/the Supreme Being     60 seconds


  However, a compound command should never need an execution time limit of more
  than 3 seconds (Doing so will cause unexceptable lag.)  If it needs more than
  this, the compound command will need to be rewritten to make it more
  efficient.

-------------------------------------------------------------------------------

  @expiry
  ~~~~~~~
  USAGE:  @expiry <OBJECT> [= <TIME>]

  This command is used to set an expiry time (In days) on an object, or reset
  its expiry time.  TCZ-based MUD's will check the entire database for expired
  objects on a weekly basis (An object expires when its last used date is
  greater than the number of days allowed for the object's expiry time.)

  If <TIME> is specified, <OBJECT>'s expiry time will be set to that number of
  days, which may be any number between 1 and 255.  If <TIME> is omitted, the
  expiry time on <OBJECT> will be reset.

  By default, the expiry time of an object is based on its last used date, but
  if the EXPIRY flag is set on the object, the expiry time will be based on its
  creation date instead.  This means that the object will expire after the
  specified amount of time, regardless of whether its being used or not.

  A global expiry time will usually be set on the entire database, but this
  will usually be at least 1 year (The global expiry time will override any
  individual expiry times.)

  One of the major uses of expiry times is when object(s) are created by a
  compound command which is used by users (Creating individual objects each
  time.)  If a low expiry time (I.e:  7 days (1 week) or 30 days (Approx. 1
  month) is set on these objects, they will be quickly destroyed if they are
  no-longer being used, or have been dropped in an obscure location which will
  be rarely visited.

  For example, you have a shop where items can be bought (With the items being
  created and given to the 'customers'.)  As these items would have very little
  functionality, and would serve no other purpose other than to clutter the
  database up with useless objects (In time), a low expiry time could be set
  on the object when it is created, so if it is dropped somewhere obscure, or
  never looked at again by its purchaser, it will be destroyed automatically.

-------------------------------------------------------------------------------

  @fail
  ~~~~~
  USAGE:  @fail <OBJECT> [= <MESSAGE>]

  This command sets the failure message for the <OBJECT> specified.

  An object fails when a character fails to satisfy its lock (If it's a
  room, thing or exit), or if it's a compound command, it fails when the
  last command executed in it fails.

  If the object fails, the failure message is displayed on the screen of the
  character who caused it to fail.

  If <MESSAGE> isn't specified, the failure message is cleared.


  When is the failure message displayed?
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  Command  -  Displayed when the compound command finishes executing, and the
              last command executed failed (Not displayed if compound command
              has its '@cfailure' branch set.)

  Exit     -  Displayed when a character is unable to go through the exit,
              because they are unable to satisfy its lock (In same room as
              the exit.)

  Room     -  Displayed when the lock of the room is not satisfied and a
              character types 'look' (Underneath the room's description), or
              if the room has its OPENABLE flag set, it is displayed when a
              character is unable to enter the room because they do not
              satisfy its lock.

  Thing    -  Displayed when a character is unable to pick up the object,
              because they are unable to satisfy its lock.

-------------------------------------------------------------------------------

  @false
  ~~~~~~
  USAGE:  @false

  This command only has effect within a compound command.  It basically
  causes the compound command to fail at that point.

  One use for it is right at the end of a compound command to force it to
  fail and execute the compound command linked via its '@cfail' regardless 
  of whether the other commands executed failed or not.

  NOTE:  '@false' does not change the return value from the previous executed
         command.

-------------------------------------------------------------------------------

  @feeling
  ~~~~~~~~
  USAGE:  @feeling [<NAME> =] <FEELING>
          @feeling [<NAME> =] reset
          @feeling list [<PAGE NO>]

  The '@feeling' command allows you to set how you are currently feeling (From
  a list.)  Once set, users who 'scan' you will see your current feeling, and
  it will also be displayed after your name in the 'Contents:' list of your
  current location (I.e:  '*Fred Bloggs (Happy)'.)

  You can list the available feelings by typing '@feeling list'.  You can then
  set how you are currently feeling by typing '@feeling <FEELING>', where
  <FEELING> is one of the feelings in the list, e.g:  '@feeling happy'.

  If more than one page of feelings is displayed, you can view the other pages
  by typing '@feeling list <PAGE NO>', where <PAGE NO> is the page number, e.g:
  '@feeling list 2' to view the 2nd page, '@feeling list 3' to view the 3rd.

  You can remove your feeling by typing '@feeling reset'.

-------------------------------------------------------------------------------

  @find
  ~~~~~
  USAGE:  @find [<PAGE NO>] <SEARCH SPEC> = <WILDCARD SPEC>
          @find [<PAGE NO>] <WILDCARD SPEC>

  '@find' is used to search for and display objects which match a given
  search criteria and wildcard specification.

  If <PAGE NO> is specified, the list of objects will be split into pages and
  the specified page will be displayed (Useful for long lists.)

  <SEARCH SPEC> can be one or more of the following (In any order, separated
  by spaces)...

  (1)  A field name to search for <WILDCARD SPEC> in:

       areaname, cstring, desc, drop, email, estring, fail, lastsite, name,
       odesc, odrop, ofail, osucc, prefix, race, succ, suffix, title, www.

  (2)  An object type:

       alarms, arrays, characters, commands, exits, fuses, players (Same as
       characters), properties, puppets, rooms, things, variables.

  (3)  A standard TCZ-based MUD flag:

       abode, abort, ansi, apprentices, ashcan, assistants, bbs, bbs-inform,
       boot, builders, censored, consonant, dark, deities, druids, elders,
       engaged, experienced, expiry, females, friends-inform, haven, help,
       html, immovable, inheritable, invisible, listen, mail, males, married,
       morons, neuter, number, opaque, open, openable, pagebell, permanent,
       plural, private, quiet, readonly, readonlydesc, retired, secret,
       sendhome, sharable, shout, skipobjects, sticky, tom, tracing,
       transferable, transport, validated, visible, visit, vowel, warp,
       wizards, yell.

  (4)  administrators   Apprentice Wizards/Druids and above.
       banned           Characters banned from using the TCZ-based MUD.
       containers       Things which you can put other objects into.
       global           Global compound commands.
       junked           Objects which have been junked.
       mortals          Mortal characters.

  (5)  A creation date/last usage date specification (See below.)

  If <SEARCH SPEC> isn't specified (I.e:  When '@find' is used in the second
  form ('@find [<PAGE NO>] <WILDCARD SPEC>')), the name of any type of object
  is assumed (E.g:  '@find name = <WILDCARD SPEC>'.)


  Examples:
  ~~~~~~~~~
  @find *<TEXT>*                          Finds and lists every object (Of any
                                          type) that has <TEXT> in it's name.
  @find name desc = *<TEXT>*              Finds and lists every object that has
                                          <TEXT> in it's name OR description.
  @find abode rooms = *                   Finds and lists rooms set ABODE.
  @find things commands desc = *<TEXT>*   Finds and lists things and commands
                                          that have <TEXT> in their desc.


  Creation date/last usage date specificiations...
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  A creation date or last usage date specification (Or both used together) may
  be used to restrict the objects listed to those which were created and/or
  last used between specific dates.  The usage is as follows...

  &[c|l][<|>|<=|>=]<NUMBER>[s|m|h|d|w|m|y]
   |    |          |       `--->  s[econds], m[inutes], h[ours], d[ays],
   |    |          |              w[eeks], m[onths], y[ears]
   |    |          |
   |    |          `--->  Number of given time interval (I.e:  1w = 1 week.)
   |    |
   |    `--->  < lists objects created/last used BEFORE given date.
   |           > lists objects created/last used AFTER given date.
   |
   |
   `--->  c[reation] date.
          l[astused] date.

  The '&' marks the beginning of the creation date/last usage date
  specification.  This is followed by either 'c' (Creation date) or 'l' (Last
  usage date.)  This is then followed by '<' (Less than given time interval
  ago), '>' (Greater than given time interval ago), '<=' (Same as '<', except
  less than OR equal), '>=' (Same as '>', except greater than OR equal.)

  After '<', '>', '<=' and '>=', a time interval must be given, which is a
  number of seconds ('s'), minutes ('m'), hours ('h'), days ('d'), weeks
  ('w'), months ('m') or years ('y') ago from the present time/date.


  Creation date/last usage date specification examples:
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  &c<1w        Lists objects created BEFORE 1 week ago.
  &c>=1w       Lists objects created between now and 1 week ago.
  &c>=1y<=6m   Lists objects created between 1 year and 6 months ago.
  &l>=1d       Lists objects last used upto 1 day ago.


  About wildcards...
  ~~~~~~~~~~~~~~~~~~
  Wildcards may be used with '@find', '@with', '@site list' and '@reload', as
  well as any compound commands which make use of the '{@?wildcard}' query.
  They allow you to be more specific about what you'd like found, e.g:  '@find
  computer' will only find objects with the EXACT name 'computer', whereas
  '@find *computer*' will find all objects with the string 'computer' in their
  name.  There are two wildcard characters used in TCZ-based MUD's  -  These
  are '*' and '?'...

  The '*' wildcard represents ANY text at that point, providing the text to the
  left and/or right of the '*' is matched, e.g:  '*' on it's own will match ANY
  text, '*the*' will only match text which has the letters 'the' in it (In that
  order), 'an*' will only match text which BEGINS with the letters 'an' and
  '*er' will only match text which ENDS with the letters 'er'.

  You can use more than one '*' in a wildcard specification if you like, e.g:
  '*the*and*' will only match text which has the letters 'the' in it FOLLOWED
  by the letters 'and'.

  The '?' wildcard represents ANY single character at that point, e.g:  'room?'
  will match with 'room1', 'room6', 'rooma', 'roomf', etc.  PLEASE NOTE:  '?'
  CANNOT represent a blank character, e.g:  'room?' WILL NOT match with 'room'.

  If no wildcards are used, only text which EXACTLY matches the wildcard
  specification will be matched, e.g:  'this' will ONLY match to the EXACT
  text 'this'.

  The table below shows several example wildcard specifications, and what they
  match with from the list of words:  an, and, Andrew, ant, another, answer,
  exact, flatoutrunning, gamer, longrun, Matthew, panther, programmer, ran,
  run, runner, room1, room6, rooma, roomf, the, there, thesis, user...


  Wildcard spec:  Matches with (From above list of words)...
  ============================================================================
  exact           exact
  *the*           another, Matthew, panther, the, there, thesis
  an*             an, and, Andrew, ant, another, answer
  *er             another, answer, gamer, panther, programmer, runner, user
  *a*e*           Andrew, another, answer, gamer, Matthew, panther, programmer
  room?           room1, room6, rooma, roomf
  r?n             ran, run
  *r?n*           flatoutrunning, longrun, ran, run, runner
  ============================================================================


  HINT:  When performing searches with '@find' (Which uses wildcards), you
         can search for all occurrences of a given word or piece of text using
         '*<WORD>*' or '*<TEXT>*', e.g:  To find rooms with the word 'room'
         in their name, you could type '@find room name = *room*'.  Similarly,
         you could find objects (Things) with the word 'the' in their
         description using '@find thing desc = *the*'.

-------------------------------------------------------------------------------

  @for
  ~~~~
  USAGE:  @for <FROM VALUE> to <TO VALUE> [step <STEP VALUE>] do [<COMMAND>]
               [<COMMANDS>]
          [@end]

  The '@for' command can be used in two forms:  The first form may only be used
  on a SINGLE LINE.  '@for' starts at <FROM VALUE> and loops to <TO VALUE>,
  increasing/decreasing by 1 (Or <STEP VALUE>, if specified) each time and
  executing <COMMAND>.

  Example:  @for 3 to 7 do @echo Loop value:  $4

  The reserved variables $4 and $5 are useful in an '@for' statement  -  These
  substitute the following...

  $4 substitutes the current loop value.
  $5 substitutes the total number of loops so far.

  NOTE:  '@for' can only be used from within compound commands (Unless you're
         an Experienced Builder or above.)

  The second form of '@for' allows you to execute a 'block' of commands.

  When using '@for' in this form, it MUST be spread over multiple lines and
  terminated with '@end'.  '@for' and '@end' MUST NOT be preceeded by any
  text other than blank space, or used within {}'s (I.e:  '{@for ...}'.)
  The 'do' keyword MUST NOT be followed with a <COMMAND>.

  The usage of '@for' in this form is identical to the single lined version of
  '@for', except it is spread over multiple lines, e.g:

  @for 3 to 7 do
       @echo Loop value:  $4
       @echo Total loops so far:  $5
  @end

  PLEASE NOTE:  You can 'nest' further '@if', '@case', '@for', '@with',
                '@while' and '@foreach' statements (Both single and
                multiple lined) within a multiple line '@for' statement.

-------------------------------------------------------------------------------

  @foreach
  ~~~~~~~~
  USAGE:  @foreach [<GRP/RANGE>] "<SEPARATOR>" "<LIST>" do [<COMMAND>]
                   [<COMMANDS>]
          [@end]

  The '@foreach' command can be used in two forms:  The first form may only be
  used on a SINGLE LINE.  '@foreach' is used to process the items in a list (In
  left to right order), executing <COMMAND> for each item processed.

  <SEPARATOR> is the string used to separate the items in the list from each
  other.

  Example:  @foreach ";" "eggs;bacon;sausage;chips;mushrooms" do @echo Item:
            $6

  The reserved variables $4, $5 and $6 are useful in an '@foreach' statement  -
  These substitute the following...

  $4 substitutes the current item number in the list being processed (Most
     useful when using grouping/range operators with '@foreach'.)
  $5 substitutes the total number of items processed so far.
  $6 substitutes the item in the list currently being processed.

  NOTE:  '@foreach' can only be used from within compound commands (Unless
         you're an Experienced Builder or above.)

  The second form of '@foreach' allows you to execute a 'block' of commands.

  When using '@foreach' in this form, it MUST be spread over multiple lines and
  terminated with '@end'.  '@foreach' and '@end' MUST NOT be preceeded by any
  text other than blank space, or used within {}'s (I.e:  '{@foreach ...}'.)
  The 'do' keyword MUST NOT be followed with a <COMMAND>.

  The usage of '@foreach' in this form is identical to the single lined version
  of '@foreach', except it is spread over multiple lines, e.g:

  @foreach ";" "eggs;bacon;sausage;chips;mushrooms" do
           @echo Item:  $6
           @echo Item number:  $4
  @end

  PLEASE NOTE:  You can 'nest' further '@if', '@case', '@for', '@with',
                '@while' and '@foreach' statements (Both single and
                multiple lined) within a multiple line '@foreach' statement.


  [<GRP/RANGE>]
  ~~~~~~~~~~~~~
  Grouping/range operators may optionally be used with '@foreach' to process a
  given page or range of items in a list.  For example, you can process the
  first page of items in a list using '@foreach 1:default <SEPARATOR> <LIST>
  do ...' or process the 2nd to 5th items in a list using '@foreach 2-5
  <SEPARATOR> <LIST> do ...'

-------------------------------------------------------------------------------

  @force
  ~~~~~~
  USAGE:  @force <NAME> = <COMMAND>

  Forces the character <NAME> to execute the command <COMMAND> (As though they
  typed it themself.)  <NAME> must be yourself or your puppet (Unless you're
  a Wizard/Druid or above, who can force any character of a lower level to
  execute a given command.)

  When forcing a character on the command line (I.e:  Not within a compound
  command), you will see the resulting output of the '@force' (As the user
  would see on their screen, if connected.)

  NOTE:  All forces (With the exception of those on your puppet(s)) are logged
         to the 'Force' log file.

  NOTE:  Usage of '@force' within a compound command should be protected with
         the '{@?protect}' query command to prevent unwanted substitutions,
         which could pose a security risk to the character you are forcing
         (See topic on '{@?protect}' for further information.)

-------------------------------------------------------------------------------

  @fuse
  ~~~~~
  USAGE:  @fuse <NAME> [= <COMMAND>]

  Creates a fuse called <NAME> (Building Quota used:  5.)  If <COMMAND> is
  specified, the csuccess ('@csucc') of the fuse will be set to the compound
  command <COMMAND>.

  A fuse starts off attached to you (When you create it), but it can be
  attached to another character (Providing they're below your level) or
  a room, thing or exit (Use '@tel <FUSE> = <OBJECT>' to attach a fuse
  to an object.)  The conditions which cause a fuse to 'trigger' depend
  on the type of object it's attached to...

  CHARACTER:  The fuse 'triggers' each time the character types a command
              or moves.

    VEHICLE:  The fuse 'triggers' each time the vehicle is driven/riden.  If
              the vehicle can be entered and a character is inside it, the
              same conditions that apply to a room also apply to the vehicle.

      THING:  The fuse 'triggers' each time the thing is picked up, dropped
              or successfully opened, closed, locked or unlocked.  If the
              thing is a container, which can be entered, and a character is
              inside it, the same conditions that apply to a room also apply
              to the container.

       ROOM:  The fuse 'triggers' each time a character in the room types
              a command or moves.

       EXIT:  The fuse 'triggers' each time a character goes through the
              exit, or (In the case of OPENABLE exits) the exit is successfully
              opened, closed, locked or unlocked.

  Whenever a fuse is 'triggered', the value stored in its description ('@desc')
  counts down by 1.  If the resulting value is greater than 0, the compound
  command linked via the fuses cfailure ('@cfail') will be executed, otherwise
  the compound command linked via its csuccess ('@csucc') will be executed and
  the description of the fuse will be reset to the value held in its drop
  message ('@drop'.)

  You can make fuses attached to rooms/characters 'trigger' only when
  movement occurs (I.e:  When characters move into/out of the room, or the
  character the fuse is attached to moves) by setting the TOM flag on them
  (Which stands for 'Trigger On Movement'), e.g:  '@set <FUSE> = TOM'.

  You can delay the 'triggering' of a fuse until the command which the user
  who triggered it typed has finished executing by setting the STICKY flag
  on it (E.g:  A TOM and STICKY fuse in a room will not trigger until a
  character moves in that room and has arrived in their destination room.)

  When a compound command is executed by a fuse, $1 is set to the command
  the character who triggered the fuse typed (E.g:  'say') and $2 is set
  to the command's parameters (E.g:  'Hello'.)  $3 is set to both (E.g:
  'say Hello'.)

  Apprentice Wizards/Druids and above can set the ABORT flag on a fuse, which
  prevents the command which triggered the fuse from being executed.  For
  example, a fuse attached to a thing with its ABORT flag set would cause
  the fuse to trigger each time the object was picked up or dropped.  However,
  the 'take'/'drop' command would be aborted by the fuse, and the object would
  remain in the same place.  The '@continue' command can be used within the
  compound command executed by the fuse to prevent the effects of the ABORT
  flag.

  FUSES HINT:  After creating a fuse, teleport it to the object you want to
               attach it to first ('@tel <FUSE> = <OBJECT>') and then set
               its drop message (Reset) and description (Ticks.)  Finally
               link the '@csucc' and/or '@cfail' to the appropriate
               compound command(s).

-------------------------------------------------------------------------------

  @goto
  ~~~~~
  USAGE:  @goto [+/-] <LINE NUMBER>

  This command can only be used from within compound commands.

  '@goto' skips/backtracks to the given <LINE NUMBER> in the current compound
  command and continues execution from that line number.  <LINE NUMBER> can
  either be literal (E.g:  '@goto 2' will go to line number 2), or an
  adjustment (If '+' or '-' is used in front of <LINE NUMBER>), e.g:
  '@goto +2' will skip executing the next line in the compound command and
  execute the line which follows, and '@goto -1' will execute the previous
  line (WARNING:  This will create a loop), etc.


  Example (Compound command 'ring'):
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  @if {@eval "$1" <> "bell"} do @goto +3
  @echo You ring the bell...  DING-A-LING-A-LING!
  @return
  @echo What would you like to ring?

-------------------------------------------------------------------------------

  @heal
  ~~~~~
  USAGE:  @heal <NAME> = [+/-]<HEALTH>

  This command can only be used from within a compound command with its
  COMBAT flag set, in a location which also has its COMBAT flag set.  Both
  must be owned by the same character.

  '@heal' increases (Or decreases, if a negative value is specified for
  <HEALTH>) the character <NAME>'s health by <HEALTH> and is ideal for
  creating 'food', first-aid kits, poison, etc.  E.g:  '@heal *fred = 10'
  will increase the character "Fred"'s health by 10.

  Usually, a character's health can't exceed 100%, however preceeding
  <HEALTH> with a '+' (Which can only be used in a compound command set
  WIZARD or ELDER) allows the character's health to be increased to a
  value higher than 100%.  '+' is ideal for creating special health
  power-ups, etc.  Health above 100% automatically decreases back down
  to 100% at a rate similar to healing when below 100%.

  NOTE:  '@heal' cannot be used on yourself if you own the compound command
         or location in which it is used, or the character <NAME> is not in
         the same location as you.  These restrictions can be removed by
         setting WIZARD or ELDER flags on the combat commands respectively.

-------------------------------------------------------------------------------

  @homeroom
  ~~~~~~~~~
  USAGE:  @homeroom

  Creates/re-creates your home room, if you do not already have one, or you
  have accidentally destroyed it.

  If you are a Builder, you must have sufficient free Building Quota to create
  your home room.

  Once created, you can go to your home room by typing 'homeroom', 'home' (If
  your home room is your current home, or 'home' twice if not.)

  While you are in your home room, you can change its name by using the
  '@name' command, e.g:

     @name here = Fred's House

  You can also change the description, using the '@desc' command
  ('@describe'), e.g:

     @desc here = Welcome to my home room.  Feel free to make yourself at home.

  You can also use the editor to edit the description of your home room (This
  is useful for creating long descriptions, correcting mistakes or making
  changes without having to type the description all over again.)

  You can change the 'Contents:' title to something more interesting using
  the '@cstring' command, e.g:

     @cstring here = In the room you see:

  By setting the ABODE flag, you can allow other characters to visit your
  home room whenever they please (Using the 'visit' or 'to' commands,
  without you having to summon them using the 'summon' command), e.g:

     @set here = abode

  You can prevent them from doing this by resetting the flag, e.g:

     @set here = !abode

-------------------------------------------------------------------------------

  @if
  ~~~
  USAGE:  @if [true|false] <CONDITION> do [<COMMAND1>[; else <COMMAND2>]]
              [<COMMANDS1>]
          [@else [<CONDITION> do]]
              [<COMMANDS2>]
          [@else ...]
          [@end]

  The '@if' command can be used in two forms:  The first form may only be used
  on a SINGLE LINE.  By default, if <CONDITION> is met, <COMMAND1> will be
  executed, otherwise <COMMAND2> (The 'else' part) will be executed (If
  specified.)  If the keyword 'false' is specified, the '@if' is negated
  (I.e:  <COMMAND1> will be executed if <CONDITION> ISN'T met, otherwise
  <COMMAND2> will be executed (If specified.)

  Example:  @if {@?set me = haven} do @echo You are set HAVEN.; else @echo You
            are not set HAVEN.

  The second form of '@if' is far more flexible and sophisticated, allowing you
  to execute 'blocks' of commands, and have multiple conditional '@else' blocks
  (This effectively allows '@if' to be used like a 'case' statement (As found
  in many programming languages.))

  When using '@if' in this form, it MUST be spread over multiple lines and
  terminated with '@end'.  '@if', '@else' and '@end' MUST NOT be preceeded
  by any text other than blank space, or used within {}'s (I.e:  '{@if ...}'.)
  The 'do' keyword MUST NOT be followed with a <COMMAND>.

  The usage of '@if' in this form is identical to the single lined version of
  '@if', except it is spread over multiple lines, e.g:

  @if {@?set me = neuter} do
      @echo You are neuter.
      @oemote suddenly realises that they're neutered.
  @else {@?set me = male}
      @echo You are male.
      @oemote suddenly realises that %s's male!
  @else
      @echo You are female.
      @oemote suddenly realises that %s's female!
  @end

  In the above '@if' statement, you will notice that there are TWO '@else'
  parts.  This is a useful feature of the multiple lined version of '@if':
  In the above example, if you're not set NEUTER, it will then test to see if
  you're set MALE.  It's effectively the same as '@if {@?set me = neuter} do
  @echo You are neuter.; else @if {@?set me = male} do @echo You are male.;
  else @echo You are female.' (NOTE:  The '@oemote's are ommitted for
  simplicity and readability.)

  PLEASE NOTE:  You can 'nest' further '@if', '@case', '@for', '@with',
                '@while' and '@foreach' statements (Both single and
                multiple lined) within a multiple line '@if' statement.

-------------------------------------------------------------------------------

  @index
  ~~~~~~
  USAGE:  @index <ARRAY>[<ELEMENT>] [= <INDEX NAME>]

  If <INDEX NAME> is specified, the index name of element <ELEMENT> of the
  dynamic array <ARRAY> is set to <INDEX NAME>, otherwise the element's
  current index name is removed (If it has one.)

  If a range of elements is given, the index name of the first element in the
  range will be set/changed/removed.


  Examples:
  ~~~~~~~~~
  @index myarray[2] = test      Gives element 2 of 'myarray' the index name
                                'test'.
  @index myarray[test] = what   Changes the index name of element 'test' of
                                'myarray' to 'what'.
  @index myarray[what]          Removes the index name of element 'test' of
                                'myarray'.

-------------------------------------------------------------------------------

  @insert
  ~~~~~~~
  USAGE:  @insert <ARRAY>[<ELEMENT>] [= <TEXT>]

  This command inserts a new element into the dynamic array <ARRAY> in front
  of the element specified (Or range of elements specified), e.g:  '@insert
  myarray[2] = a new element' inserts a new element in front of the 2nd
  element of 'myarray' and describes it to 'a new element' and '@insert
  myarray[test] = a new element in front of indexed element 'test'' inserts
  a new element in front of the element with the index name 'test' of
  'myarray'.

  If no element is specified, the new element is inserted in front of the
  first element of the dynamic array.  If <TEXT> is specified, the
  description of the new element is set to it.

-------------------------------------------------------------------------------

  @key
  ~~~~
  USAGE:  @key <OBJECT> [= <KEY>]

  Sets (Or resets, if <KEY> isn't specified) the key required to lock/unlock
  (Using the 'lock' and 'unlock' commands) the container or vehicle <OBJECT>.

  <KEY> is specified in the same format as used for the '@lock' command (See
  section on '@lock' for full details.)


  Example:
  ~~~~~~~~
  @thing Old oak chest = A large, old oak chest.
  @thing Rusty key = An old rusty key, labelled 'Oak chest'.
  @set old oak chest = openable
  @key old oak chest = rusty key

  (In order to lock/unlock the chest, you must be holding the 'Rusty key'.)

-------------------------------------------------------------------------------

  @link
  ~~~~~
  USAGE:  @link <OBJECT> = <HOME OBJECT>
          @link <EXIT> = <DESTINATION>

  The first form ('@link <OBJECT> = <HOME OBJECT>') is used to set the home
  of a character or thing, or set the drop-to of a room.  You can set your
  home (Which is the room/container you return to when you type 'home') by
  typing '@link me = #<ROOM ID>'.

  If a thing has it's STICKY flag set, it will return to its home when dropped.
  The drop-to of a room is the location where all objects dropped in the room
  will be teleported to (If the room has its STICKY flag set, the drop-to will
  be delayed until there are no connected characters in the room.)
 
  The second form ('@link <EXIT> = <DESTINATION>') is used to set the
  destination of an exit, which must be a room or container.  If you're a
  Builder or above, you can link exits which don't belong to you (In doing
  this, you take over the ownership and Building Quota used by it.)

  You can unlink an exit or remove the drop-to of a room by using the
  '@unlink' command.

  Examples:  '@link me = #12345', '@link mything = #12345', '@link here =
             #12345', '@link myexit = #12345', etc.

-------------------------------------------------------------------------------

  @list
  ~~~~~
  USAGE:  @list [<PAGE NO>] <SEARCH ITEM> = <SEARCH SPEC>
          @list [<PAGE NO>] <SEARCH SPEC>

  '@list' is used to list objects of given type(s) that belong to you, the
  specified character, or are within the given object.

  If <PAGE NO> is specified, the list of objects will be split into pages and
  the page number specified will be displayed (Useful for long lists.)

  <SEARCH ITEM> can be one of the following...
  
  (1)  me        Lists objects belonging to you.

  (2)  #<ID>     Lists objects belonging to you that are within the object
                 #<ID> (I.e:  #<ID> should be a room or container.)

  (3)  *<NAME>   Lists objects belonging to the character <NAME>.

  (4)  all       Lists every object in the database (Of specified type(s).)

  <SEARCH SPEC> can be one or more of the following (In any order, separated
  by spaces)...

  (1)  An object type:

       alarms, arrays, characters, commands, exits, fuses, players (Same as
       characters), properties, puppets, rooms, things, variables.

  (2)  A standard TCZ-based MUD flag:

       abode, abort, ansi, apprentices, ashcan, assistants, bbs, bbs-inform,
       boot, builders, censored, combat, consonant, dark, deities, druids,
       elders, engaged, experienced, expiry, females, friends-inform, haven,
       help, html, immovable, inheritable, invisible, listen, mail, males,
       married, morons, neuter, number, opaque, open, openable, pagebell,
       permanent, plural, private, quiet, readonly, readonlydesc, retired,
       secret, sendhome, sharable, shout, skipobjects, sticky, tom, tracing,
       transferable, transport, validated, visible, visit, vowel, warp,
       wizards, yell.

  (3)  administrators   Apprentice Wizards/Druids and above.
       banned           Characters banned from using the TCZ-based MUD.
       containers       Things which you can put other objects into.
       global           Global compound commands.
       junked           Objects which have been junked.
       mortals          Mortal characters.

  (4)  A creation date/last usage date specification (See below.)

  The second form of '@list' ('@list [<PAGE NO>] <SEARCH SPEC>') is equivalent
  to typing '@list [<PAGE NO>] me = <SEARCH SPEC>'  -  In otherwords, it lists
  objects that belong to you (If you're a Mortal character, you'll probably
  use this form the most.)


  '@list' examples:
  ~~~~~~~~~~~~~~~~~
  @list things               Lists all things that belong to you.
  @list my container = all   Lists all objects that are within the object
                             'My container'.
  @list me = commands        Lists all commands that belong to you.
  @list all = elders         Lists all Elder Wizards/Druids (Can only be used
                             by Apprentice Wizards/Druids and above.)


  Creation date/last usage date specificiations...
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  A creation date or last usage date specification (Or both used together) may
  be used to restrict the objects listed to those which were created and/or
  last used between specific dates.  The usage is as follows...

  &[c|l][<|>|<=|>=]<NUMBER>[s|m|h|d|w|m|y]
   |    |          |       `--->  s[econds], m[inutes], h[ours], d[ays],
   |    |          |              w[eeks], m[onths], y[ears]
   |    |          |
   |    |          `--->  Number of given time interval (I.e:  1w = 1 week.)
   |    |
   |    `--->  < lists objects created/last used BEFORE given date.
   |           > lists objects created/last used AFTER given date.
   |
   |
   `--->  c[reation] date.
          l[astused] date.

  The '&' marks the beginning of the creation date/last usage date
  specification.  This is followed by either 'c' (Creation date) or 'l' (Last
  usage date.)  This is then followed by '<' (Less than given time interval
  ago), '>' (Greater than given time interval ago), '<=' (Same as '<', except
  less than OR equal), '>=' (Same as '>', except greater than OR equal.)

  After '<', '>', '<=' and '>=', a time interval must be given, which is a
  number of seconds ('s'), minutes ('m'), hours ('h'), days ('d'), weeks
  ('w'), months ('m') or years ('y') ago from the present time/date.


  Creation date/last usage date specification examples:
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  &c<1w        Lists objects created BEFORE 1 week ago.
  &c>=1w       Lists objects created between now and 1 week ago.
  &c>=1y<=6m   Lists objects created between 1 year and 6 months ago.
  &l>=1d       Lists objects last used upto 1 day ago.
 
-------------------------------------------------------------------------------

  @lock
  ~~~~~
  USAGE:  @lock <OBJECT> = <KEY>

  Locks <OBJECT> so that the lock specification <KEY> must be satisfied before
  the object can be used successfully.  <OBJECT> can be an Compound Command,
  Exit, Fuse, Thing or Room.

  A lock specification consists of one or more conditions, linked together
  using boolean operators such as AND/OR and parentheses () for grouping. 


  Conditions may be any of the following:
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  Characters  -  Only those specified will satisfy the lock specification, e.g:
  *<NAME>        '@lock JC Digita's Object = *jcdigita'

  Objects     -  Only characters carrying the specified object(s) will be able
  <NAME>         to satisfy the lock specification, e.g:  '@lock Lockable Exit
  #<ID>          = Key'

  Flags	      -  Only characters with the specified flag(s) set will be able
  @<FLAG>        to satisfy the lock specification, e.g:  '@lock Admin only
                 exit = @apprentice'


  Boolean Operators
  ~~~~~~~~~~~~~~~~~
  !  (NOT)  -  Reverse condition, e.g:  '@lock Box = !*JC Digita' will
               prevent JC Digita from picking up the object 'Box'.
            
  &  (AND)  -  Both conditions must be met to satisfy the lock, e.g:  '@lock
               Secure Exit = Key1&Key2' will prevent anyone going through it
               unless they are carrying the objects 'Key1' AND 'Key2'.

  |  (OR)   -  Either condition must be met to satisfy the lock, e.g:  '@lock
               Exit for Joe or Fred = *Joe|*Fred' will allow the users Joe
               OR Fred to go through the exit.


  Parentheses ()
  ~~~~~~~~~~~~~~
  Parentheses are used to group expressions, in a similar manner to arithmetic
  equations.  For example, if you wanted to make it so only male or female
  characters who are carrying the object 'Key' can pass through an exit, you
  would use '@lock Exit = (@male|@female)&Key' as the lock specification.


  How locks affect different types of objects
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  Command  -  A locked compound command can only be executed by characters who
              satisfy its lock, e.g:  '@lock AdminCmd = @apprentice' allows
              only Apprentice Wizards/Druids and above to execute the compound
              command 'AdminCmd'.

  Exit     -  A locked exit can only be used by characters who satisfy its
              lock, e.g:  '@lock Admin Exit = @apprentice' will only allow
              Apprentice Wizards/Druids and above to pass through the exit.

              Alternatively, if the exit has its OPENABLE flag set, the lock
              will determine who may open, close, lock and unlock the exit.
              While the exit is open, ANYBODY will be able to go through it,
              even if they don't satisfy the lock.  When using exits that can
              be opened, closed, locked and unlocked, it's worthwhile setting
              the STICKY flag on the exit too, so that it will automatically
              close and lock itself again once a user has gone through it.

  Fuse     -  A locked fuse will only be triggered by characters who satisfy
              its lock, e.g:  '@lock Test Fuse = *Fred' will make 'Test Fuse'
              trigger for the character 'Fred' only.

  Room     -  A locked room will determine who can see the room's success and
              failure messages.  This allows you to add extra information to
              the room's description based on whether the lock is satisfied or
              not, e.g:

              @lock here = Key
              @succ here = The way out is blocked by a large door with a
                 strong lock.  Perhaps you should try and find a key that
                 will open it.
              @fail here = The way out is blocked by a large door with a strong
                 lock.  Perhaps that key you picked up will open it?

              Alternatively, if the room has its OPENABLE flag set, the lock
              will determine who may enter the room, allowing you to keep
              unwanted characters out of it, even if it has its ABODE flag
              set.  For example, '@set here = !enterable' and '@lock here =
              !*Joe' will prevent the character 'Joe' from entering your
              current location.

              In this case, the success message will be displayed to characters
              who are able to successfully enter the room (The others succcess
              message is displayed to everyone else in the room.)

              The failure message is displayed to characters who are unable to
              enter the room (The others failure message is displayed to
              everyone else in their current location.)

  Thing    -  A locked thing can only be picked up by characters who satisfy
              its lock, e.g:  '@lock Fred's Object = *Fred' will only allow
              the character 'Fred' to pick up 'Fred's Object'.  You can
              prevent anybody from picking up an object by using 'me&!me'
              as the lock specification.


  Success/Failure messages
  ~~~~~~~~~~~~~~~~~~~~~~~~
  On compound commands, exits, things and rooms, the success and failure
  messages are displayed depending on whether the lock specification was
  satisfied or not.  These can be used to display appropriate messages to
  the user ('@succ' and '@fail') and other users in the same location
  ('@osucc' and '@ofail'.)

  For further information on success and failure messages, please see
  sections on '@succ', '@osucc', '@fail', '@ofail', '@drop' and '@odrop'.


  Examples:
  ~~~~~~~~~
  @lock entrance = !*fred
  @lock no exit = me&!me
  @lock builders and admin only = @BUILDER|@APPRENTICE
  @lock mycommand = me|*jc digita|*joe
  @lock female toilets = @FEMALE
  @lock xor thing = (thing1 & !thing2) | (!thing1 & thing2)

-------------------------------------------------------------------------------

  @log
  ~~~~
  USAGE:  @log [<LOGFILE>] [= reset|reopen]
          @log [<LOGFILE>] [= <PAGE>]
          @log list

  The '@log' command is used to view your own user log file, or the various
  system log files maintained by the TCZ-based MUD (This can only be done by
  Apprentice Wizards/Druids and above.)

  Every Builder and above has their own log file, which records when they
  connect/disconnect and unrecognised commands typed by users in their
  rooms/areas (Providing they are not of a higher level.)  Customised
  entries can also be written to the log file using '@logentry'.

  <LOGFILE> is the name of the log file to view.  If this is omitted, or 'me'
  is specified, your log file will be viewed.  '*<NAME>' or '#<ID>' can be
  specified to view the log file of another character (Providing you are of
  a higher level than them.)

  Any other name (Without '*' or '#' in front) will view the TCZ-based MUD's
  system log files, if you have permission to do so (Apprentice Wizards/Druids
  and above only.)  Type '@log list' to see a list of available system log
  files.

  If <PAGE> is omitted, the most recent entries are displayed, otherwise the
  log file is back-tracked by <PAGE> pages and entries from that page are
  displayed, e.g:  '@log admin = 1' back-tracks the 'Admin' log file by
  1 page and lists the entries on that page.

  You can reset your log file by type '@log = reset'.  Apprentice
  Wizards/Druids and above can reset the log file of a lower level character
  by typing '@log *<NAME> = reset' or '@log #<ID> = reset'.

  NOTE:  No backups are made of user log files.  If you reset your log file,
         you will lose everything that was logged in it permanently.

  Deities and the Supreme Being may reset a system log file of a TCZ-based
  MUD by typing '@log <LOGFILE> = reset' (The log file is moved to
  '<LOG FILENAME>.backup' and a new empty log file is created.)

  A log file may also be re-opened using '@log <LOGFILE> = reopen' (If it
  is normally kept open, such as the 'Connect' log file.)


  Log File:       Description:
  ~~~~~~~~~       ~~~~~~~~~~~~
  Admin           Usage of various Admin. commands.
  Assist          Assistance given to users who have requested it ('assist'.)
  Ban             Characters who have been banned ('@ban', '@banish'.)
  BBS             Usage of BBS (Deletion of messages, etc.) ('bbs'.)
  Boot            Characters who have been booted ('@banish'.)
  Bugs            Possible bugs detected by server or logged by users ('bug'.)
  Combat          Combat commands (Change of health, delay, etc.)
  Complaints      Complaints from users ('complain'.)
  Command         Log of executed commands, excluding user conversations.
                  (Supreme Being only.)
  Comments        Comments from users ('comment'.)
  Connect         Connection of existing characters.
  Create          Creation of new characters.
  Destroy         Destruction of objects/characters ('@destroy'.)
  Duplicate       Possible duplicate characters.
  Email           E-mail address changes ('@email'.)
  Emergency       Emergency command logging ('emergency'.)
  Execution       Execution/recursion limit exceeded.
  Flags           Set/reset of flags on characters and objects ('@set'.)
  Force           Characters forced to execute commands ('@force'.)
  Hack            Possible hacking by users.
  LogEntry        Details of custom log file entries ('@logentry'.)
  Maintenance     Results of character/object maintenance ('@maintenance'.)
  Miscellaneous   Miscellaneous log file entries.
  Monitor         Monitor placed on suspect character ('@monitor'.)
  Name            Character name changes ('@name'.)
  Options         Server start-up command-line options.
  Owner           Change of object ownership ('@owner'.)
  Password        Password changes ('@newpassword'.)
  Request         Requests for new characters ('@request'.)
  Research        Research log file (Supreme Being only.)
  Sanity          Results of database integrity checks ('@sanity'.)
  Server          Server start-up, shutdown and run-time messages.
  Shout           Shouted messages/announcements ('shout'.)
  Site            Registered Internet sites ('@site'.)
  Stats           Daily log of statistics ('@stats tcz'.)
  Suggestions     Suggestions from users ('suggest'.)
  Summon          Summoned characters ('summon'.)
  Termcap         Unrecognised terminal types.
  Transaction     Bank transactions ('bank'.)
  Warn            Official warnings ('warn'.)
  Welcome         Welcoming of new users ('welcome'.)

-------------------------------------------------------------------------------

  @logentry
  ~~~~~~~~~
  USAGE:  @logentry [<LOGFILE>] = <TITLE> = <ENTRY>

  The '@logentry' command is used to make custom entries to user and the
  TCZ-based MUD's system log files.  This can only be done from within a
  compound command.

  Every Builder and above has their own log file, which records when they
  connect/disconnect and unrecognised commands typed by users in their
  rooms/areas (Providing they are not of a higher level.)  Customised entries
  can also be written to the log file using '@logentry'.

  <LOGFILE> is the name of the log file to make a custom entry to.  If this
  is omitted, or 'me' is specified, the entry will be made to your log file.
  For a list of the TCZ-based MUD's system log files, type '@log list'.

  '*<NAME>' or '#<ID>' can be specified to make a custom entry to the log
  file of another character (To do this, you must have write permission to
  them, and the '@logentry' must be done under your '@chpid' within the
  compound command.)

  NOTE:  Custom entries can only be made to the TCZ-based MUD's system log
         files within a compound command with its WIZARD flag set, owned by
         an Apprentice Wizard/Druid or above and under their '@chpid'.

  <TITLE> is the title of the log file entry, which must not exceed 15
  characters in length, and may only consist of alphanumeric text.

  <ENTRY> is the text of the log file entry.

  NOTE:  ANSI colour and text formatting codes are stripped from all custom
         log file entries, and the <TITLE> is automatically capitalised.

  When viewing log files using '@log', custom entries appear with a yellow
  title enclosed in '[]', e.g:  '[TITLE]:'.

  Details of all custom log file entries made are logged to the 'LogEntry'
  log file (Unless you are making a custom entry to your own log file from
  within one of your compound commands.)


  Example:
  ~~~~~~~~
  @logentry me = MY TEST = This is a test entry in my log file.
  @logentry misc = TEST = This is a test entry in the 'Misc' system log file.
  @logentry *fred = FRED TEST = This a test entry in Fred's log file.

-------------------------------------------------------------------------------

  @maintenance
  ~~~~~~~~~~~~
  USAGE:  @maintenance bbs|characters|mail|objects|requests

  This command allows Deities and the Supreme Being to manually start
  BBS, character, mail, object or new character request queue maintenance.

  *  BBS maintenance removes messages which haven't been read for the time
     set in topics which have a time limit.
  *  Character maintenance destroys unused characters in the database.
  *  Mail maintenance deletes mail which hasn't been read for 50 days or more.
  *  Object maintenance destroys unused objects and junked objects in the
     database.
  *  New character request queue maintenance removes requests for new
     characters which have expired (28 days or more old.)

-------------------------------------------------------------------------------

  @mass
  ~~~~~
  USAGE:  @mass <OBJECT> = <VALUE>|inherit|infinity

  Sets the mass of <OBJECT> to <VALUE> kilograms.  If 'inherit' is specified
  for <VALUE>, <OBJECT>'s mass will be inherited from its parent object.

  Apprentice Wizards/Druids and above may also set the mass of an object to
  'infinity'.

-------------------------------------------------------------------------------

  @mexec
  ~~~~~~
  USAGE:  @mexec {<COMMAND>}[{<COMMAND>}][{<COMMAND>}...]

  '@mexec' is used to execute multiple commands within an alias.  It can also
  be used to execute multiple commands in a single-lined '@if', '@case',
  '@for', '@with', '@while' or '@foreach' statement.  However, it is much
  better and neater to use the multiple-lined versions of '@if', '@case',
  '@for', etc.)


  Example:
  ~~~~~~~~
  @alias gohome = @mexec \{@oemote %g%lheads back to %p home.}\{@tel me =
  \{@?destination}}\{@oemote %g%larrives in %p home.}\{@echo %g%lYou arrive
  in your home.}

-------------------------------------------------------------------------------

  @monitor
  ~~~~~~~~
  USAGE:  @monitor <NAME> = commands|output|both = <REASON>
          @monitor <NAME> = off

  This command allows Apprentice Wizards/Druids and above to monitor an
  abusive/problem user to obtain evidence and take appropriate action
  against them.

  When monitored, every command the user types will be logged to the 'Monitor'
  log file.  When the parameter 'commands' or 'both' is specified, every
  command typed by the user will also be relayed to the member of Admin
  monitoring them.

  If the parameter 'output' or 'both' is specified, all output (As seen by the
  monitored user, on their screen) will be relayed to the member of Admin
  monitoring them.  PLEASE NOTE:  Relayed output appears EXACTLY how it does
  on the monitored user's screen, so don't be surprised if you suddenly start
  saying things, sending pages, etc. (That is the monitored user speaking,
  paging, etc., NOT you.)

  You can stop a monitor on a user by typing '@monitor <NAME> = off'.

  Monitor starts/stops are logged to the 'Admin' and 'Monitor' log files,
  along with the reason(s).

-------------------------------------------------------------------------------

  @name
  ~~~~~
  USAGE:  @namelower <OBJECT> = <NAME>
          @name <OBJECT> = <NAME>

  Changes the name of <OBJECT> to <NAME>.  You must either control <OBJECT>
  or be of a higher level than its owner to change its name.

  You can use '@name' to change your name by typing '@name me = <NAME>'.

  '@namelower' allows an object with its article set (See section on articles)
  to be given a lower-case name, allowing an object to be called 'A television'
  instead of 'A Television' for example, if it had the CONSONANT article.

  '@namelower' cannot be used to change the name of a character.

  NOTE:  If you're changing your own name or that of another character, the
         name you give them must be 4 or more characters long (Unless you're
         an Elder Wizard/Druid or above, who can give a character any name.)

         When you change your name, you can't change it again for another 15
         minutes.  You must also wait for 15 minutes after connecting before 
         changing your name. 

-------------------------------------------------------------------------------

  [@]natter
  ~~~~~~~~~
  USAGE:  [@]natter <MESSAGE>
          [@]nat <MESSAGE>

  'natter' ('nat' for short) is a chatting channel reserved for administrators
  of the TCZ-based MUD only (Apprentice Wizards/Druids and above.)  Only
  administrators can receive messages sent over this Admin channel
  (Providing their QUIET flag isn't set, which blocks 'natter' messages.)

  Messages can be "posed" or "emoted" in the usual manner by placing a ':' in
  front of your message, and thoughts can be expressed by using '+'.

  '@natter' messages usually begin with '[DEITY]', '[ELDER WIZARD]',
  '[ELDER DRUID]', '[WIZARD]', '[DRUID]', '[APP. WIZARD]' or '[APP. DRUID]',
  depending on the status of the character sending the message.

-------------------------------------------------------------------------------

  @newpassword
  ~~~~~~~~~~~~
  USAGE:  @newpassword <NAME> = <NEW PASSWORD>

  '@newpassword' allows Apprentice Wizards/Druids and above to change the
  password of any character below their level.  This is useful if a character
  has forgotten their password, however, you should be absolutely certain
  of the user's identity before doing this.  Asking the user to E-mail you
  their preferred new password and checking this with the E-mail address of
  their character is one way to check.

  NOTE:  The new password must be 6 or more characters in length.

-------------------------------------------------------------------------------

  @notify
  ~~~~~~~
  USAGE:  @notify <NAME> = <MESSAGE>

  '@notify' notifies the character <NAME> with the message <MESSAGE>, who must
  be yourself, one of your puppets or a character who is on property you own.

  Wizards/Druids and above can notify any character, regardless of their
  present location.

-------------------------------------------------------------------------------

  @odesc
  ~~~~~~
  USAGE:  @odesc <OBJECT> [= <DESCRIPTION>]

  Sets the outside description of <OBJECT> to <DESCRIPTION>.

  The outside description (If set) of a room or thing is displayed when that
  room/thing is looked at from the outside (NOTE:  If a container is set
  OPENABLE and currently open, you'll see its normal (Inside) description
  ('@desc'.))

  When a room/thing with an outside description set is looked at from the
  inside, its normal (Inside) description (Set using '@desc') is displayed.

  If <DESCRIPTION> isn't specified, the outside description is cleared.

-------------------------------------------------------------------------------

  @odrop
  ~~~~~~
  USAGE:  @odrop <OBJECT> [= <MESSAGE>]

  This command sets the others drop message for the <OBJECT> specified.

  The others drop message of a thing is displayed when a character drops the
  thing (After picking it up using 'take'), and is displayed with the
  character's name in front on the screens of all characters in the same room.

  The others drop message of a room is displayed when a character drops a
  thing in that room, and is displayed with the character's name in front
  on the screens of all characters in the same room.

  The others drop message of an exit is displayed after a character has gone
  through the exit and arrived in its destination room, and is displayed
  with the character's name in front on the screens of all characters in
  the destination room.

  The others drop message of a compound command is not used, and can be freely
  used as a 'free' property for storing things in.

  PLEASE NOTE:  The character who causes the others drop message to be
                displayed WILL NOT see the others drop message.  Instead,
                they will see the drop message, if set.

  If <MESSAGE> isn't specified, the others drop message is cleared.


  When is the others drop message displayed?
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  Room   -  Displayed when an object is dropped in room.

  Thing  -  Displayed when object is dropped.

  Exit   -  Displayed when a character goes through the exit and arrives in
            the exit's destination.

-------------------------------------------------------------------------------

  @oecho
  ~~~~~~
  USAGE:  @oecho <MESSAGE>

  '@oecho' displays <MESSAGE> on the screens of every character in the same
  room as you (Apart from your screen), WITHOUT your name in front.

  You must either own the room you're in, or be a Wizard/Druid or above to
  '@oecho' a message.

-------------------------------------------------------------------------------

  @oemote
  ~~~~~~~
  USAGE:  @oemote <ACTION>

  '@oemote' is similar to 'emote', except it only displays the action (With
  your name in front) on the screens of other characters in the same room as
  you, e.g:

  @oemote won't see this message, but everyone else will.

-------------------------------------------------------------------------------

  @ofail
  ~~~~~~
  USAGE:  @ofail <OBJECT> [= <MESSAGE>]

  This command sets the others failure message for the <OBJECT> specified.

  An object fails when a character fails to satisfy its lock (If it's a
  room, thing or exit), or if it's a compound command, it fails when the
  last command executed in it fails.

  If the object fails, the others failure message is displayed with the
  character's name in front on the screens of every character in the same
  room as the character who caused it to fail.

  PLEASE NOTE:  The character who causes the others failure message to be
                displayed WILL NOT see the others failure message.  Instead,
                they will see the failure message, if set.

  If <MESSAGE> isn't specified, the others failure message is cleared.


  When is the others failure message displayed?
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  Command  -  Displayed when the compound command finishes executing, and the
              last command executed failed (Not displayed if compound command
              has its '@cfailure' branch set.)

  Exit     -  Displayed when a character is unable to go through the exit,
              because they are unable to satisfy its lock (In same room as
              the exit.)

  Room     -  Displayed when the lock of the room is not satisfied and a
              character types 'look' (Underneath the room's description), or
              if the room has its OPENABLE flag set, it is displayed when a
              character is unable to enter the room because they do not
              satisfy its lock.

  Thing    -  Displayed when a character is unable to pick up the object,
              because they are unable to satisfy its lock.

-------------------------------------------------------------------------------

  @open
  ~~~~~
  USAGE:  @open <NAME>[;<NAME>][;<NAME>...] [= <DESTINATION>]

  Creates an exit with the name(s) specified (Separated by semicolons (';'))
  (Building Quota used:  2.)

  The first name is the full descriptive name of the exit (E.g:  'An old
  wooden door') and is displayed in the 'Obvious exits:' list of the 
  room/container the exit's in.

  The second name should be a short, abbreviated name for the exit (E.g:  
  'wooden'.)  -  This is displayed in brackets after the full descriptive
  name in the 'Obvious exits:' list (E.g:  'An old wooden door (Wooden)'.)
  If your exit has 'out', 'back', 'exit' or 'leave' for one of its other
  names, this will used instead (They're standard.)

  Any other names given to the exit should be the ones you think users may
  try to type to go through the exit (E.g:  'An old wooden door;wooden;old;
  wooden door;an old;old wooden;old wooden door'.)

  If <DESTINATION> is specified (Which must be the #<ID> of a room or
  container), the exit is linked to that room/container.

  If <DESTINATION> isn't specified, the exit remains unlinked and can be
  linked using the command '@link'.  Unlinked exits can be linked by anyone
  (They become the new owner of the exit.)

  The name of the exit can be changed at any time using '@name'.

  There should be an exit in every room you build with the names 
  'out;back;exit;leave' in its name, which are the standard exit names for 
  leaving a room.  This exit should take you back to the room you expect to 
  end up in when you leave the room.

  By default, when an exit is created, you (And other users) will be able to
  see which room the exit leads to, e.g:

  A Spiral Staircase (Up) leads to The Tower Top.

  You can remove the 'leads to <DESTINATION>' part by setting the OPAQUE flag
  on the exit ('@set exit = OPAQUE'.)  This allows you to be more descriptive
  with your exit names, e.g:

  A winding spiral staircase to the top of the tower (Up)

  ('@set up = OPAQUE', '@name up = A winding spiral staircase to the top of
  the tower;up;spiral;staircase;stairs;winding;tower')

  By default, an exit is always open, and the characters who may go through the
  exit is determined by its lock (E.g:  '@lock <EXIT> = me|*fred' will only
  allow yourself and the character 'Fred' to go through the exit.)

  However, an exit can be set so it can be opened, closed, locked and unlocked
  (Just like a container), using the 'open', 'close', 'lock' and 'unlock'
  commands respectively.  The lock of an exit like this determines who may
  lock/unlock the exit, and/or what key they require to do so (I.e:  '@thing
  Large doorkey', '@lock exit = large doorkey'  -  Only characters holding
  the object 'Large doorkey' may lock/unlock the exit.)

  To make an exit so it can be opened, closed, locked and unlocked, you need to
  set its OPENABLE flag ('@set <EXIT> = openable'.)  You can also make it so
  the exit automatically closes after a character goes through it by setting
  its STICKY flag (E.g:  '@set <EXIT> = sticky')  -  If the lock of the exit
  is set, the exit will also be automatically locked again too.

-------------------------------------------------------------------------------

  @osucc
  ~~~~~~
  USAGE:  @osucc <OBJECT> [= <MESSAGE>]

  This command sets the others success message for the <OBJECT> specified.

  An object succeeds when a character manages to satisfy its lock (If it's
  a room, thing or exit), or if it's a compound command, it succeeds when
  the last command executed in it succeeds.

  If the object succeeds, the others success message is displayed with the
  character's name in front on the screens of every character in the same
  room as the character who caused it to succeed.

  PLEASE NOTE:  The character who causes the others success message to be
                displayed WILL NOT see the others success message.  Instead,
                they will see the success message, if set.

  If <MESSAGE> isn't specified, the others success message is cleared.


  When is the others success message displayed?
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  Command  -  Displayed when the compound command finishes executing, and the
              last command executed succeeded (Not displayed if compound
              command has its '@csuccess' branch set.)

  Exit     -  Displayed when a character goes through the exit (In the same
              room as exit.)

  Room     -  Displayed when the lock of the room is satisfied and a character
              types 'look' (Underneath the room's description), or if the room
              has its OPENABLE flag set, it is displayed when a character
              successfully enters the room.

  Thing    -  Displayed when object is picked up.

-------------------------------------------------------------------------------

  @output
  ~~~~~~~
  USAGE:  @output on|off

  This command can only be used from within a compound command.

  '@output' is used to turn output on or off within a compound command.  When
  output is turned off, the output from any command executed will not be
  displayed on the user's screen.


  Example:
  ~~~~~~~~
  @output off
  scan me
  @output on
  @echo I just scanned myself.

-------------------------------------------------------------------------------

  @owner (Or @chown)
  ~~~~~~~~~~~~~~~~~~
  USAGE:  @owner <OBJECT> = me|*<NAME>
          @owner *<NAME> = *<NAME>

  The '@owner' (Or '@chown') command is used to change the ownership of an
  object to yourself ('@owner <OBJECT> = me') or another character ('@owner
  <OBJECT> = *<NAME>'  -  You must be a Wizard/Druid or above to do this.)

  <OBJECT> must have its TRANSFERABLE flag set for you to be able to take over
  its ownership (Unless you're a Wizard/Druid or above.)  You must also have
  sufficient Building Quota, as the Building Quota used by the object will be
  transfered to you.

  The second form ('@owner *<NAME> = *<NAME>') can be used by Wizards/Druids
  and above to transfer all of a character's objects, mail and BBS messages/
  topics to another character.  As a safe-guard, the character must be set
  ASHCAN before this can be done.

-------------------------------------------------------------------------------

  @parent
  ~~~~~~~
  USAGE:  @parent <OBJECT> [= <PARENT>]

  If <PARENT> is specified, the parent object of <OBJECT> is set to the
  object <PARENT>, providing <OBJECT> is the same type as <PARENT>.  If
  <PARENT> isn't specified, <OBJECT>'s parent object is reset.

  Objects may only have one parent, but you can create chains of parent objects
  (Providing they don't create an endless loop (Which TCZ-based MUDs do not
  allow)), e.g:  '@parent object1 = object2', '@parent object2 = object3'  -
  If object1's description isn't set, it will be inherited from object2, but
  if object2 also doesn't have a description, object1's description will be
  inherited from object3.

  Fields on the object (Description, (o)success, (o)failure, (o)drop, areaname,
  contents string, etc.) are inherited from the parent object when they aren't
  set (E.g:  If the object has no description, it will be inherited from the
  parent object.)

  If the object isn't locked, its lock will be inherited from the parent object
  (If you don't want the object locked, but want the parent object locked,
  simply do '@lock object = me|!me' (This will have the same effect as not
  locking the object and will prevent the lock from being inherited.))  The
  lock key of a thing is inherited in the same way.

  The object's volume and/or mass may be inherited from the parent object by
  setting them to INHERIT (E.g:  '@volume <OBJECT> = inherit' and '@mass
  <OBJECT> = inherit'.)

  Object lists of the object's parent object are inherited, so objects in the
  contents list of the parent object will also appear in the contents list of
  the object's children, etc.  All object lists are inherited, including
  compound commands, exits, fuses, etc.

  PLEASE NOTE:  Object lists are inherited regardless of whether the object's
                various lists are empty or not.  For example, the object's
                commands list could contain compound commands actually
                attached to the object as well as compound commands inherited
                from the parent object.  Type 'examine <OBJECT>' to find out
                what's been inherited and from where.

  If a character is given a parent, the aliases of their parent will be
  inherited.  This works in the same way as object lists, so the character
  will not only have their own aliases, but also the aliases of their parent.
  Aliases of the parent character can't be modified or removed by the child.

-------------------------------------------------------------------------------

  @partner
  ~~~~~~~~
  USAGE:  @partner [engage|marry|divorce] <NAME1> [= <NAME2>]

  This command can only be used by Apprentice Wizards/Druids and above.

  It allows two characters to be first engaged to each other, then subsequently
  married.  It also allows engaged or married couples to be divorced.

  The first step in marriage is to become engaged to another character.  You
  can then ask a member of Admin to engage you to this character.  They can
  do this by typing '@partner engage <NAME1> = <NAME2>', where one name is
  yours, and the other is your partner.

  The next step is to propose to your partner, after which (If successful), you
  can ask a member of Admin to marry you and your partner (A wedding ceremony
  will usually be held.)  They can do this by typing '@partner marry <NAME1>
  = <NAME2>'.

  If you no-longer wish to be engaged to your partner, or your marriage doesn't
  go quite as planned, you can ask a member of Admin to divorce you and your
  partner.  They can do this by typing '@partner divorce <NAME>', where <NAME>
  is either your name, or your partners (It doesn't matter which.)

  Once married, 'Mr'/'Mrs' (Appropriately) will be added to your name prefixes
  (Unless either you or your partner's gender is neuter.)  Engaged/married
  characters appear in the 'Contents:' list of their location with '(Engaged)'
  or '(Married)' after their name.  The character who they are engaged/married
  to is also shown to users who 'scan' them.


  Examples:
  ~~~~~~~~~
  @partner engage fred bloggs = joanne bloggs
  @partner marry fred bloggs = joanne bloggs
  @partner divorce fred bloggs

-------------------------------------------------------------------------------

  @password
  ~~~~~~~~~
  USAGE:  @password

  '@password' allows you to change your password.

  It's strongly recommended that you change your password from time to time
  to prevent unauthorised access to your character.  If someone manages to
  connect with your character, they're more than likely to do malicious
  things with it/to everything you've worked so hard to build.

  NOTE:  Your password must be 6 or more characters long.

-------------------------------------------------------------------------------

  @pending
  ~~~~~~~~
  USAGE:  @pending [<PAGE NO>] [<NAME>] [= <OBJECT TYPE>]

  Lists current pending events (In order of execution time.)  Pending events
  include alarms and triggered STICKY fuses.

  By default, only alarms will be listed.  If <OBJECT TYPE> is specified,
  events of the specified object type will be listed (I.e:  '@pending = fuses'
  will list current pending STICKY fuses.)  'all' can also be specified to list
  all current pending events.

  If <PAGE NO> is specified, that page of events will be displayed, e.g:
  '@pending 1', '@pending 2', etc.

  If <NAME> is specified, only events matching <NAME> will be listed (I.e:
  '@pending myevent' will list events with the text 'myevent' in their name.)

-------------------------------------------------------------------------------

  @prefix
  ~~~~~~~
  USAGE:  @prefix <NAME> = <PREFIX>

  This command can only be used by Apprentice Wizards/Druids and above.

  Sets the name prefix of the character <NAME> to <PREFIX>.  The name prefix
  of a character is added in front of their name, e.g:  '@prefix me = Warrior'
  would add 'Warrior' to the front of your name, i.e:  'Warrior Fred Bloggs'.

  NOTE:  A name prefix mustn't contain embedded NEWLINE's, and also mustn't
         be longer than 40 characters.

-------------------------------------------------------------------------------

  @profile
  ~~~~~~~~
  USAGE:  @profile [<NAME> =] <FIELD> [<SETTING>]
          @profile reset [yes]

  Every character on a TCZ-based MUD has a profile.  You can use your profile
  to set detailed information about yourself, which other users can view (By
  using the 'profile' command) to find out more about you.

  The '@profile' command is used to set/reset the various fields available on
  your profile.  <FIELD> is the field to set, from the list below (I.e:
  'realname' will set your real name, 'hobbies' will set your hobbies, etc.)
  <SETTING> is the new setting for the field (If this is omitted, the field
  will be reset), e.g:  '@profile realname Fred Bloggs', '@profile country
  England', '@profile eyes brown', etc.

  <FIELD> can be one of the following:

  Achievements, birthday, city, comments, country, dislikes, drinks, email,
  eyes, foods, gender, hair, height, hobbies, interests, likes, miscellaneous,
  music, nationality, occupation, other, picture, qualifications, realname,
  sex, sexuality, sports, statusirl, statusivl, weight, www.

  You can reset all the fields on your profile in one go by typing '@profile
  reset [yes]'.  NOTE:  All fields on your profile will be reset PERMANENTLY
  -  You will not be able to retrieve them once they have been reset.

  If <NAME> is specified, and you're an Wizard/Druid or above, <FIELD> on the
  character <NAME>'s profile will be set/reset.

  PLEASE NOTE:  You don't need to set ALL of the fields available on your
                profile  -  Just set the ones which are relevant to you.

                Height can be set in either METRES/CENTIMETRES (E.g:  1m 96cm)
                or FEET/INCHES (E.g:  5' 8")

                Weight can be set in either KILOGRAMS/GRAMS (E.g:  75Kg 100g)
                or POUNDS/OUNCES (E.g:  158lbs 3oz)

                Birthday is in DAY, MONTH, YEAR format, i.e:  '28/11/1994',
                '28th November 1994', etc.

                Picture is the URL of a picture you have of yourself on the
                World Wide Web.  E.g:

                http://www.wibble.wobble.com/~fred/me.jpg

-------------------------------------------------------------------------------

  @prompt
  ~~~~~~~
  USAGE:  @prompt <PROMPT> = <PROCESS CMD> = <SUCC CMD> [= <ABORT CMD>]

  Starts an 'interactive' prompt session.  Basically, the user will be
  presented with the prompt <PROMPT>.  When they type something and press
  RETURN, the compound command <PROCESS CMD> will be executed, with what the
  user typed as its parameters.

  If <PROCESS CMD> fails (E.g:  '@return false'), the user will again be
  presented with <PROMPT>, and the process repeated.  However, if <PROCESS CMD>
  succeeds, the compound command <SUCC CMD> will be executed, and the
  interactive '@prompt' session will end.

  If the user types 'ABORT' during an interactive '@prompt' session, it will be
  aborted, and the compound command <ABORT CMD> will be executed (If
  specified.)

  During an interactive '@prompt' session, the user may still use the On-Line
  Help System in the usual way, and can execute TCZ-based MUD commands by
  typing '.<COMMAND>' (In a similar way to that used in 'converse' mode), e.g:
  '.tell <NAME> [=] <MESSAGE>'.

  Some example uses of '@prompt' are:  Menu systems, interactive tutorials/
  questionaires, etc.

-------------------------------------------------------------------------------

  @property
  ~~~~~~~~~
  USAGE:  @property <NAME> [= <INITIAL SETTING>]

  Creates a property called <NAME> attached to yourself (Building Quota used:
  1.)  If <INITIAL SETTING> is specified, the description of the property is
  set to that.

  Properties only have a description (Rather than all 8 standard fields),
  saving DB space and memory.  Because of this, properties use less building
  quota than variables.

  You can attach a property to almost any other object (As long as you
  own/control it) by using 'drop' or '@tel'.  You can even drop properties 
  within properties.

  When a property is on yourself, you can substitute it into any text you're
  typing by typing '$' followed by the name of the property (E.g:  '$myprop'
  would substitute the description of the property 'Myprop'.)

  To reference properties attached to anything else other than yourself, you
  must use '#<ID>:<PROPERTY NAME>', e.g:  If I had a property called 'store'
  attached to a thing called 'Cabinet' with the ID #12345, I could reference
  that property using '#12345:store', e.g:  To set the property's description,
  I'd type '@desc #12345:store = <DESCRIPTION>'.

-------------------------------------------------------------------------------

  @quota
  ~~~~~~
  USAGE:  @quota [<NAME>]

  Displays a Building Quota summary for yourself (Or the character <NAME>,
  if <NAME> is specified and you're an Apprentice Wizard/Druid or above.)
  This command is very handy for finding out what your Building Quota is used
  on, and more importantly, which type of object is using the most of it.

  If you're an Apprentice Wizard/Druid or above, you can use '@quota
  initialise' to re-initialise the Building Quota in use for all characters
  in the database (NOTE:  This is done on start-up, so there should be no
  need for you to use this command.)

-------------------------------------------------------------------------------

  @quotalimit
  ~~~~~~~~~~~
  USAGE:  @quotalimit <NAME> = <AMOUNT> = <REASON>

  This command (Which can only be used by Apprentice Wizards/Druids and above)
  is used to change the Building Quota limit of a character.

  Apprentice Wizards/Druids can't set Building Quota limits higher than 500.
  Wizards/Druids can't set Building Quota limits higher than 1000.
  Elder Wizards/Druids and above are unrestricted.

-------------------------------------------------------------------------------

  @race
  ~~~~~
  USAGE:  @race [<NAME> =] <RACE>
          @race [me =] <RACE>

  '@race' is used to set your race ('@race <RACE>') or the race of another
  character ('@race <NAME> = <RACE>'), if you're a Wizard/Druid or above.

  Other characters see what race you are when they 'scan' you.

  The maximum length of your race is 50 characters.  You can use text colour
  substitutions in your race, if you wish.


  Examples:
  ~~~~~~~~~
  @race Human
  @race Alien

-------------------------------------------------------------------------------

  @rank
  ~~~~~
  USAGE:  @rank [<PAGE NO>] [<ORDER>] [<DIR>] [= <NAME>|admin|friends|enemies]

  The '@rank' command ranks every user or object in the database by given
  criteria, using efficient internal sorting algorithms.

  <ORDER> is the order of the ranking, which can be one of the following:

     active        Rank by total time spent active.
     avgactive     Rank by average time spent active.
     avgidle       Rank by average time spent idling.
     avglogins     Rank by average time between logins.
     avgtotal      Rank by average time connected.
     balance       Rank by bank balance.
     battles       Rank by total number of battles fought (Won + lost.)
     created       Rank by creation time/date.
     credit        Rank by credit in pocket.
     csize         Rank by compressed database memory usage (Admin. only.)
     expenditure   Rank by expenditure.
     idle          Rank by total time spent idling.
     income        Rank by income.
     lasttime      Rank by last time connected (Like 'lastseen'.)
     lastused      Rank by time/date last used.
     logins        Rank by total number of logins.
     longest       Rank by longest time connected (Like 'longspod'.)
     lost          Rank by number of battles lost.
     performance   Rank by combat performance.
     profit        Rank by profit.
     quota         Rank by Building Quota currently in use (Admin. only.)
     quotaexcess   Rank by exceeded Building Quota limits (Admin. only.)
     quotalimits   Rank by Building Quota limit (Admin. only.)
     total         Rank by total time connected (Like 'spod'.)
     score         Rank by score.
     size          Rank by database memory usage (WARNING:  To do this, the
                   TCZ-based MUD must decompress every object in the entire
                   database, which may cause excessive 'lag'.  This option
                   is restricted to Elder Wizards/Druids and above only.)
     won           Rank by number of battles won.

  <DIRECTION> is the direction of sorting, which can be either 'ascending' or
  'descending'.  If this is omitted, 'descending' is assumed by default.

  By default, the first page of users/objects will be displayed.  However, if
  <PAGE NO> is specified, that page of users/objects will be displayed, e.g:
  '@rank 2 ...' to display the 2nd page, '@rank 3 ...' to display the 3rd,
  etc.  For example, '@rank 2 longest'.

  '@rank' ranks every user/object in the database by default, however you can
  rank your friends list by typing '@rank ... = friends' or '@rank ... =
  enemies', and rank current administrators of the TCZ-based MUD by typing
  '@rank ... = admin'.  For example, '@rank longest = friends'.

  You can see the position of an individual user/object by typing '@rank ... =
  <NAME>', e.g:  '@rank ... = me' will tell you where you are in the list (Out
  of all of the other characters in the database) and '@rank ... = fred bloggs'
  will tell you where the user 'Fred Bloggs' is in the list.  For example,
  '@rank longest = me'.

  You can also list users in a given range of positions by typing '@rank
  <FROM>-<TO> ...', e.g:  '@rank 100-150 longest' will list users in the
  positions 100 to 150 (Ranked by longest connect time.)


  Rank by object type
  ~~~~~~~~~~~~~~~~~~~
  Explicit object types can be specified for the following orders of ranking:

     created    Creation time/date.
     credits    Amount of credits in location, or for a character, their
                total credit in pocket and bank balance.
     csize      Compressed database memory usage (Admin. only.)
     lastused   Time/date last used.
     size       Uncompressed database memory usage (Admin. only.)

  You can rank all objects of one or more type(s), by specifying the object
  type(s) after 'credits', 'csize' or 'size' in a list separated by commas
  (','), e.g:  '@rank csize,arrays' will rank and list all dynamic arrays
  in the database by compressed memory usage.

  Ranking objects is an ideal way to check for individual objects (Especially
  dynamic arrays) which are using an excessive amount of memory unnecessarily,
  or locations containing an excessive amount of credits.
 
  Multiple types may be specified, i.e:  '@rank csize,things,rooms'.

  Types can be any of the following:  alarms, all, arrays, characters,
  commands, exits, fuses, properties, puppets, rooms, things, variables.

  When ranking objects in the above manner, <NAME> can be specified to see
  the position of an individual object in the list.  However, if the object
  is not in your current location, you will need to specify its #ID number
  instead of its name.


  Extra options for '@rank expenditure', '@rank income' and '@rank profit'...
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  When ranking characters by expenditure, income or profit, you can rank by
  average per day, week or month instead of total for the quarter.  To do this,
  simply follow 'expenditure', 'income' or 'profit' by '/day', '/week' or
  '/month' to rank characters by average expenditure, income or profit per
  day, week or month respectively.


  PLEASE NOTE:  Only Apprentice Wizards/Druids and above can rank characters
                by their Building Quota in use ('quota') or Building Quota
                limit ('quotalimit'.)

                Ranking users by Building Quota in use/Building Quota limit is
                provided to aid administrators with managing and maintaining
                Building Quota limits and usage.

                Administrators are excluded from '@rank quotalimit' (Unless
                '@rank quotalimit = admin' is used), because their Building
                Quota limit is unlimited.

                Puppets are excluded from 'active', 'avgactive', 'avgidle',
                'avglogins', 'avgtotal', 'idle', 'logins', 'longest', 'score'
                and 'total'.

-------------------------------------------------------------------------------

  @reload
  ~~~~~~~
  USAGE:  @reload [local|generic]tutorial <TOPIC>
          @reload disclaimer|termcap|titles|map
          @reload [local|generic]help <TOPIC>

  The '@reload' command can only be used by Deities and the Supreme Being.
  It's used to reload the title screens, disclaimer, termcap (Database
  of terminal definitions) or any help topics/tutorials which have had
  changes made to them without needing to shutdown and restart the
  TCZ-based MUD.

  TCZ-based MUDs feature an On-Line Help and Tutorials system, with both
  generic and local help topics/tutorials.  Generic help topics and tutorials
  are officially distributed with the TCZ source code and should not be
  modified.  If you wish to modify generic topics, please copy them to
  local help/tutorials and make the required changes.

  '@reload [local|generic]help <TOPIC>' attempts to reload the specified help
  topic from either local or generic help (Or both, if just 'help' is
  specified.)  <TOPIC> may contain wildcards ('*' and '?') to reload
  multiple topics in one go.  '@reload [local|generic]tutorial <TOPIC>'
  will reload tutorials from either local or generic tutorials (Or both,
  if just 'tutorial' is specified.)

  The other forms reload the disclaimer, terminal definition database, title
  screens and the TCZ-based MUD's map respectively, allowing them to be
  updated when changes are made without shutting down and then restarting
  the TCZ-based MUD. 

-------------------------------------------------------------------------------

  @remote
  ~~~~~~~
  USAGE:  @remote <LOCATION> = <COMMAND>

  '@remote' acts as if you were in <LOCATION>, and executed the command
  <COMMAND>.

  Of course, you don't move at all  -  You just see the result(s) of the
  command.

-------------------------------------------------------------------------------

  @request
  ~~~~~~~~
  USAGE:  @request list [<PAGE NO>] [<EMAIL ADDRESS>] [= <NAME>|all]
          @request refuse <NUMBER> = <REASON>
          @request accept <NUMBER> = <NAME>
          @request cancel <NUMBER>
          @request <NUMBER>
          @request new

  This command can only be used by Apprentice Wizards/Druids and above.

  The '@request' command is used to process requests for new characters from
  Internet sites which have been banned from creating new characters.

  When a user attempts to create a character from an Internet site which has
  been banned from creating new characters, they will be asked if they wish to
  make a request for a character.  If they choose to do so, they will be asked
  for their E-mail address, which will be added to the end of the queue of
  requests for new characters.

  To deal with these requests, simply type '@request new'.  This will take a
  request off the queue (Which hasn't been dealt with yet) and allocate it to
  you.  On typing '@request new', you will also be warned of any possible
  existing characters in the database with similar E-mail addresses to the
  E-mail address of the person making the request.  You will also be given
  a reference number for the request, which you will need to deal with the
  request (If you forget this, simply type '@request list' to list the
  requests you're currently dealing with.)

  If other characters with similar E-mail addresses exist, please check these
  out and then E-mail the person who requested the new character, to determine
  whether they are trying to obtain duplicate characters or get around a ban
  placed on their usual character (Which is not allowed), i.e:

     Hello, I am <YOUR CHARACTER NAME>, an administrator from <NAME OF
     TCZ-BASED MUD>, responding to your request for a new character.
     It appears you already have a character (Duplicate characters
     are not permitted), can you please explain why you are
     requesting another/new character?

  If the request appears authentic and genuine, or a reasonable explaination
  is received from the user (After sending the above E-mail), you should then
  send an E-mail to the user, asking them which character name(s) they would
  like for their new character, i.e:

     Hello, I am <YOUR CHARACTER NAME>, an administrator from <NAME OF
     TCZ-BASED MUD>, responding to your request for a new character.
     Your request for a new character has been accepted.  Can you
     please E-mail me a list of the names you would like for your
     new character (In order of preference)?

  On receiving a list of suitable names, you can then create a character for
  them.  Please reject potentially offensive or abusive names.  If all of the
  names given by the user are already in use, offensive or invalid, please
  E-mail the user, requesting alternative names.

  Use '@character' to create the character, assigning a random (Lowercase)
  password to them (Approximately 8 characters in length), i.e:  '@character
  fred bloggs = djfcntvx'.  Once the new character is created, set their
  private E-mail address to the correct E-mail address of the user, using
  '@email', i.e:  '@email fred bloggs = private fbloggs@wibble.wobble.com'.

  You can now E-mail the details of their new character, i.e:

     Hello, I am <YOUR CHARACTER NAME>, an administrator from <NAME OF
     TCZ-BASED MUD>, responding to your request for a new character.
     I have created a new character for you (You may like to set a
     more suitable password for them by typing @PASSWORD when you connect):

     Name:  Fred Bloggs
     Password:  djfcntvx

  Having successfully dealt with the request for the new character, you can now
  take them off the request queue, using the '@request accept <NUMBER> =
  <NAME>' command, where <NUMBER> is the reference number of the request (Type
  '@request list' if you can't remember this) and <NAME> is the full name or
  #ID number of the new character you created for them, i.e:  '@request accept
  12345 = fred bloggs'.

  If you need to refuse a request (I.e:  The user making the request already
  has a character, or the E-mail address they gave is invalid), simply type
  '@request refuse <NUMBER> = <REASON>', i.e:  '@request refuse 12345 = This
  person already has a character called Joe Bloggs'.  Please make sure you
  E-mail the user and explain why their request for a new character has
  been refused.

  You can deal with more than one request at a time.  Simply type '@request
  new' until you have sufficient requests to deal with.  You can then list
  the requests you're currently dealing with by typing '@request list' (You
  will need to do this to obtain the reference numbers of the requests.)  If
  you are dealing with a lot of requests, the list may span several pages.
  Simply type '@request list 2' to view the second page, '@request list 3' to
  view the third, etc.  You can view the E-mail address of an individual
  request, and check for existing characters with similar E-mail addresses by
  typing '@request <NUMBER>', where <NUMBER> is the reference number of the
  request.

  Please do not take on an excessive number of requests, or more requests
  than you can deal with effeciently  -  Please share requests with other
  administrators.

  The second parameter of the '@request list' command can be used to list all
  requests (Including requests which haven't been dealt with yet), e.g:
  '@request list = all'.  It can also be used to list requests currently being
  dealt with by a particular administrator, e.g:  '@request list = jc digita'.

  The '@request cancel' command can be used to cancel a request which you have
  taken on and no-longer wish to deal with (Or are unable to do so.)  The
  request will be placed back on the queue for another administrator to deal
  with.  E.g:  '@request cancel 12345'.

  Accepted/refused new character requests are logged to the 'Request' log file
  for future reference.

  NOTE:  New character requests expire after 28 days.

-------------------------------------------------------------------------------

  @return
  ~~~~~~~
  USAGE:  @return [true|false|current]

  '@return' stops execution of the current compound command and skips to the
  end.  Unlike '@break', neither the csuccess or cfailure of the compound
  command is executed, and the success/failure messages of the compound
  command are not displayed  -  The compound command will just finish at
  that point, failing if 'false' is specified, succeeding if 'true' or no
  parameters are specified or leaving the return result unchanged if 'current'
  is specified.

  NOTE:  '@return' does not change the return value from the previous executed
         command.


  Example compound command:
  ~~~~~~~~~~~~~~~~~~~~~~~~~
  @command ReturnTest =\
  @if \{@eval "$3" = ""} do\
      @echo Please specify a parameter.\
      @return\
  @end\
  rem The rest of this command will only be executed if a parameter is given.\
  @echo You specified '%w%l$3%x'.

-------------------------------------------------------------------------------

  @returnvalue
  ~~~~~~~~~~~~
  USAGE:  @returnvalue <RETURN VALUE>

  The '@returnvalue' command allows you to write compound commands which return
  a user-defined value or string instead of the usual 'OK' or 'Error' return
  strings (Allowing you to use them as 'functions'.)

  '@returnvalue' sets the return value of the current compound command, e.g:

  If you had a compound command called 'multiply', with its description set to:

  @returnvalue {@eval $1 * 100}

  ...You could then type '@echo {multiply 10}' (This would display 1000 on your
  screen.)  The 'multiply' compound command multiplies the parameter given to
  it by 100 and then returns the resulting number.  In this case, the resulting
  number is echoed to your screen using the '@echo' command.

  The reserved variable $0 can also be used to reference the return result of
  the compound command.  For example, you could put the following in another
  compound command to achieve the same result:

  multiply 10
  @echo $0

  NOTE:  '@returnvalue' does not change the return result (Success/failure)
         from the previous executed command.

-------------------------------------------------------------------------------

  @room
  ~~~~~
  USAGE:  @room <NAME> [= <DESCRIPTION>]
          @dig <NAME> [= <DESCRIPTION>]

  Creates a new room with the name <NAME> (Building Quota used:  10.)
  If <DESCRIPTION> is specified, the new room's description is set to 
  <DESCRIPTION>.

  You can get into your newly created room by typing '@tel me = #<ID>', where
  #<ID> is the ID number of the room (The TCZ-based MUD displays this when you
  create it), e.g:  '@tel me = #1342'.

  When you first get your BUILDER flag, you should create a room to use as
  your Top Area, and name it something like '<NAME>'s Top Area' (Where <NAME>
  is your name, of course.)  You should then ask an administrator to teleport
  it into the main Top Area for Builders.

  When you create further rooms, you should use '@tel' to teleport them into
  your Top Area by typing '@tel <ROOM ID> = <YOUR TOP AREA ID>'.  Your Top
  Area will help you keep your building work properly organised.

-------------------------------------------------------------------------------

  @sanity
  ~~~~~~~
  USAGE:  @sanity checklists|fixlists [= yes]
          @sanity general [= yes]

  '@sanity' is used to perform integrity checks on the database, to check
  for (And optionally attempt to correct) possible corruption.

  NOTE:  A general sanity check is always performed automatically when the
         TCZ-based MUD starts up, and a full sanity check ('fixlists') is
         also performed if the TCZ-based MUD was not shutdown 'cleanly'
         (I.e:  Using the '@shutdown' command.)  Because of this, manual
         use of the '@sanity' command should be unneccessary.

  '@sanity checklists' (Which can only be used by Elder Wizards/Druids and
  above) checks for corrupted linked lists attached to objects and
  '@sanity fixlists' (Which can only be used by Deities and the Supreme
  Being) attempts to fix any corruption.

  '@sanity general' performs a general sanity check on the database.  This
  will check for and fix simple problems, such as objects with invalid
  owners, etc.  This check is also performed automatically on start-up,
  and could cause lag (For this reason, the second parameter 'yes' must
  be given.)

  NOTE:  Both '@sanity checklists' and '@sanity fixlists' can be extremely
         CPU intensive and can take several minutes to complete (Depending
         on the size of the database, and server CPU power)  -  I.e:  The
         TCZ-based MUD could come to a complete halt for everyone using it
         until the command completes, so it should only ever be used in an
         absolute emergency.  For these reasons, the second parameter 'yes'
         must be given to use them.


  Obsolete '@sanity' options:
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  Some '@sanity' options have been be removed, having been replaced with
  suitable alternatives.  These are listed below:

  Command:              Replacement:        Users ranked by:
  ~~~~~~~~              ~~~~~~~~~~~~        ~~~~~~~~~~~~~~~~
  @sanity checkquotas   @rank quotaexcess   Exceeded Building Quota limits.
  @sanity quotalimits   @rank quotalimits   Building Quota limits.
  N/A                   @rank quota         Building Quota in use.
  @sanity credit        @rank credit        Credit in pocket.
  N/A                   @rank balance       Bank balance.
  @sanity score         @rank score         Score.

-------------------------------------------------------------------------------

  @score
  ~~~~~~
  USAGE:  @score <NAME> = <AMOUNT>

  This command can only be used by Wizards/Druids and above.

  Increases/decreases the character <NAME>'s score by <AMOUNT> points.  Score
  points are usually earned by completing adventures, puzzles and winning
  battles against other characters in combat areas.

  To see the high scores on a TCZ-based MUD, simply type '@rank score'.  See
  section on '@rank' for further details.

-------------------------------------------------------------------------------

  @set
  ~~~~
  USAGE:  @set <OBJECT> = [!]<FLAG> [[!]<FLAG>] [...] [= <REASON>]

  '@set' is used to set/reset one or more flags on an object or character.

  To set a flag on an object, simply type '@set <OBJECT> = <FLAG>', e.g:
  '@set myobject = sticky'.  To reset a flag, simply type 
  '@set <OBJECT> = !<FLAG>' ('!' means 'not'.)  You can set/reset more than
  one flag on an object in one go by specifying multiple flag names separated
  by spaces, e.g:  '@set here = haven !abode !yell'.

  When you look at an object you own/control, flags are displayed as letters
  following the ID number of it (E.g:  'The Maelstrom(#3227 RAHy)'.)

  The first flag (After the ID) (R) tells you what type the object is, e.g:  
  R = Room.  This flag (Which is an object type flag) can't be changed  - 
  Any other flags following this flag can (AHy), by using '@set'.

  The setting/resetting of important/privilege flags is logged to the 'Flags'
  log file.


  The object type flags are (See relevant sections at beginning of manual):
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  Alarm (A), Compound Command (C), Dynamic Array (D), Exit (E), Fuse (F),
  Player (Character) (P), Property (p), Puppet (p) (On character), Room (R),
  Thing (T), Variable (V).


  The flags that you can set/reset are:
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  Abode         (A)   Abort         (a)   Ansi          (a)   Apprentice    (A)
  Ashcan        (!)   Assistant     (x)   BBS           (b)   BBS-Inform
  Being         (b)   Boot                Builder       (B)   Censored      (^)
  Combat        (c)   Consonant   ('A')   Dark          (D)   Deity         (D)
  Druid               Elder         (E)   Engaged       (e)   Experienced   (X)
  Expiry        (x)   Female              Friends-Inform      Haven         (H)
  Help                HTML          (h)   Immovable     (I)   Inheritable   (i)
  Invisible     (D)   Listen        (L)   Mail          (M)   Male
  Married       (m)   Moron         (M)   Neuter              Number        (n)
  Opaque        (q)   Open                Openable      (O)   PageBell
  Permanent     (P)   Plural   ('Some')   Private       (p)   Quiet         (Q)
  ReadOnly      (r)   ReadOnlyDesc  (d)   Retired       (R)   Secret        (s)
  SendHome      (H)   Sharable      (S)   Shout               SkipObjects   (o)
  Sticky        (+)   Tom           (t)   Tracing       (~)   Transferable  (&)
  Transport     (T)   Validated     (@)   Visible       (v)   Visit         (V)
  Vowel      ('An')   Warp          (w)   Wizard        (W)   Yell          (y)


  The ABODE flag...
  ~~~~~~~~~~~~~~~~~
  USAGE:  @set <OBJECT> = ABODE
          @set <OBJECT> = !ABODE

  When set on a room, the ABODE flag allows other characters to see the #<ID>
  number of the room, set their home to it (By typing '@link me = #<ID>') or
  teleport to it (By typing '@tel #<ID>'.)

  ABODE is an ideal way of letting friends or the general public into your
  area (I.e:  By advertising the #<ID> number of it.)


  The ABORT flag...
  ~~~~~~~~~~~~~~~~~
  USAGE:  @set <FUSE> = ABORT
          @set <FUSE> = !ABORT

  This flag can only be set/reset by Apprentice Wizards/Druids and above on
  fuses.

  When set on a fuse, the ABORT flag will prevent the command which triggered
  the fuse from being executed.  For example, if a fuse with its ABORT flag set
  is placed on an object, then when a character attempts to pick up or drop the
  object, the fuse will be executed, but the object will remain where it is
  (Because the 'take' or 'drop' command typed by the user will be aborted.)

  The '@continue' command can be used within the compound command executed
  by the fuse with its ABORT flag set to optionally prevent the effects of
  the ABORT flag (I.e:  Allow the execution of the command which triggered
  the fuse.)


  The APPRENTICE flag...
  ~~~~~~~~~~~~~~~~~~~~~~
  USAGE:  @set <COMMAND>|*<NAME> = APPRENTICE  = <REASON>
          @set <COMMAND>|*<NAME> = !APPRENTICE = <REASON>

  This flag can only be set/reset by Wizards/Druids and above.

  As well as giving characters Apprentice Wizard/Druid status (See the section
  on Apprentice Wizards/Druids near the beginning of this manual), the
  APPRENTICE flag can also be set on compound commands, which has the
  following effects...

  *  Allows the use of '@write', '@oecho' and '@notify' within the compound
     command in ANY room/area.

  *  Allows use of '@with connected...' within a Builder owned compound command.

  *  Allows use of '@censor' within a Builder owned compound command.
  
  *  Allows use of unrestricted credit payments in the '@pay' command.


  The ASHCAN flag...
  ~~~~~~~~~~~~~~~~~~
  USAGE:  @set <OBJECT> = ASHCAN
          @set <OBJECT> = !ASHCAN

  The ASHCAN flag is used to mark objects for automatic destruction after their
  last usage date exceeds 1 month.  Objects with their ASHCAN flag set can
  be saved from automatic destruction by resetting their ASHCAN flag.

  The ASHCAN flag is also set on any object/character which couldn't be
  destroyed by automatic object/character maintenance for some reason (I.e:
  A Builder who has objects locked to them, an object used in the lock of
  another object, etc.)

  NOTE:  If you no-longer need an object, you should destroy it by using the
         '@destroy' command, as this will remove the object from the database
         immediately and reimburse the Building Quota used by it, so you can
         use it to build something else.

         You can recover accidentally destroyed objects by using the
         '@undestroy' command, however objects destroyed by automatic
         object maintenance cannot be recovered.


  The ASSISTANT flag...
  ~~~~~~~~~~~~~~~~~~~~~
  USAGE:  @set *<NAME> = ASSISTANT
          @set *<NAME> = !ASSISTANT

  This flag can only be set/reset by Wizards/Druids and above.

  For full details on the Assistant status, please see the section on
  Assistants near the beginning of this manual.


  The BBS flag...
  ~~~~~~~~~~~~~~~
  USAGE:  @set *<NAME> = BBS
          @set *<NAME> = !BBS

  This flag can only be set/reset by Apprentice Wizards/Druids and above.

  If a character's BBS flag is removed, they will no-longer be able to add
  new messages to the TCZ-based MUD's BBS, reply to messages, delete messages,
  etc.  However, they will be able to still browse the BBS and read messages
  on it.

  If a user is abusing the TCZ-based MUD's BBS, removing their BBS flag will
  prevent them from continuing to do so.


  The BBS-Inform flag...
  ~~~~~~~~~~~~~~~~~~~~~~
  USAGE:  @set *<NAME> = BBS-INFORM
          @set *<NAME> = !BBS-INFORM

  This flag can only be set/reset on characters.

  If you set your BBS-INFORM flag ('@set me = bbs-inform'), you will receive
  messages informing you when other characters add, reply to, modify, etc.
  messages on the TCZ-based MUD's BBS (Similar to the messages you get when
  you are in the BBS room.)  This is extremely useful if you do all of your
  BBS browsing remotely using the 'bbs <BBS COMMAND>' command.

  PLEASE NOTE:  If you set your QUIET flag, the effects of the BBS-INFORM flag
                will be overridden (I.e:  You will no-longer be informed until
                you reset your QUIET flag.)


  The BEING flag...
  ~~~~~~~~~~~~~~~~~
  USAGE:  @set *<NAME> = BEING
          @set *<NAME> = !BEING

  The BEING flag may be set on characters by Apprentice Wizards/Druids and
  above.

  A character with their BEING flag set will automatically be excluded from
  the 'admin' command.

  This is useful for excluding users who are not true 'real' administrators
  (Although they have the appropriate rank), for example, an inactive Wizard
  character who owns a global area and its associated commands, or an
  Admin-ranked 'puppet' used by an administrator for building purposes.

  The BEING flag is also reserved for future use for virtual
  computer-controlled characters (Also referred to as  'monsters', 'robots',
  'bots' and 'non-playing characters' (NPC's.))


  The BUILDER and BOOT flags...
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  USAGE:  @set *<NAME> = BUILDER|BOOT
          @set *<NAME> = !BUILDER|!BOOT

  PLEASE NOTE:  The BOOT flag is an alias for the BUILDER flag.

  This flag can only be set/reset by Apprentice Wizards/Druids and above.

  For full details on the Builder status, please see the section on Builders
  near the beginning of this manual.

  If an Apprentice Wizard/Druid or above's BOOT (BUILDER) flag is removed, they
  will no-longer be able to boot users (Using '@boot'  -  However, they may
  still use the '@bootdead' command to boot 'dead'/'locked-up' connections.)


  The CENSORED flag...
  ~~~~~~~~~~~~~~~~~~~~
  USAGE:  @set <OBJECT> = CENSORED
          @set <OBJECT> = !CENSORED

  This flag can be set on characters, rooms, things and compound commands.

  The CENSORED flag controls whether bad language can be used within a
  location or by a particular character.

  When rooms or things are set CENSORED, characters within them will not be
  able to use bad language (Attempts will be censored out with '*'s.)  The
  CENSORED flag is ideal for public locations and talking rooms where you
  don't want people using bad language.

  When characters are set CENSORED (This can only be done by Apprentice
  Wizards/Druids and above), they will not be able to use bad language
  in ANY location, regardless of whether it has its CENSORED flag set
  or not.  This is ideal for dealing with offensive/abusive users.

  Compound commands default to having their CENSORED flag set.  This results
  in each command line within the compound command being subject to censorship
  when executed in a CENSORED location or by a CENSORED character.  This is
  ideal for communications compound commands, but can have adverse results
  within other compound commands.

  Wizards/Druids and above can reset the CENSORED flag on a compound command,
  allowing it to execute without being subject to censorship.  However, the
  command-line typed by the user to execute the compound command will still
  be subject to censorship appropriately.


  The COMBAT flag...
  ~~~~~~~~~~~~~~~~~~
  USAGE:  @set <OBJECT> = COMBAT
          @set <OBJECT> = !COMBAT

  This flag can only be set on rooms, things and compound commands.

  In order to use the combat system building commands (Such as '@damage',
  etc.), the following conditions must be met:

  *  Any compound commands containing '@damage', '@delay' or '@heal' must
     have their COMBAT flag set in order for these commands to work.

  *  They must be executed in a location which also has its COMBAT flag
     set.

  *  The location must not have its HAVEN flag set.

  *  The location and the compound command containing the combat commands
     must have the same owner.

  NOTE:  The COMBAT friend flag can be used to allow combat commands built by
         other users to be used in your combat areas.  See section on the
         COMBAT friend flag for further information.


  The CONSONANT article flag...
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  USAGE:  @set <OBJECT> = CONSONANT
          @set <OBJECT> = !CONSONANT

  This flag can only be set on things, rooms, exits and characters.

  When set on one of the above types of object ('@set <OBJECT> = CONSONANT'),
  the object will be given the consonant article (A), e.g:

  @set television = CONSONANT          (Gives 'A Television'.)


  The DEITY flag...
  ~~~~~~~~~~~~~~~~~
  USAGE:  @set *<NAME> = DEITY  = <REASON>
          @set *<NAME> = !DEITY = <REASON>

  This flag can only be set/reset by the Supreme Being.

  For full details on the Deity status, please see the section on Deities near
  the beginning of this manual.


  The DRUID flag...
  ~~~~~~~~~~~~~~~~~
  USAGE:  @set *<NAME> = DRUID  = <REASON>
          @set *<NAME> = !DRUID = <REASON>

  This flag can only be on lower level characters by Wizards/Druids and above.

  When set on an Apprentice Wizard, Wizard or Elder Wizard, the character
  becomes an Apprentice Druid, Druid or Elder Druid respectively, with
  different responsibilities.

  For full details on the various Druid and Wizard statuses, and the
  responsibilities of each, please see the section on character levels
  near the beginning of this manual.


  The ELDER flag...
  ~~~~~~~~~~~~~~~~~
  USAGE:  @set *<NAME> = ELDER  = <REASON>
          @set *<NAME> = !ELDER = <REASON>

  This flag can only be set/reset by Deities and the Supreme Being.

  As well as giving characters Elder Wizard/Druid status (See the section on
  Elder Wizards/Druids near the beginning of this manual), the ELDER flag can
  also be set on compound commands, which has the following effects (In
  addition to those given by the APPRENTICE and WIZARD flags)...

  *  Lowest restrictions in combat commands.

  *  Allows '@admin options' to be set.

  IMPORTANT NOTICE:  The ELDER flag should never be set on Builder owned
                     compound commands without also setting the READONLY
                     flag (To prevent the Mortal user from maliciously
                     editing it to pick up a number of Admin-only privileges.)

                     Ideally (Where possible), the APPRENTICE flag (See 'help
                     apprentice flag') should be set on Builder owned compound
                     commands instead (This only gives limited effects of the
                     ELDER flag (See section on ELDER flag.)


  The ENGAGED flag...
  ~~~~~~~~~~~~~~~~~~~
  This flag is set on characters who are engaged to each other (Via the
  '@partner' command.)


  The EXPERIENCED flag...
  ~~~~~~~~~~~~~~~~~~~~~~~
  USAGE:  @set *<NAME> = EXPERIENCED
          @set *<NAME> = !EXPERIENCED

  The Experienced Builder flag may only be set on characters by Wizards/Druids
  and above.

  For full details on the Experienced Builder status, please see the section
  on Experienced Builders near the beginning of this manual.


  The EXPIRY flag...
  ~~~~~~~~~~~~~~~~~~
  USAGE:  @set <OBJECT> = EXPIRY
          @set <OBJECT> = [!]EXPIRY

  This flag can only be set/reset on objects.

  By default, an object which has an expiry time set (Using the '@expiry'
  command) will expire and be automatically destroyed when its last usage
  date exceeds its expiry time (In days.)  This means that if the object
  is used regularly, it will not expire.

  If the EXPIRY flag is set on the object, the expiry time will be based on its
  creation date instead.  This means that the object will expire after the
  specified amount of time, regardless of whether its being used or not.


  The FEMALE gender flag...
  ~~~~~~~~~~~~~~~~~~~~~~~~~
  USAGE:  @set me|*<NAME> = FEMALE
          @set me|*<NAME> = !FEMALE

  This flag represents the gender of a character.  You can set your gender by
  typing '@set me = male', '@set me = female' or '@set me = neuter'.


  The FRIENDS-INFORM flag...
  ~~~~~~~~~~~~~~~~~~~~~~~~~~
  This flag can only be set/reset on characters.

  If you set your FRIENDS-INFORM flag ('@set me = friends-inform'), you will
  receive messages informing you when other characters add you to or remove
  you from their friends list.  You will also receive messages when they
  change the friend flags they currently have set on you.

  PLEASE NOTE:  If you set your QUIET flag, the effects of the FRIENDS-INFORM
                flag will be overridden (I.e:  You will no-longer be informed
                until you reset your QUIET flag.)


  The HAVEN flag...
  ~~~~~~~~~~~~~~~~~
  USAGE:  @set <OBJECT> = HAVEN
          @set <OBJECT> = !HAVEN

  If a room or thing is set HAVEN, characters will not be able to fight in
  that location, even if it has its COMBAT flag set.  Ideal for creating
  'safe' zones within combat areas (E.g:  Entrance to combat area.)

  If a character is set HAVEN, no one will be able to 'page' or 'tell'
  messages to them.  Ideal if you are working on a building project and
  do not wish to be disturbed by other users.


  The HELP flag...
  ~~~~~~~~~~~~~~~~
  USAGE:  @set me|*<NAME> = HELP
          @set me|*<NAME> = !HELP

  This flag may only be set on Experienced Builders and Retired Wizards/Druids
  by Wizards/Druids and above.

  The Experienced Builder flag is given to users with expert building and
  coding skills.  It gives them a number of new privileges to further
  improve and advance their building, and lifts some of the restrictions
  which apply to ordinary Builders for security.

  Experienced Builders are not required to help or give assistance to new
  users.  This is a requirement of Assistants (And administrators, of course),
  who are given the status solely for that purpose.

  However, if an Experienced Builder does wish to give help and assistance,
  they may ask an administrator to set their HELP flag, which will give them
  the right to use the 'welcome' and 'assist' commands in a similar way to
  Assistants when too few (Or no) administrators are connected.  It also
  allows them to see when new users are being created and informs them of
  users who need welcoming/assistance.

  When an Experienced Builder has their HELP flag set, the rules which apply
  to Assistants also apply to them (As well as the Experienced Builder rules.)
  If you no-longer wish to give help and assistance, please ask an
  administrator to reset your HELP flag.

  If an Experienced Builder abuses privileges obtained through the HELP flag,
  but not those of the Experienced Builder flag, their HELP flag can be reset,
  leaving them with their Experienced Builder privileges, to which they are
  still entitled.

  The HELP flag cannot be set or reset on Assistants.  It is a requirement of
  the Assistant status to give help and assistance to new users.  If you do
  not wish to do this, please ask an administrator to reset your ASSISTANT
  flag.

  The HELP flag also be set on retired administrators, giving them the ability
  to give users help and assistance.  If a retired administrator has their
  HELP flag set, the rules which apply to Assistants also apply to them.


  The IMMOVABLE flag...
  ~~~~~~~~~~~~~~~~~~~~~
  USAGE:  @set <OBJECT> = IMMOVABLE
          @set <OBJECT> = !IMMOVABLE

  This flag cannot be set/reset on characters.

  When an object has its IMMOVABLE flag set, it cannot be moved from its
  present location (With the exception of the 'junk' command.)  This means
  that object cannot be picked up, dropped or teleported to another location.

  Amongst other uses, this flag is ideal for setting on things in your
  locations, so that other users can't pick them up and move them to other
  locations (Or 'steal' them.)

  For things (With the exception of vehicles), you can use '@lock <OBJECT> =
  me' as an alternative to IMMOVABLE, which will have the same effect, except
  that you can set appropriate failure ('@fail') and others failure ('@ofail')
  messages, which will be displayed when a user (Other than yourself) tries to
  pick up the thing.


  The INHERITABLE flag...
  ~~~~~~~~~~~~~~~~~~~~~~~
  USAGE:  @set <OBJECT> = INHERITABLE
          @set <OBJECT> = !INHERITABLE

  When an object has its INHERITABLE flag set, any character can make it a
  parent of one of their own objects (Using '@parent'.)

  See section on '@parent' for further information on inheritance.


  The INVISIBLE (Or DARK) flag...
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  USAGE:  @set <OBJECT> = INVISIBLE
          @set <OBJECT> = !INVISIBLE

  An INVISIBLE thing can't be seen unless you look for it.

  You can't see the contents of an INVISIBLE room or container.

  An INVISIBLE exit doesn't appear in the 'Obvious exits:' list.

  An INVISIBLE compound command can only be executed from within another
  compound command, which must have write privileges (Or write privileges
  picked up via '@chpid') to the compound command being executed.  (I.e:
  An INVISIBLE compound command CAN'T be executed from the command line.)

  An INVISIBLE fuse will not fire/trigger.

  The INVISIBLE flag can't be set on a character.


  The LISTEN flag...
  ~~~~~~~~~~~~~~~~~~
  USAGE:  @set me|*<NAME> = LISTEN
          @set me|*<NAME> = !LISTEN

  If you're set LISTEN, you'll receive messages telling you when characters
  connect/disconnect.  If you're an Apprentice Wizard/Druid or above, you'll
  also see the Internet address they're connecting from.


  The MAIL flag...
  ~~~~~~~~~~~~~~~~
  USAGE:  @set *<NAME> = MAIL
          @set *<NAME> = !MAIL

  This flag can only be set/reset by Apprentice Wizards/Druids and above.

  If a character's MAIL flag is removed, they will no-longer be able to send
  and receive new mail.

  If a user is abusing the mail system, removing their MAIL flag will prevent
  them from continuing to do so.


  The MALE gender flag...
  ~~~~~~~~~~~~~~~~~~~~~~~
  USAGE:  @set me|*<NAME> = MALE
          @set me|*<NAME> = !MALE

  This flag represents the gender of a character.  You can set your gender by
  typing '@set me = male', '@set me = female' or '@set me = neuter'.


  The MARRIED flag...
  ~~~~~~~~~~~~~~~~~~~
  This flag is set on characters who are married to each other (Via the
  '@partner' command.)


  The MORON flag...
  ~~~~~~~~~~~~~~~~~
  USAGE:  @set me|*<NAME> = MORON
          @set me|*<NAME> = !MORON

  This flag can only be set/reset by Apprentice Wizards/Druids and above.

  For full details on the Moron status, please see the section on Morons near
  the beginning of this manual.


  The NEUTER gender flag...
  ~~~~~~~~~~~~~~~~~~~~~~~~~
  USAGE:  @set me|*<NAME> = NEUTER
          @set me|*<NAME> = !NEUTER

  This flag represents the gender of a character.  You can set your gender by
  typing '@set me = male', '@set me = female' or '@set me = neuter'.


  The NUMBER flag...
  ~~~~~~~~~~~~~~~~~~
  USAGE:  @set me|*<NAME> = NUMBER
          @set me|*<NAME> = !NUMBER

  When you set this flag on yourself, you'll no-longer see the ID numbers of
  objects (Even if you own them.)  This flag is useful if you want to explore
  your area without all those ID numbers cluttering everything up (And
  extremely useful to Experienced Builders and above, who see ID numbers
  of everything.)


  The OPAQUE flag...
  ~~~~~~~~~~~~~~~~~~
  USAGE:  @set <OBJECT> = OPAQUE
          @set <OBJECT> = !OPAQUE

  This flag can only be set on things and exits.

  When a thing has its OPAQUE flag set, its contents will not be visible to
  users looking at it from the outside (Unless it's a container, which is
  currently open.)

  When an exit has it's OPAQUE flag set, its destination will not be shown
  after the exit's name in the 'Obvious exits:' list of the room/container
  it's in (E.g:  'The Swan Pub (Pub)' instead of 'The Swan Pub (Pub) leading
  to The Swan Pub.')


  The OPEN and OPENABLE flags...
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  USAGE:  @set <OBJECT> = OPENABLE
          @set <OBJECT> = !OPENABLE
          @set <OBJECT> = OPEN
          @set <OBJECT> = !OPEN

  The OPEN and OPENABLE flags can only be set on rooms, things, vehicles and
  exits.

  When the OPEN flag is set on a thing, it becomes a container, which can be
  entered by characters (Using the 'enter' command) and objects can be placed
  inside (Providing it's large enough.)

  When the OPEN flag is set on a vehicle, the vehicle can be entered by
  characters and driven (Using the 'drive' command) through exits into
  other locations.  A vehicle which doesn't have its OPEN flag set can't
  be entered, and must be riden (Using the 'ride' command.)

  When a thing or vehicle has its OPENABLE flag set, it can be opened, closed,
  locked and unlocked (Using the 'open', 'close', 'lock' and 'unlock' commands
  respectively.)  If it's closed, characters outside it will not be able to
  enter it, place objects inside it or gain access to its contents.

  When a thing or vehicle is locked, characters will not be able to open or
  close it.  In addition to this, the lock key ('@key') of the thing/vehicle
  can be used to set a lock which must be satisfied in order to lock/unlock it.

  When an exit has its OPENABLE flag set, it can be opened, closed, locked
  and unlocked in the same way as things and vehicles.  If the exit is closed,
  characters will not be able to pass through it.  For the exit to be locked
  or unlocked, its lock ('@lock') must be satisfied.

  When a room has its OPENABLE flag set, characters will only be able to
  enter the room if they are able to satisfy its lock.  This is an easy and
  convenient way of selectively preventing unwanted characters from entering
  particular rooms of yours.


  The PERMANENT flag...
  ~~~~~~~~~~~~~~~~~~~~~
  USAGE:  @set <OBJECT> = PERMANENT
          @set <OBJECT> = !PERMANENT

  This flag can only be set/reset by Experienced Builders, Apprentice Wizards/
  Druids and above.

  When an object has its PERMANENT flag set, it can't be destroyed
  accidentally with '@destroy'.  Unlike READONLY, PERMANENT still allows you 
  to modify fields of the object (Name, description, etc.)


  The PLURAL article flag...
  ~~~~~~~~~~~~~~~~~~~~~~~~~~
  USAGE:  @set <OBJECT> = PLURAL
          @set <OBJECT> = !PLURAL

  This flag can only be set on things, rooms, exits and characters.

  When set on one of the above types of object ('@set <OBJECT> = PLURAL'),
  the object will be given the plural article (Some), e.g:

  @set sweets = PLURAL          (Gives 'Some Sweets'.)


  The PRIVATE flag...
  ~~~~~~~~~~~~~~~~~~~
  USAGE:  @set <OBJECT> = PRIVATE
          @set <OBJECT> = !PRIVATE

  When an object (Except a character) has its PRIVATE flag set, it can only be
  examined by its owner and characters of a higher level.

  E.g:  If an Apprentice Wizard/Druid sets a compound command to PRIVATE,
        only themselves and Wizards/Druids and above can examine it.

  If a character has their PRIVATE flag set, it will temporarily disable the
  ability of their friends with the VISIT friend flag set to visit them at
  will (Using the 'visit' command.)  Ideal for when you are holding a private
  conversation or simply don't want to be disturbed.

  NOTE:  Query commands (Such as '{@?desc}', '{@?drop}', etc.) are also subject
         to the restrictions imposed by the PRIVATE flag.


  The QUIET flag...
  ~~~~~~~~~~~~~~~~~
  USAGE:  @set <OBJECT> = QUIET
          @set <OBJECT> = !QUIET

  This flag can only be set on characters, rooms and things.  

  When set on yourself ('@set me = quiet'), you'll no-longer hear shouts (With
  the exception of important broadcast messages), yells and messages broadcast
  up the area tree using '@areawrite'.  If you're an Apprentice Wizard/Druid
  or above, you'll no-longer receive messages over the 'natter' channel.

  Setting yourself QUIET and !LISTEN allows you to build almost completely
  undisturbed (Except for pages and tells (You can stop these too by setting
  yourself HAVEN ('@set me = haven')) and messages from other characters in
  the same room (Unless the room is set QUIET too.))

  When set on a room/thing, characters will no-longer be able to talk to each
  other in that room.


  The READONLY flag...
  ~~~~~~~~~~~~~~~~~~~~
  USAGE:  @set <OBJECT> = READONLY
          @set <OBJECT> = !READONLY

  This flag can only be set/reset by Experienced Builders, Apprentice Wizards/
  Druids and above.

  When an object has its READONLY flag set, it can't be altered in any way
  or destroyed (Even by higher level characters) until the flag is removed
  by either the object's owner or a higher level character.

  Experienced Builders cannot reset the READONLY flag on a compound command
  which has its VALIDATED flag set.


  The READONLYDESC flag...
  ~~~~~~~~~~~~~~~~~~~~~~~~
  USAGE:  @set <OBJECT> = READONLYDESC
          @set <OBJECT> = !READONLYDESC

  This flag (Which can be set on any object type (Except fuses, arrays and
  alarms)) makes the description and outside description of an object
  read-only, so that they can't be modified in any way without removing
  the flag again first.

  Unlike the READONLY and PERMANENT flags, this flag DOES NOT stop the object
  from being destroyed, or any of its other fields being modified.

  You should set this flag on compound commands and objects which are complete
  to safeguard them from accidental modification (I.e:  If you (Or a
  Wizard/Druid and above for that matter) accidentally get the #ID number
  wrong when using '@desc'/'@odesc'.)


  The RETIRED flag...
  ~~~~~~~~~~~~~~~~~~~
  USAGE:  @set <OBJECT> = RETIRED
          @set <OBJECT> = !RETIRED

  This flag can only be set/reset by Apprentice Wizards/Druids and above.

  When set on an administrator, this flag indicates that they have retired from
  their administative duties.  Both Retired Wizards and Retired Druids have the
  same privileges as an Experienced Builder (The rules for Experienced Builders
  apply to them.)

  A retired administrator may also request to have their HELP flag set, which
  entitles them to giving help and assistance to users (If this is set, the
  rules for Assistants also apply to them.)

  Retired administrators have no administrative privileges and cannot use
  commands or access information restricted to administrators only.

  Retired administrators will usually be administrators who have been around
  for a long time, who can no-longer connect (Usually due to lack of time, IRL
  commitments or lack of access to the Internet) or connect for a sufficient
  amount of time to participate in general administrative duties.


  The SECRET flag...
  ~~~~~~~~~~~~~~~~~~
  USAGE:  @set <OBJECT> = SECRET
          @set <OBJECT> = !SECRET

  This flag can only be set on characters, rooms and things.

  You can hide yourself by setting your SECRET flag ('@set me = secret')  -
  This will hide your current location on the 'where' list, 'scan', 'page',
  etc. from other users of the same or lower level.  You can remove your
  SECRET flag by typing '@set me = !secret'.

  The SECRET flag may also be set on rooms and things to make them secret,
  hiding the location of all characters who are currently inside them.


  The SENDHOME flag...
  ~~~~~~~~~~~~~~~~~~~~
  USAGE:  @set <OBJECT> = SENDHOME
          @set <OBJECT> = !SENDHOME

  This flag can only be set on objects.

  If an object has its SENDHOME flag set, it will be moved to its home
  location each time the TCZ-based MUD restarts (After shutdown or a crash.)
  You can use this flag to ensure that objects eventually return to a set
  starting location.

  For example, you may have objects in your areas which can be picked up and
  taken away by other users.  To ensure that they don't get dropped somewhere
  out of the way, where they will probably never be found or looked at again,
  you can set this flag on them.

  The SENDHOME flag is an ideal alternative to the STICKY flag, which only
  sends an object home if it's picked up and then dropped.  SENDHOME also
  allows the user carrying the object to drop it anywhere they like, without
  it being (Annoyingly) sent back to its home location.


  The SHARABLE flag...
  ~~~~~~~~~~~~~~~~~~~~
  USAGE:  @set <OBJECT> = SHARABLE
          @set <OBJECT> = !SHARABLE

  This flag can be set on any type of object, except characters.

  If a character has been given 'read'/'write' permissions to your objects via
  the READ/WRITE friend flags, but has also been given the SHARABLE friend
  flag, their extra privileges will only apply to objects which have their
  SHARABLE flag set (Allowing you to keep a tight control on which objects
  of yours they may examine, modify, destroy, etc.)


  The SKIPOBJECTS flag...
  ~~~~~~~~~~~~~~~~~~~~~~~
  USAGE:  @set <OBJECT> = SKIPOBJECTS
          @set <OBJECT> = !SKIPOBJECTS

  This flag can only be set on rooms and things.

  When set, any compound commands in the room/thing, or attached to an object
  which is then dropped within the room/thing will be ignored (Unless owned
  by the owner of the room, the character executing the compound command or
  the compound command is Admin owned or has its WIZARD flag set.)

  The SKIPOBJECTS flag is mainly intended for public locations to prevent
  malicious users from inconveniencing or hacking other users within the
  room/thing with a compound command (Attached to an object dropped within
  the room/thing) which shadows a built-in command (Such as 'say', 'page',
  'tell', 'whisper', etc.)


  The STICKY flag...
  ~~~~~~~~~~~~~~~~~~
  USAGE:  @set <OBJECT> = STICKY
          @set <OBJECT> = !STICKY

  This flag can only be set on things, rooms, exits and fuses.

  A thing with its STICKY flag set will go straight to its home location
  (Set using '@link') when dropped.

  The drop-to (Set using '@link') of a room with its STICKY flag set will be
  delayed until the last connected character leaves the room.  When the last
  connected character leaves the room, all objects dropped there (Except
  objects which have their home set to the room and their STICKY flag set)
  will be sent to the drop-to location.

  If an OPENABLE exit has its STICKY flag set, the exit will automatically
  close after a character goes through it.  If the lock of the exit is set,
  the exit will also automatically lock.

  The 'triggering' of a fuse with its STICKY flag set will be delayed until
  the command which the user who triggered it typed has finished executing 
  (E.g:  A TOM and STICKY fuse in a room will not trigger until a character
  moves in that room and has arrived in their destination room.)


  The TOM flag...
  ~~~~~~~~~~~~~~~
  USAGE:  @set <FUSE> = TOM
          @set <FUSE> = !TOM

  TOM stands for Trigger On Movement.  This flag can only be set on fuses.

  It causes the fuse to trigger only when movement occurs in the room or
  container it's in, instead of whenever a command is typed by a character.


  The TRACING flag...
  ~~~~~~~~~~~~~~~~~~~
  USAGE:  @set me|<COMMAND>|*<NAME> = TRACING
          @set me|<COMMAND>|*<NAME> = !TRACING

  When you set yourself TRACING ('@set me = tracing'), a trace sequence is
  displayed whenever any of your compound commands are executed (Either by
  yourself or another character.)

  Setting yourself TRACING will usually result in a lot of output (Especially
  if other characters are executing your compound commands.)  As an
  alternative, you can set INDIVIDUAL compound commands TRACING ('@set
  <COMMAND> = tracing'), so you only see a trace sequence when those
  compound commands are executed.

  For each line executed by a compound command, you'll see the following
  trace sequence...

  [nnn]  <COMMAND>  (EXEC)
  (nnn)  <COMMAND>  (SUCC)/(FAIL)

  The numbers in brackets ('[nnn]' and '(nnn)') tell you which line number of
  the compound command is currently being executed.  The '[nnn]  <COMMAND>
  (EXEC)' line shows you the complete command line before the '{}'s in it
  are evaluated and expanded.

  The following '(nnn)  <COMMAND>  (SUCC)/(FAIL)' lines show the result(s)
  of evaluating and expanding the commands in '{}'s (If present), followed
  by the final result of executing the fully expanded line.  '(SUCC)' means
  that the command succeeded, and '(FAIL)' means it failed.

  HINT:  You can turn the trace sequence on and off at will from within a
         compound command by simply inserting the commands '@set {@?myself}
         = tracing' and '@set {@?myself} = !tracing' to switch tracing
         on/off respectively.  Using this method, you can cut the output
         from the trace sequence down significantly.

  NOTE:  If you are building under the ID of another character ('@chuid'),
         you will also receive trace sequences for any of their compound
         commands which are set TRACING.


  The TRANSFERABLE flag...
  ~~~~~~~~~~~~~~~~~~~~~~~~
  USAGE:  @set <OBJECT> = TRANSFERABLE
          @set <OBJECT> = !TRANSFERABLE

  This flag cannot be set/reset on characters or alarms.

  When this flag is set on an object, any character can take over the ownership
  of it (Without needing 'write' permission to its current owner) by typing
  '@owner <OBJECT> = me'.

  If you take over the ownership of an object with its TRANSFERABLE flag set
  and do not wish to let other characters take over the ownership of it from
  you, you should type '@set <OBJECT> = !TRANSFERABLE' to remove the flag.


  The TRANSPORT flag...
  ~~~~~~~~~~~~~~~~~~~
  USAGE:  @set <OBJECT> = TRANSPORT
          @set <OBJECT> = !TRANSPORT

  This flag can only be set/reset on objects.

  If a thing has its TRANSPORT flag set, it becomes a mode of transport
  (E.g:  Car, motorcycle, horse, etc.)  This vehicle can then be 'driven'
  using the 'drive' or 'ride' command.

  If a room has its TRANSPORT flag reset, vehicles will not be allowed in that
  room (I.e:  A street would have its TRANSPORT flag set, but a bedroom,
  kitchen, swimming pool, etc. would not.)

  If an exit has its TRANSPORT flag reset, then vehicles will not be able to
  go through it (I.e:  A road leading north would have its TRANSPORT flag set,
  but a footpath would not.)

  A vehicle cannot be 'driven' into another thing.


  The VALIDATED flag...
  ~~~~~~~~~~~~~~~~~~~~~
  USAGE:  @set <COMMAND> = VALIDATED
          @set <COMMAND> = !VALIDATED

  This flag can only be set/reset by Apprentice Wizards/Druids and above.

  If a Builder owned compound command is made global, it must also have its
  VALIDATED flag set, otherwise it will be ignored by the global search
  phase.  This flag prevents Mortals who already own global compound commands
  (Which have been authorised by Admin) from teleporting unauthorised compound
  commands into them, which would allow the Mortal to make unauthorised
  compound commands global.


  The VISIBLE flag...
  ~~~~~~~~~~~~~~~~~~~
  USAGE:  @set <OBJECT> = VISIBLE
          @set <OBJECT> = !VISIBLE

  If an object has its VISIBLE flag set, other characters can examine it at
  their leisure (Being able to see everything (@desc, @succ, @fail, etc.))

  Useful for sharing your coding knowledge with others.


  The VISIT flag...
  ~~~~~~~~~~~~~~~~~
  USAGE:  @set <OBJECT> = VISIT
          @set <OBJECT> = !VISIT

  This flag can only be set/reset on rooms and things.

  When a room or thing has its VISIT flag reset, users will not be able to
  visit other characters (Using the 'visit' command) when they are in that
  location, regardless of whether the room/thing has its ABODE flag set or
  not.


  The VOWEL article flag...
  ~~~~~~~~~~~~~~~~~~~~~~~~~
  USAGE:  @set <OBJECT> = VOWEL
          @set <OBJECT> = !VOWEL

  This flag can only be set on things, rooms, exits and characters.

  When set on one of the above types of object ('@set <OBJECT> = VOWEL'),
  the object will be given the vowel article (An), e.g:

  @set orange = VOWEL          (Gives 'An Orange'.)


  The WARP flag...
  ~~~~~~~~~~~~~~~~
  USAGE:  @set <OBJECT> = WARP
          @set <OBJECT> = !WARP

  This flag can only be set/reset on rooms and things.

  When a room or thing has its WARP flag reset, users will never be teleported
  to that location by the 'warp' command, regardless of whether the room/thing
  has its ABODE flag set or not.


  The WIZARD flag...
  ~~~~~~~~~~~~~~~~~~
  USAGE:  @set <COMMAND>|*<NAME> = WIZARD  = <REASON>
          @set <COMMAND>|*<NAME> = !WIZARD = <REASON>

  This flag can only be set/reset by Elder Wizards/Druids and above.

  As well as giving characters Wizard/Druid status (See the section on
  Wizards/Druids near the beginning of this manual), the WIZARD flag can
  also be set on compound commands, which has the following effects (In
  addition to those given by the APPRENTICE flag)...

  *  Characters '@force'd to do things within the compound command (If owned by
     Admin) will not be logged as a hack to the 'Hack' log when the compound
     command is used by a Mortal.  It will also prevent logging to the 'Force'
     log.

  *  Allows use of '@with connected...' in a Builder owned compound command.

  *  'page', 'tell' and '@notify' can be used with '@with connected...' in the
      compound command (If the compound command is owned by a member of Admin
      who no-longer has their SHOUT flag.)  The WIZARD flag also stops these
      commands from being logged to the 'Shout' log file when used with
      '@with connected...'

  *  'shout' and '@boot' can be used within the compound command (If owned by
     Admin.)

  *  'Use of '@pay' and '@transfer' will not be logged to the 'Transaction' log.
  
  *  Allows compound commands to supercede hardcoded commands.  Otherwise,
     the command search algorithm will find the correct hardcoded command.  

  IMPORTANT NOTICE:  The WIZARD flag should never be set on Builder owned
                     compound commands without also setting the READONLY
                     flag (To prevent the Mortal user from maliciously
                     editing it to pick up a number of Admin-only privileges.)

                     Ideally (Where possible), the APPRENTICE flag should be
                     set on Builder owned compound commands instead, so that
                     only the necessary level of privileges is granted.


  The YELL and SHOUT flags...
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  USAGE:  @set <OBJECT> = YELL|SHOUT
          @set <OBJECT> = !YELL|!SHOUT

  PLEASE NOTE:  The SHOUT flag is an alias for the YELL flag.

  When set on a room or container, the YELL flag allows any character with a
  YELL flag to yell messages to other characters on your property.

  Only Apprentice Wizards/Druids and above may set/reset a (Lower level)
  character's YELL flag.  If an Apprentice Wizard/Druid or above's YELL
  flag is removed, they will no-longer be able to shout messages (Using
  'shout'.)

  Newly created rooms and characters always start off with their YELL flag
  set as default.

-------------------------------------------------------------------------------

  @shutdown
  ~~~~~~~~~
  USAGE:  @shutdown <REASON> = <TIME>
          @shutdown cancel

  This command can only be used by Deities and the Supreme Being.

  '@shutdown' starts the server shutdown sequence, which once <TIME> (In
  minutes) has expired, shuts down the TCZ-based MUD in a controlled manner
  and dumps the database to disk, e.g:  '@shutdown for a code update = 5'
  shuts down the TCZ-based MUD after 5 minutes of warnings to all connected
  users.

  The shutdown sequence can be cancelled at any time by typing '@shutdown
  cancel'.  Only the Supreme Being can specify a value of less than 5 for
  <TIME>.

  From time to time, the system administrator(s) may need to shutdown the
  TCZ-based MUD (For code updates, server maintenance, etc.)

-------------------------------------------------------------------------------

  @site
  ~~~~~
  USAGE:  @site set <IP ADDRESS> = [!]<FLAG> [[!]<FLAG>] [...] [= <REASON>]
          @site [max]connections <IP ADDRESS> = <LIMIT> = <REASON>
          @site address <IP ADDRESS> [=] <NEW IP ADDRESS> 
          @site list [<PAGE NO>] [<IP ADDRESS>|<DESC>]
          @site desc <IP ADDRESS> [=] <DESCRIPTION>
          @site add <IP ADDRESS> [=] <DESCRIPTION>
          @site delete <IP ADDRESS>
          @site [view] <IP ADDRESS>
          @site stats

  The '@site' command (Which can only be used by Apprentice Wizards/Druids and
  above) is used to view, list, add, modify or delete Internet sites from the
  database of registered Internet sites.

  The database of registered Internet sites holds details of Internet sites
  (A meaningful description and number of characters connected/created from
  site), allows flags to be set/reset on particular sites (To implement
  create bans, site bans, etc.) and allows the number of connections
  (Simultaneously) from sites to be restricted.


  @site [view] <IP ADDRESS>
  ~~~~~~~~~~~~~~~~~~~~~~~~~
  This form of '@site' displays full details of the Internet site specified
  (Including number of characters connected, created and presently 'on-line'
  from site.)

  Examples:  '@site view 193.133.51.*', '@site 193.133.51.3', etc.


  @site list [<PAGE>] [<IP ADDR>|<DESC>] [= [!][<FLAG>][[!]<FLAG>][...]]
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  This form of '@site' lists Internet sites in the database of registered
  Internet sites (Ordered by IP address.)  Sites matching a particular
  IP address can be listed by specifying the IP address and (Optionally)
  using a '*' in place of any of the numbers in it, e.g:  '@site list
  193.133.51.*' will list all sites with an IP address beginning '193.133.51'.

  You can also list all sites with a description which matches the wildcard
  specification you give, e.g:  '@site list *leeds*' will list every site
  with the text 'leeds' in its description.

  You can list sites which only have particular Internet site flags set (Or
  not set), e.g:  '@site list = banned' will list all Internet sites which
  have been banned, '@site list = !create' will list all Internet sites which
  have been banned from creating new characters.  Multiple Internet site flags
  may be specified, e.g:  '@site list = create guests' lists all Internet sites
  with either the CREATE or GUESTS site flag(s) set.

  By default, if more than a page of Internet sites are found, the first page
  of sites will be displayed.  If <PAGE> is specified, that page of sites will
  be displayed, e.g:  '@sites list 1', '@sites list 2', '@sites list 2
  193.133.51.3', etc.


  @site add <IP ADDRESS> [=] <DESCRIPTION>
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  This form of '@site' adds a new Internet site to the database of registered
  Internet sites.  Please DO NOT add details of any sites other than
  universities, companies, Internet providers, BBS's, etc. (I.e:  Do not add
  details of someone's home computer (Even if it does have a fixed address),
  unless connections/character creation from their machine need to be banned.)

  <IP ADDRESS>   This is the Internet IP address of the Internet site.  This
                 MUST be specified in numeric form (E.g:  'n.n.n.n'.)  If the
                 site you're adding is a university, company or Internet
                 provider, the chances are that they have a Class B address,
                 which means you should specify the address as ('n.n.n.*'  -
                 I.e:  Replace last number of address with a '*'.)  If the
                 site is a BBS, the chances are that they only have one
                 Internet address in the form of 'n.n.n.n'.  Example IP
                 addresses are:  '193.133.51.3', '193.133.51.*',
                 '193.128.34.*', etc.

  <DESCRIPTION>  This is a short, meaningful description of what the Internet
                 site is.  This should be in the form of
                 '<UNIVERSITY/COMPANY/PROVIDER/BBS>, <TOWN/CITY>,
                 <STATE/PROVINCE/COUNTY>, <COUNTRY>'  Please begin the names
                 of places with a capital letter and DO NOT use abbreviations
                 (I.e:  'uni' for 'university', 'TVU' for 'Thames Valley
                 University', etc.)  Example descriptions:  'The University of
                 Leeds, England', 'Current Technologies Corporation, Mission
                 Hills, California, USA', 'Demon Internet (Internet provider),
                 UK', etc.

  Examples:
  ~~~~~~~~~
  @site add 198.175.4.* = Air Force Academy, Colorado, USA
  @site add 129.10.1.* = The University of Leeds, England
  @site add 158.152.*.* = Demon Internet (Internet Provider), UK


  @site set <IP ADDRESS> = [!]<FLAG> [[!]<FLAG>] [...] [= <REASON>]
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  This form of '@site' is used to set or reset site flags on an Internet site.
  These flags allow connections/character creation/Admin connections from
  particular sites to be banned, site addresses to be looked up on the
  Domain Name Server and site details made readonly.

  When resetting the CREATE site flag or setting the BAN/UNCONDITIONAL site
  flags, you will need to give a reason for doing so.


  The following flags may be set/reset on Internet sites...
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  ADMIN          (Elder Wizards/Druids and above only)  When this flag is reset
                 on an Internet site, Apprentice Wizards/Druids and above will
                 no-longer be able to connect from it.  By default, every
                 new Internet site has this flag.

  BAN            (Elder Wizards/Druids and above only)  When this flag is set
                 on an Internet site, users from the site will not be able to
                 connect OR create characters.  However, Apprentice Wizards/
                 Druids and above will still be able to connect (Unless the
                 ADMIN site flag is also reset on the site.)

  CREATE         (Apprentice Wizards/Druids and above)  When this flag is
                 reset on an Internet site, users from the site will no-longer
                 be able to create new characters (At the login screen.)  By 
                 default, every new Internet site has this flag.

  DNS            (Wizards/Druids and above only)  When this flag is set on an
                 Internet site, the name of the site will be looked up on the
                 Domain Name Server and displayed in the host list, etc.
                 (E.g:  'tcz.mud.host' instead of '123.145.167.189'.)

                 THIS FLAG SHOULD BE USED WITH CARE:  Some Internet site
                 addresses do not resolve easily (If at all), and could cause
                 the TCZ-based MUD to 'lock up' for anything between 1 and 30
                 minutes.

  GUESTS         (Apprentice Wizards/Druids and above)  When this flag is reset
                 on an Internet site, Guest characters will no-longer be able
                 to connect from the site.  By default, every new Internet
                 site has this flag.

  NODNS          (Wizards/Druids and above only)  When this flag is set on an
                 Internet site, the name of the site WILL NOT be looked up on
                 the Domain Name Server.  This flag should be set on all site
                 addresses which are known not to resolve properly.

  READONLY       (Elder Wizards/Druids and above only)  When this flag is set
                 on an Internet site, the details and flags of the site can't
                 be modified, and the site can't be deleted.

  UNCONDITIONAL  (Elder Wizards/Druids and above only)  If this site flag is
                 set on a site along with the BAN site flag, the ban becomes
                 unconditional and all connections from the site will be
                 completely blocked (They wont even get as far as the login
                 screen (Instead, the site ban message will be displayed and
                 the connection closed.))  If set on a site which has had the
                 maximum number of connections allowed (Simultaneously) from
                 it restricted (Using '@site maxc'), further connections
                 will be completely blocked when the maximum number of
                 users allowed (Simultaneously) are connected.


  Examples:
  ~~~~~~~~~
  @site set 198.234.52.* = !create = Because of the continuous stream of
  abusive users/bogus characters being created from this site.

  @site set 198.124.31.* = ban = Due to all users connecting from this site
  doing nothing else other than harrassing and abusing other users (Even after
  the CREATE site flag was removed from this site.)


  @site desc <IP ADDRESS> [=] <DESCRIPTION>
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  This form of '@site' allows the description of an Internet site to be
  changed (If it's incorrect.)  The new description should be in the form
  of '<UNIVERSITY/COMPANY/PROVIDER/BBS>, <TOWN/CITY>, <STATE/PROVINCE/COUNTY>,
  <COUNTRY>', the names of places should all begin with a capital letter and
  abbreviations (Such as 'uni' for 'university', etc.) must not be used.

  Example:  '@site desc 193.61.80.* = Nene College, Northampton, England'.

  PLEASE NOTE:  Some universities/companies with Class B (Or even Class C)
                Internet addresses lease a few of their available addresses
                to other (Smaller) universities/colleges/companies.  This
                means that if someone connects from one of these places,
                their address will match the address of the providing company
                (If this is the case, you should add an individual entry for
                them (In the form of 'n.n.n.n'), providing their 'site' isn't
                their home computer.


  @site address <IP ADDRESS> [=] <NEW IP ADDRESS>
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  This form of '@site' can be used by Apprentice Wizards/Druids and above to
  change the IP address of an Internet site with an incorrect IP address in
  the database of registered Internet sites.

  Examples:  '@site address 193.113.51.3 = 193.133.51.3', '@site address
             129.10.1.3 = 129.10.1.*', etc.


  @site [max]connections <IP ADDRESS> = <LIMIT> = <REASON>
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  This form of '@site' can be used by Elder Wizards/Druids and above to
  restrict the maximum number of connections allowed (Simultaneously) from
  an Internet site.  If 'none' is specified for <LIMIT>, maximum connections
  allowed from the site will be unrestricted (The default for a newly added
  site.)

  Examples:  '@site maxconnections 193.133.51.* = 5', '@site maxconnections
             193.133.51.* = none', etc.


  @site delete <IP ADDRESS>
  ~~~~~~~~~~~~~~~~~~~~~~~~~
  This form of '@site' can be used by Wizards/Druids and above to remove an
  Internet site from the database of registered Internet sites.

  Examples:  '@site delete 193.133.51.*', '@site delete 193.78.143.8', etc.


  @site stats
  ~~~~~~~~~~~
  This form of '@site' displays the total number of registered Internet sites
  and how many are unconditionally banned, create banned, Guest character
  banned, Admin banned, Read-Only, NoDNS and DNS.

-------------------------------------------------------------------------------

  @size
  ~~~~~
  USAGE:  @size all [= yes]
          @size [<NAME>]

  Displays a database memory usage summary for yourself (Or the character
  <NAME>, if <NAME> is specified and you're an Apprentice Wizard/Druid or
  above.)

  This command shows you how many objects of each type you own, along with the
  total amount of memory used by each (Uncompressed and compressed) and the
  compression ratio.

  You may notice that some of the compression ratios (Especially for particular
  object types) are fairly low.  This is because only text (I.e:  Descriptions,
  etc.) can be compressed.  Integers, pointers and other object data cannot be
  compressed, but are taken into account by '@size'.  The text itself is
  often compressed with a ratio of 70% or better.

  Elder Wizards/Druids and above may view the database memory usage summary
  for all objects in the entire database, using '@size all [= yes]' (WARNING:
  This may cause excessive lag, because each object in the entire database
  needs to be decompressed  -  For this reason, the second parameter 'yes'
  must be given.)

-------------------------------------------------------------------------------

  @skip
  ~~~~~
  USAGE:  @skip

  This command can only be used from within compound commands.

  '@skip' skips the rest of the block of commands executed by a multi-lined
  '@if', '@case', '@for', '@with', '@while' or '@foreach'.  Unlike the
  '@breakloop' command, only the rest of the block is skipped  -  Looping
  commands such as '@for', '@with', '@while' and '@foreach' will continue
  looping.

  NOTE:  '@skip' does not change the return value or return result
         (Success/failure) from the previous executed command.


  Example:
  ~~~~~~~~
  @for 1 to 10 do
       @if {@eval $4 = 5} do @skip
       @echo Loop number $4.
  @end

-------------------------------------------------------------------------------

  @sort
  ~~~~~
  USAGE:  @sort <ARRAY> = <ORDER> <DIRECTION> <KEY1> [<KEY2>]

  '@sort' sorts the elements or index names of a dynamic array into
  alphabetical or numerical order, using efficient internal sorting algorithms.

  <ARRAY> is the dynamic array to sort.  <ORDER> is the sort order, which can
  either be 'alpha' (Alphabetical sort) or 'numeric' (Numerical sort.)
  <DIRECTION> is the sort direction, which can either be 'ascending' or
  'descending'.

  <KEY1> is the primary sort key, which can either be 'elements' (Sort dynamic
  array by its elements) or 'index' (Sort dynamic array by its index names.)
  E.g:  '@sort #12345 = alpha ascending elements'.


  The secondary key ([<KEY2>])...
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  Optionally, a secondary sort key may be specified, which can be in any of the
  following forms...

  <NUMBER> "<SEPARATOR>"  If the elements/index names of the dynamic array
                          contain a list of items, separated by a given string
                          (E.g:  ';'), you can sort the dynamic array by the
                          given item <NUMBER> in each element/index name.

                          E.g:  @sort #12345 = alpha ascending elements 2 ";"

  <NUMBER>                For an alphabetical sort, the elements/index
                          names of the dynamic array will be sorted by
                          the <NUMBER>'th character onwards in the
                          element/index name.

                          For a numerical sort, the elements/index names will
                          be sorted by the <NUMBER>'th numerical value in the
                          element/index name (I.e:  '1' means the 1st numerical
                          value found in each element/index name will be taken
                          as the sort value, '2' means the 2nd numerical value
                          found will be taken as the sort value, etc.)  If an
                          element/index name doesn't contain any numbers, 0 is
                          assumed as the sort value.

                          E.g:  @sort #12345 = numerical ascending elements 2

-------------------------------------------------------------------------------

  @stats
  ~~~~~~
  USAGE:  @stats bandwidth|cmd|chars|connections|resource|tcz
          @stats other [<NAME>]
          @stats [<NAME>]

  '@stats' displays how many of each different type of object you own, and
  the percentage out of the total number of each type in the TCZ-based MUD's
  database.

  '@stats other' displays other statistics for non-objects in the database,
  such as friends/enemies, BBS messages, mail, etc., and the percentage of
  the total in the entire database.  The following statistics are shown:

  Friends/enemies   Number of friends/enemies list entries you have.
  Array elements    Number of dynamic array elements you have.
  BBS sub-topics    Number of BBS sub-topics you own.
  BBS messages      Number of BBS messages you currently have posted.
  BBS readers       Number of BBS messages you have read from those on BBS.
  BBS topics        Number of BBS topics you own.
  Mail items        Number of items of mail you have (Not yet implemented.)
  Aliases           Number of aliases you have.

  For the above two forms of '@stats' ('@stats' and '@stats other'), an
  optional character name may be specified.  This allows Apprentice Wizards/
  Druids and above to view the statistics of other characters.

  The following forms of '@stats' may only be used by Apprentice Wizards/
  Druids and above...

  '@stats bandwidth' displays a summary of bandwidth used by the TCZ-based MUD
  -  The total number of bytes of data transmitted and received since it was
  last restarted are displayed, along with the average per day, hour and
  second.

  '@stats cmd' displays command execution statistics (Since the TCZ-based MUD
  was restarted.)  The total number of user-typed (At the TCZ-based MUD's
  prompt), standard (E.g:  '@' and '@?' commands), editor and compound
  commands executed are displayed along with averages per second, minute,
  hour and day.

  '@stats char' displays how many characters and puppets there are in the
  TCZ-based MUD's database, and how many of these are Morons, Mortals,
  Builders, Experienced Builders/Assistants, Retired Wizards/Druids,
  Apprentice Wizards/Druids, Wizards/Druids, Elder Wizards/Druids and
  Deities along with a percentage for each (Out of the total number
  of characters.)

  '@stats connections' displays a summary of current Telnet and HTML
  connections (Both normal unencrypted and SSL (Secure Socket Layer.))
  The information displayed is as follows:

  Total          Total number of connections.
  Pending        New connection (User has not connected a character yet.)
  Active         Active connection with connected character.
  Delayed        Active connection with processing of next command delayed by
                 more than 3 seconds (Each time a user executes a command,
                 their next command will be delayed by the time it took to
                 execute.  This helps prevent users maliciously or
                 accidentally 'lagging' the TCZ-based MUD by repetitively
                 executing intensive commands/compound commands.)
  Disconnected   Lost connection (If a user disconnects without typing QUIT
                 their connection will remain open for 5 minutes to allow them
                 to reconnect and resume where they left off.)
  Input          Connection has pending input (Queued user commands.)
  Output         Connection has pending output.

  '@stats resource' displays the resource usages on the TCZ-based MUD's server
  (CPU usage, memory usage, etc.)

  '@stats tcz' displays TCZ-based MUD server statistics, which is a log of the
  last 14 days, detailing the peak number of users, users connected/created,
  objects created/destroyed, etc. for each day.  For each category the daily
  average, maximum and total are also displayed.  These statistics are also
  logged daily to the 'Stats' log file.

-------------------------------------------------------------------------------

  @succ
  ~~~~~
  USAGE:  @succ <OBJECT> [= <MESSAGE>]

  This command sets the success message for the <OBJECT> specified.

  An object succeeds when a character manages to satisfy its lock (If it's
  a room, thing or exit), or if it's a compound command, it succeeds when
  the last command executed in it succeeds.

  If the object succeeds, the success message is displayed on the screen of
  the character who caused it to succeed.

  If <MESSAGE> isn't specified, the success message is cleared.


  When is the success message displayed?
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  Command  -  Displayed when the compound command finishes executing, and the
              last command executed succeeded (Not displayed if compound
              command has its '@csuccess' branch set.)

  Exit     -  Displayed when a character goes through the exit (In the same
              room as exit.)

  Room     -  Displayed when the lock of the room is satisfied and a character
              types 'look' (Underneath the room's description), or if the room
              has its OPENABLE flag set, it is displayed when a character
              successfully enters the room.

  Thing    -  Displayed when object is picked up.

-------------------------------------------------------------------------------

  @suffix
  ~~~~~~~
  USAGE:  @suffix <NAME> = <SUFFIX>

  This command can only be used by Apprentice Wizards/Druids and above.

  Sets the name suffix of the character <NAME> to <SUFFIX>.  The name suffix
  of a character is added to the end of their name, e.g:  '@suffix me = the
  greatest' would add 'the greatest' to the end of your name, i.e:  
  'Fred Bloggs the greatest'.

  NOTE:  A name suffix mustn't contain embedded NEWLINE's, and also mustn't
         be longer than 40 characters.

-------------------------------------------------------------------------------

  @teleport (@tel or @location)
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  USAGE:  @teleport <OBJECT> = <DESTINATION>
          @location <OBJECT> = <DESTINATION>
          @tel <OBJECT> = <DESTINATION>

  Teleports <OBJECT> to <DESTINATION>.

  You must control <DESTINATION> and either control <OBJECT> or its current
  location.  If <DESTINATION> has a drop-to, <OBJECT> will end up in the
  drop-to location instead (If <OBJECT> is a thing.)

  If <OBJECT> isn't specified, you'll be teleported to <DESTINATION> (If
  <DESTINATION> isn't a room/container, you'll be teleported to it's current
  location (Providing that's a room/container.))  You can't teleport to a
  location you don't own, unless it has its ABODE flag set.

  To teleport an object to another character, type '@tel <OBJECT> = *<NAME>'
  (This can only be done by Wizards/Druids and above.)

-------------------------------------------------------------------------------

  @temp and @desttemp
  ~~~~~~~~~~~~~~~~~~~
  USAGE:  @temp <NAME> [= <DESCRIPTION>]
          @desttemp <NAME>

  '@temp' sets the description of temporary variable <NAME> (If a temporary
  variable with the name specified doesn't exist, one is created.)  Temporary
  variables can be destroyed using the '@desttemp' command.

  Temporary variables can only be created from within compound commands.  Their
  primary use is for temporary storage, use as counters, etc.

  Once created, a temporary variable is accessible throughout the rest of the
  compound command it was created within and all compound commands called from
  that compound command (Via csuccess/cfailure, '@if', '@case', '@for',
  '@with', '@while', etc.), with the exception of compound commands
  owned by another character.

  You can reference a temporary variable using $<NAME>, e.g:  If you have
  created a temporary variable called 'store' (E.g:  '@temp store =
  <DESCRIPTION>'), you can echo its current description using '@echo $store'.

  All temporary variables created within compound command(s) are destroyed
  automatically when all of the commands have finished executing.  However,
  Mortals are restricted to a maximum of 100 temporary variables defined
  simultaneously, so you should destroy any temporary variables which are
  no-longer needed throughout the rest of the compound command(s).

  Apprentice Wizards/Druids and above are restricted to 250 temporary
  variables.  Elder Wizards/Druids and above are not restricted.

  Return value:  '@temp' returns <DESCRIPTION> as its return value, rather
                 than OK/Error, i.e:  '@echo {@temp test = {@eval 3 * 10}}'
                 will echo '30' to your screen and store '30' in the
                 temporary variable 'test'.


  Example compound command:
  ~~~~~~~~~~~~~~~~~~~~~~~~~
  @command TempTest =\
  @temp name = \{@?namec $3}\
  @if \{@eval "$name" = "*NOTHING*"} do\
      @echo Sorry, the character '%w%l$3%x' doesn't exist.\
      @return\
  @end\
  @echo '%w%l$3%x' matched the character '%y%l$name%x'.\
  @desttemp name

-------------------------------------------------------------------------------

  @test
  ~~~~~
  USAGE:  @test <VALUE>

  '@test' succeeds and returns 'OK' if <VALUE> is greater than 0, otherwise, it
  fails and returns 'Error'.

  NOTE:  This command allowed branching using the success/failure links of a
         compound command before '@if' was implemented.  It was also used in
         conjunction with a very early implementation of '@if'.  Its use in
         TCZ-based MUD's today is limited and it is considered obsolete.


  Examples:
  ~~~~~~~~~
  @test {@eval "{@?realname me}" = "JC Digita"}
  @test {@?set me = male}

-------------------------------------------------------------------------------

  @thing
  ~~~~~~~
  USAGE:  @thing <NAME> [= <DESCRIPTION>]
          @create <NAME> [= <DESCRIPTION>]

  Creates a thing with the name <NAME> (Building Quota used:  10.)
  If <DESCRIPTION> is specified, it's description is set to <DESCRIPTION>.
  You can change its description at any time of course by using '@desc'.

  A thing is a flexible type of object that can be virtually anything you want
  -  Be it a sofa, bed, computer, car, dustbin, you name it, it can be it.  A
  thing can also be made into a container, into which you can put other objects
  providing it has enough volume (A thing's volume is set using the '@volume'
  command.)  If the container is big enough, other characters can even climb
  into it (Using the 'enter' command.)

  By default, any other user will be able to pick up the thing and carry it
  off to another location.  If you do not want this to happen, you will need
  to set the IMMOVABLE flag on the thing by typing '@set <THING> = immovable',
  e.g:  '@set sofa = immovable'.  This will prevent ANYONE from moving it,
  including yourself.

  You can selectively prevent users from moving an object by locking it (Using
  the '@lock' command)
  instead of setting its IMMOVABLE flag.  For example, '@lock <THING> = me'
  will prevent anyone other than yourself moving the object.  See section
  on '@lock' for further details on locks and locking objects.

  If you want to turn the thing into a container, this can be done by
  setting its OPEN/OPENABLE flag(s).  See section on '@set' for more details.

  When you turn a thing into a container, remember to set its mass and
  volume (Using '@mass' and '@volume'), otherwise it wont be big enough
  to hold anything.

  You can remotely reference things by using '#<ID>:<THING>', e.g:  You
  could reference the thing 'computer' inside room #12345 by using
  '#12345:computer'.

-------------------------------------------------------------------------------

  @true
  ~~~~~
  USAGE:  @true

  This command only has effect within a compound command.  It basically
  causes the compound command to succeed at that point.

  One use for it is right at the end of a compound command to force it to
  succeed and execute the compound command linked via its @csucc regardless
  of whether the other commands executed succeeded or not.

  NOTE:  '@true' does not change the return value from the previous executed
         command.

-------------------------------------------------------------------------------

  @unchpid
  ~~~~~~~~
  USAGE:  @unchpid

  This command can only be used within a compound command.

  When used in a compound command, '@unchpid' removes any extra privileges
  picked up via '@chpid'.  NOTE:  You don't need an '@unchpid' at the end
  of a compound command that uses '@chpid'  -  All privileges picked up via
  '@chpid' are automatically removed after the compound command finishes
  executing.

-------------------------------------------------------------------------------

  @undestroy
  ~~~~~~~~~~
  USAGE:  @undestroy list [<PAGE NO>] [<NAME>] [= <OBJECT TYPES>] [= <OWNER>]
          @undestroy #<ID> [#<ID>] [...] [= <NEW OWNER>]

  The '@undestroy' command allows you to recover objects which have recently
  been destroyed (I.e:  If you accidentally destroy the wrong object by
  typing its ID number incorrectly, or destroy an object and then decide
  otherwise.)


  Listing destroyed objects...
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  USAGE:  @undestroy list [<PAGE NO>] [<NAME>] [= <OBJECT TYPES>] [= <OWNER>]

  The first form allows you to list objects on the queue of destroyed objects.
  This allows you to browse through the list and see which objects you may
  recover, along with the original ID number of each object, which you will
  need in order to recover any destroyed objects.

  If <PAGE NO> is specified, that page of destroyed objects will be displayed,
  e.g:  '@undestroy list 1', '@undestroy list 2', etc.

  If <NAME> is specified, destroyed objects which contain the text <NAME> in
  their name will only be listed, e.g:  '@undestroy list bedroom'.

  <OBJECT TYPES> is the types of objects to list (By default, all object types
  are listed, e.g:  '@undestroy list = things rooms' will list destroyed things
  and rooms only, '@undestroy list = properties' will list destroyed properties
  only, etc.

  If <OWNER> is specified, destroyed objects which were originally owned by
  the character <OWNER> will only be listed, providing you are an Experienced
  Builder or above.


  Recovering destroyed objects...
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  USAGE:  @undestroy #<ID> [#<ID>] [...] [= <NEW OWNER>]

  The second form allows you to recover a destroyed object (Or several
  destroyed objects, if more than one ID number is specified.)

  When an object is recovered from the queue of destroyed objects, '@undestroy'
  will attempt to restore the original fields of the object, along with
  CSUCC/CFAIL links, home, destination, parent, lock, etc.  Any destroyed
  objects which are still in the queue of destroyed objects and were
  originally located in or attached to the recovered object will also
  be recovered, and re-attached to the recovered object.  If the object's
  original ID number is still available, it will be allocated that ID
  number again, otherwise a new (Unused) ID number will be allocated to it.

  To recover an object, its original ID number must be specified (If you are
  unusure what its original ID number was, you can use '@undestroy list' to
  find out), e.g:  You destroyed object 'My Bedroom(#12345 RHy)'  -  To
  recover this object, you'd type '@undestroy #12345'.

  If <NEW OWNER> is specified, the owner of the recovered object(s) will be
  changed to the character <NEW OWNER>, providing you have 'write' permission
  to them, and they have sufficient Building Quota.

  PLEASE NOTE:  Destroyed objects are placed on a queue, which is of a finite
                size (Presently 100 objects may be on the queue at any one
                time.)  If the queue is full, then the oldest objects on it
                are permanently destroyed to make room for newly destroyed
                objects.  If you accidentally destroy an object, please try
                to recover it as soon as possible, otherwise it may drop off
                the end of the queue and be lost (Destroyed) permanently.

                You must have sufficient Building Quota to recover a destroyed
                object.  If you do not have sufficient Building Quota, the
                object and/or objects which were originally attached to it
                may not be recovered.

-------------------------------------------------------------------------------

  @unlink
  ~~~~~~~
  USAGE:  @unlink <OBJECT>

  '@unlink' removes the link on the specified <OBJECT>, which can either be
  an exit or a room.

  Unlinking a room removes its drop-to, if set (The location objects go to if
  dropped in that room.)

  Unlinking an exit makes the exit lead nowhere, so you can re-link it (Using
  '@link') to another location.

  NOTE:  Unlinked exits can be re-linked by another Builder, making them the
         new owner.

-------------------------------------------------------------------------------

  @unlock
  ~~~~~~~
  USAGE:  @unlock <OBJECT>

  '@unlock' removes the lock on <OBJECT>, so that any attempted use always
  succeeds.  You must of course own or control the object.

-------------------------------------------------------------------------------

  @variable
  ~~~~~~~~~
  USAGE:  @variable <NAME> [= <INITIAL SETTING>]
          @var <NAME> [= <INITIAL SETTING>]

  Creates a variable called <NAME> attached to yourself (Building Quota used:
  5.)  If <INITIAL SETTING> is specified, the description of the variable is
  set to that.

  Unlike properties which only have a description, variables have all 8
  standard fields (Description, success, failure, drop, etc.)  Because of this,
  variables use more Building Quota than properties  -  You should only use
  variables if you can use most of their fields for useful storage  -  Use a
  property instead if you only need to use one field.

  You can attach a variable to almost any other object (As long as you
  own/control it) by using 'drop' or '@tel'.  You can even drop variables 
  within variables.

  When a variable is on yourself, you can substitute it into any text you're
  typing by typing '$' followed by the name of the variable (E.g:  '$myvar'
  would substitute the description of the variable 'Myvar'.)

  To reference variables attached to anything else other than yourself, you
  must use '#<ID>:<VARIABLE NAME>', e.g:  If I had a variable called 'store'
  attached to a thing called 'Cabinet' with the ID #12345, I could reference
  that variable using '#12345:store', e.g:  To set the variable's description,
  I'd type '@desc #12345:store = <DESCRIPTION>'.

  You can freely use the '@desc', '@succ', '@fail', '@drop', '@odesc',
  '@osucc', '@ofail' and '@odrop' messages of a variable.

-------------------------------------------------------------------------------

  @volume
  ~~~~~~~
  USAGE:  @volume <OBJECT> = <VALUE>|inherit|infinity

  Sets the volume of <OBJECT> to <VALUE> litres (There are 10 litres to a
  cubic metre.)  If 'inherit' is specified for <VALUE>, <OBJECT>'s volume
  will be inherited from its parent object.

  Apprentice Wizards/Druids and above may also set the volume of an object
  to 'infinity'.

-------------------------------------------------------------------------------

  @while
  ~~~~~~
  USAGE:  @while [true|false] <CONDITION> do [<COMMAND>]
                 [<COMMANDS>]
          [@end]

  The '@while' command can be used in two forms:  The first form may only be
  used on a SINGLE LINE.  '@while' will repeatedly execute <COMMAND> until
  the command <CONDITION> succeeds (Or fails, if the keyword 'false' is
  specified.)

  Example:  @while {@eval $5 <= 5} do @echo Loop number:  $5

  The reserved variable $5 is useful in an '@while' statement  -  It
  substitutes the total number of times '@while' has looped (Repeated)
  so far ($4 also substitutes the same.)

  NOTE:  '@while' can only be used from within compound commands (Unless you're
         an Experienced Builder or above.)

  The second form of '@while' allows you to execute a 'block' of commands.

  When using '@while' in this form, it MUST be spread over multiple lines and
  terminated with '@end'.  '@while' and '@end' MUST NOT be preceeded by any
  text other than blank space, or used within {}'s (I.e:  '{@while ...}'.)
  The 'do' keyword MUST NOT be followed with a <COMMAND>.

  The usage of '@while' in this form is identical to the single lined version
  of '@while', except it is spread over multiple lines, e.g:

  @while {@eval $5 < 5} do
         @echo Loop number:  $5
         @echo {@eval 5 - $5} loops remaining.
  @end

  PLEASE NOTE:  You can 'nest' further '@if', '@case', '@for', '@with',
                '@while' and '@foreach' statements (Both single and
                multiple lined) within a multiple line '@while' statement.

-------------------------------------------------------------------------------

  @with
  ~~~~~
  USAGE:  @with [<GRP/RANGE>] [<INDEX>] <OBJECT TYPE> [<OBJECT>] do [<COMMAND>]
                [<COMMANDS>]
          [@end]

  The '@with' command can be used in two forms:  The first form may only be
  used on a SINGLE LINE.  '@with' is used to traverse lists of various object
  types attached to a given object, the elements of a dynamic array or the
  list of connected characters (NOTE:  Only Apprentice Wizards/Druids and
  above may use '@with connected do ...')

  Example:  @with contents here do @echo Current item:  $6

  The reserved variables $4, $5, $6 and $7 are useful in an '@with' statement
  -  These substitute the following...

  $4 substitutes the current item number in the list being processed (Most
     useful when using grouping/range operators with '@with'.)
  $5 substitutes the total number of items processed so far.
  $6 substitutes the name (Or #ID number if you control it) of the object
     currently being processed, or the contents/index name of the dynamic
     array element currently being processed.
  $7 substitutes the description of the object currently being processed,
     or the index name/contents of the dynamic array element currently being
     processed.

  NOTE:  '@with' can only be used from within compound commands (Unless you're
         an Experienced Builder or above.)

  The second form of '@with' allows you to execute a 'block' of commands.

  When using '@with' in this form, it MUST be spread over multiple lines and
  terminated with '@end'.  '@with' and '@end' MUST NOT be preceeded by any
  text other than blank space, or used within {}'s (I.e:  '{@with ...}'.)
  The 'do' keyword MUST NOT be followed with a <COMMAND>.

  The usage of '@with' in this form is identical to the single lined version of
  '@with', except it is spread over multiple lines, e.g:

  @with contents here do
        @echo Item:  $6
        @echo Item number (In list):  $4
  @end
 
  PLEASE NOTE:  You can 'nest' further '@if', '@case', '@for', '@with',
                '@while' and '@foreach' statements (Both single and
                multiple lined) within a multiple line '@with' statement.


  [<GRP/RANGE>]
  ~~~~~~~~~~~~~
  Grouping/range operators may optionally be used with '@with' to process a
  given page or range of objects/elements/connected characters.  For example,
  you can process the first page of objects in the current room's contents
  list using '@with 1:default contents here do ...' or process the 2nd to 5th
  objects using '@with 2-5 contents here do ...', etc.


  [<INDEX>]
  ~~~~~~~~~
  [index[|<FIELD TYPE>][|<FIELD TYPE>...][|absolute]: <WILDCARD>]

  Indexing allows you to only process objects with fields (Name, description,
  etc.) that match a given wildcard specification.  You can specify which
  fields to match against <WILDCARD> by separating them with '|'s, e.g:
  '@with [index|name|desc: *something*] contents here do ...' will only
  process items in the contents list of the room you're in which have the
  text 'something' in their name or description (The '*'s are wildcards  -
  see section on '@find' for details on how to use wildcards.)  If you don't
  specify any fields, name is assumed.

  When processing the elements of a dynamic array, you can use 'desc' (Contents
  of elements) or 'indexname' (Index names of elements) as <FIELD TYPE>'s, e.g:
  '@with [index|desc: *test*] elements myarray do...' will only process
  elements of 'myarray' which contain the text 'test'.

  If you also specify the keyword '|absolute', only the first matching object
  will be processed  -  All others will be ignored.


  <OBJECT TYPE>
  ~~~~~~~~~~~~~
  This is the type of objects/list to process, and can be one of the
  following...

  Alarms, arrays, characters, commands, connected (Process list of connected
  characters), contents (Process contents list of object), elements (Process
  elements of dynamic array), enemies, exits, friends, fuses, index (Process
  index names of the elements of dynamic array), players (Same as characters),
  properties, puppets, rooms, things, variables. 


  [<OBJECT>]
  ~~~~~~~~~~
  This is the name or ID number of the object that the list of objects you'd
  like to process is attached to, the name of the character who's friends list
  you'd like to process, or the dynamic array which you'd like to process the
  elements/index names of.


  Example compound command:
  ~~~~~~~~~~~~~~~~~~~~~~~~~
  @echo {@?newline}Contents of {@?name here}...
  @echo =======================================================================
  @with $1 contents here do @echolist $4 = {@?name $6}({@?id $6})
  @echo =======================================================================
  @echo Items listed: {@?display}.{@?newline}

-------------------------------------------------------------------------------

  @write
  ~~~~~~
  USAGE:  @write <MESSAGE>

  '@write' is a combination of '@echo' and '@oecho'.  It displays <MESSAGE>
  on your screen, and the screen of every user who is in your current
  location.

  You must own or have write permission to your current location to use
  '@write'.


  Example:
  ~~~~~~~~
  @write Everyone in this room will see this message.

-------------------------------------------------------------------------------

  @www
  ~~~~
  USAGE:  @www <NAME> = <WEB SITE URL>
          @www me = <WEB SITE URL>

  '@www' is used to set the web site address of your home page on the World
  Wide Web (WWW) (If you have one.)
  
  E.g:  '@www me = https://github.com/smcvey/tcz'.

  Other characters will see your web site address when they 'scan' you or view
  your profile.

  NOTE:  Your web site address mustn't be more than 128 characters in length,
         or contain embedded NEWLINE's.


===============================================================================
   >>>>>                  Query commands...                            <<<<<
===============================================================================

  Query commands are usually used in compound commands in conjunction with
  another '@' command (Such as '@echo', '@if', etc.) to return the value of
  something, e.g:  '@echo {@?desc me}' will display your description on
  your screen.

  NOTE:  If you want to try out any of the following query commands from
         the command-line (I.e:  Not from within a compound command), use
         the '~' command, e.g:  ~{@?name me}

-------------------------------------------------------------------------------

  {@?absolute}, {@?objective}, {@?possessive}, {@?reflexive} and {@?subjective}
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  USAGE:  {@?possessive [<NAME>]}
          {@?subjective [<NAME>]}
          {@?objective [<NAME>]}
          {@?reflexive [<NAME>]}
          {@?absolute [<NAME>]}

  The query commands '{@?absolute}', '{@?objective}', '{@?possessive}',
  '{@?reflexive}' and '{@?subjective}' return an absolute, objective,
  possessive, reflexive or subjective pronoun respectively, which is
  correct for the character <NAME>'s gender (Or your gender, if <NAME>
  isn't specified.)

  Fails and returns 'Error' if the character <NAME> can't be found.


  Query command:                   Male:     Female:   Neuter:   Unset gender:
  ============================================================================
  {@?absolute},   {@?abs}, {@?a}   his       hers      its       its
  {@?Absolute},   {@?Abs}, {@?A}   His       Hers      Its       Its
  {@?objective},  {@?obj}, {@?o}   him       her       it        it
  {@?Objective},  {@?Obj}, {@?O}   Him       Her       It        It
  {@?possessive}, {@?pos}, {@?p}   his       her       its       its
  {@?Possessive}, {@?Pos}, {@?P}   His       Her       Its       Its
  {@?subjective}, {@?sub}, {@?s}   he        she       it        it
  {@?Subjective}, {@?Sub}, {@?S}   He        She       It        It
  {@?reflexive},  {@?ref}, {@?v}   himself   herself   itself    itself
  {@?Reflexive},  {@?Ref}, {@?V}   Himself   Herself   Itself    Itself
  ============================================================================

-------------------------------------------------------------------------------

  {@?address}
  ~~~~~~~~~~~
  USAGE:  {@?address <OBJECT>}

  Returns a string containing a list of the names of the areas the item is in
  (Starting at its location and working all the way up the area tree as high
  as possible.)  This list is separated by ', ', so you can use the list
  processing queries (See section further on) to process this list
  (Specify ", " as <SEPARATOR>.)


  Example:
  ~~~~~~~~
  @echo {@?address here}

  Fred's house(#315 RHy), Fred's Top Area(#208 RHy), Top Area

-------------------------------------------------------------------------------

  {@?alarms}
  ~~~~~~~~~~
  USAGE:  {@?alarms <OBJECT> [= <NUMBER>]}

  Returns the name (Or ID if you control it) of the first (Or <NUMBER>'th,
  if <NUMBER> is specified) alarm in <OBJECT>'s alarms list.
  Returns '*NOTHING*' if <OBJECT> has no alarms.

  Fails and returns 'Error' if <OBJECT> can't be found.

-------------------------------------------------------------------------------

  {@?alias}
  ~~~~~~~~~
  USAGE:  {@?alias [<NAME> =] <ALIAS>}

  Returns the command that <ALIAS> aliases, or '*NOTHING*' if the alias <ALIAS>
  doesn't exist.  If <NAME> is specified, the character <NAME>'s aliases will
  be searched for <ALIAS>, otherwise your aliases will be searched.

  Fails and returns 'Error' if the character <NAME> can't be found.

-------------------------------------------------------------------------------

  {@?alpha}, {@?digit}, {@?alnum}, {@?punct}, {@?islower}, {@?isupper}
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  USAGE:  {@?[is]alpha "<STRING>"}  -  Alphabetical (a-z, A-Z)
          {@?[is]digit "<STRING>"}  -  Digit (0-9)
          {@?[is]alnum "<STRING>"}  -  Alphabetical (a-z, A-Z) or digit (0-9)
          {@?[is]punct "<STRING>"}  -  Punctuation
          {@?islower "<STRING>"}    -  Lowercase (a-z)
          {@?isupper "<STRING>"}    -  Uppercase (A-Z)

  The above queries test the text character class of a string as indicated
  above.  For example, '{@?alpha}' or '{@?isalpha}' tests <STRING> to see if
  it contains alphabetical (a-z, A-Z) characters only.  If it does, success
  and <STRING> is returned, otherwise failure and 'Error' is returned.

  NOTE:  The 'is' is optional on all of the above query commands except for
         '{@?islower}' and '{@?isupper}'.
 

  Example:
  ~~~~~~~~
  @command classtest = \
     @if \{@?alpha "$1"} do @echo %g%l'%w%l$1%g%l' is alphabetical.\
     @if \{@?digit "$1"} do @echo %g%l'%w%l$1%g%l' is numerical digits.\
     @if \{@?alnum "$1"} do @echo %g%l'%w%l$1%g%l' is alphanumerical.\
     @if \{@?punct "$1"} do @echo %g%l'%w%l$1%g%l' is punctuation.\
     @if \{@?islower "$1"} do @echo %g%l'%w%l$1%g%l' is lowercase.\
     @if \{@?isupper "$1"} do @echo %g%l'%w%l$1%g%l' is uppercase.

-------------------------------------------------------------------------------

  {@?arrays}
  ~~~~~~~~~~
  USAGE:  {@?arrays <OBJECT> [= <NUMBER>]}

  Returns the name (Or ID if you control it) of the first (Or <NUMBER>'th,
  if <NUMBER> is specified) dynamic array in <OBJECT>'s dynamic arrays list.
  Returns '*NOTHING*' if <OBJECT> has no dynamic arrays.

  Fails and returns 'Error' if <OBJECT> can't be found.

-------------------------------------------------------------------------------

  {@?area}
  ~~~~~~~~
  USAGE:  {@?area <OBJECT> = <LOCATION>}

  Succeeds if <OBJECT> is in <LOCATION> or any of the rooms within 
  <LOCATION>.

  Fails and returns 'Error' if <OBJECT> or <LOCATION> can't be found, or
  <OBJECT> isn't within <LOCATION>.

-------------------------------------------------------------------------------

  {@?areaname}
  ~~~~~~~~~~~~
  USAGE:  {@?areaname <OBJECT>}

  Returns the name of the area <OBJECT> is in (The name of an area can be set
  with '@areaname'.)

  '*NOTHING*' is returned if <OBJECT> is not within a named area.

  Fails and returns 'Error' if <OBJECT> can't be found.

-------------------------------------------------------------------------------

  {@?areanameid}
  ~~~~~~~~~~~~~~
  USAGE:  {@?areanameid <OBJECT>}

  Returns the name (Name of the object, not it's area name) (Or ID number if
  you control it) of the area <OBJECT> is in.

  '*NOTHING*' is returned if <OBJECT> is not within a named area.

  Fails and returns 'Error' if <OBJECT> can't be found.

-------------------------------------------------------------------------------

  {@?article}
  ~~~~~~~~~~~
  USAGE:  {@?article <OBJECT> = indefinite|INDEFINITE|definite|DEFINITE}

  Returns the article ('A ', 'An ' or 'Some ') of <OBJECT> if set, otherwise
  returns ''.

  Article flag:   indefinite  INDEFINITE  definite  DEFINITE
  ==========================================================
  CONSONANT       a           A           the       The
  VOWEL           an          An          the       The
  PLURAL          some        Some        the       The
  ==========================================================

  Fails and returns 'Error' if <OBJECT> can't be found.

-------------------------------------------------------------------------------

  {@?averageactive}
  ~~~~~~~~~~~~~~~~~
  USAGE:  {@?averageactive [<NAME>]}

  Returns the average time that the character <NAME> has spent active (Not
  idling) whilst connected to the TCZ-based MUD without disconnecting in
  seconds, e.g:  '@echo {@?interval {@?averageactive me}}' will display
  your average active time.

  Average active time is worked out by dividing total active time by total
  number of logins.

  Fails and returns 'Error' if the character <NAME> can't be found.

-------------------------------------------------------------------------------

  {@?averageidle}
  ~~~~~~~~~~~~~~~
  USAGE:  {@?averageidle [<NAME>]}

  Returns the average time that the character <NAME> has spent idle whilst
  connected to the TCZ-based MUD without disconnecting in seconds, e.g:
  '@echo {@?interval {@?averageidle me}}' will display your average idle
  time.

  Average idle time is worked out by dividing total idle time by total
  number of logins.

  Fails and returns 'Error' if the character <NAME> can't be found.

-------------------------------------------------------------------------------

  {@?averagelogins}
  ~~~~~~~~~~~~~~~~~
  USAGE:  {@?averagelogins [<NAME>]}

  Returns the average time in seconds between the character <NAME>'s logins to
  the TCZ-based MUD, e.g:  '@echo {@?interval {@?averagelogins me}}' will
  display the average time between your logins.

  Average time between logins is worked out by dividing the time between now
  and when a character was created by their total number of logins.

  Fails and returns 'Error' if the character <NAME> can't be found.

-------------------------------------------------------------------------------

  {@?averagetime}
  ~~~~~~~~~~~~~~~
  USAGE:  {@?averagetime [<NAME>]}

  Returns the average time that the character <NAME> has spent connected to
  the TCZ-based MUD without disconnecting in seconds, e.g:  '@echo {@?interval
  {@?averagetime me}}' will display your average connect time.

  Average connect time is worked out by dividing total connect time by total
  number of logins.

  Fails and returns 'Error' if the character <NAME> can't be found.

-------------------------------------------------------------------------------

  {@?balance}
  ~~~~~~~~~~~
  USAGE:  {@?balance [<NAME>]}

  If the character <NAME> isn't specified, the amount of credit (Money) you
  have in your bank balance is returned, otherwise the amount of credit the
  character <NAME> has in their bank balance is returned.

  Fails and returns 'Error' if the character <NAME> can't be found.

-------------------------------------------------------------------------------

  {@?bank}
  ~~~~~~~~
  USAGE:  {@?bank}

  Returns the #ID number (Or name if you do not have read permission) of the
  TCZ-based MUD's bank room.

-------------------------------------------------------------------------------

  {@?bbs}
  ~~~~~~~
  USAGE:  {@?bbs}

  Returns the #ID number (Or name if you do not have read permission) of the
  TCZ-based MUD's BBS room.

-------------------------------------------------------------------------------

  {@?boolean}
  ~~~~~~~~~~~
  USAGE:  {@?[is]boolean "<STRING>"}

  Succeeds and returns 'OK' if <STRING> is boolean ('True', 'Yes', 'OK', '1'),
  otherwise fails and returns 'Error'.


  Example:
  ~~~~~~~~
  @command booleantest = \
     @if \{@?boolean "$1"} do\
         @echo %g%l'%w%l$1%g%l' is %y%lTRUE%g%l.\
     @else\
         @echo %r%l'%w%l$1%r%l' is %y%lFALSE%r%l.\
     @end

-------------------------------------------------------------------------------

  {@?capitalise}
  ~~~~~~~~~~~~~~
  USAGE:  {@?capitalise "<STRING>"}

  Capitalises the first letter of <STRING> and returns the resulting string.


  Example:
  ~~~~~~~~
  {@?capitalise "the virtual world of TCZ."}

  ...returns 'The virtual world of TCZ.'

-------------------------------------------------------------------------------

  {@?cmdname}
  ~~~~~~~~~~~
  USAGE:  {@?cmdname}

  For compound commands which have multiple names (Separated by ';'s, e.g:
  '@command sit;stand;relax'), '{@?cmdname}' returns the name by which the
  compound command was executed.  Returns '*NOTHING*' if not called from
  within a compound command.


  Example compound command 'sit;stand;relax':
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  @if {@eval "{@?cmdname}" = "sit"} do
      @echo You sit down and rest.
      @oemote sits down and rests.
  @else {@eval "{@?cmdname}" = "relax"} do
      @echo You sit back and relax.
      @oemote sits back and relaxes.
  @else {@eval "{@?cmdname}" = "stand"} do
      @echo You stand up.
      @oemote stands up.
  @end

-------------------------------------------------------------------------------

  {@?cfail}
  ~~~~~~~~~
  USAGE:  {@?cfail <COMMAND>}

  Returns the ID of the compound command that the cfailure of the compound
  command <COMMAND> is linked to.  If <COMMAND> isn't specified, the current
  compound command being executed is assumed.

  Fails and returns 'Error' if <COMMAND> can't be found.

-------------------------------------------------------------------------------

  {@?characters}  (Or {@?players})
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  USAGE:  {@?characters <OBJECT> [= <NUMBER>]}
          {@?players <OBJECT> [= <NUMBER>]}

  Returns the name (Or ID if you control it) of the first (Or <NUMBER>'th,
  if <NUMBER> is specified) character in <OBJECT>'s contents list.
  Returns '*NOTHING*' if <OBJECT> has no characters.

  Fails and returns 'Error' if <OBJECT> can't be found.

-------------------------------------------------------------------------------

  {@?colourmap}
  ~~~~~~~~~~~~~
  USAGE:  {@?colourmap "<MAP>" "<TEXT>"}

  Applies a string of colour codes (Similar to substitutions) to a string
  of text.  This is especially useful for ASCII art or complex colour
  sequences which can make the text to which they add colour too difficult
  to edit.  The same code used for '{@?colourmap}' is used to add colour
  to the map.

  <MAP> is the list of colour map codes, which will be applied to their
  respective characters in the string <TEXT> in order.  If <MAP> is shorter
  than <TEXT>, the sequence in <MAP> will be repeated from the start as many
  times as neccessary.  To prevent repetition, include a '!' in <MAP>.

  <TEXT> is the string which the colour map codes in <MAP> will be applied
  to, in order.


  The following colour map codes can be used:
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  z  Dark Black     Z  Light Black     0  Black Background     d  Dark   
  r  Dark Red       R  Light Red       1  Red Background       l  Light
  g  Dark Green     G  Light Green     2  Green Background     f  Flashing
  y  Dark Yellow    Y  Light Yellow    3  Yellow Background    u  Underline
  b  Dark Blue      B  Light Blue      4  Blue Background      x  Default
  m  Dark Magenta   M  Light Magenta   5  Magenta Background
  c  Dark Cyan      C  Light Cyan      6  Cyan Background      #  Comment
  w  Dark White     W  Light White     7  White Background     !  No repeat


  NOTE:  Colour codes are case sensitive.

         '#' is used for comments in <TEXT>, replacing the corresponding
         characters with a space (' '.)

         '!' prevents repetition if <MAP> is shorter than <TEXT>.


  Examples:
  ~~~~~~~~~
  @echo {@?colourmap "RGYBMC" "Some very colourful text."}
  @echo {@?colourmap "RrYy x!" "Only the first word will be coloured."}
  @echo {@?colourmap "zrgybmcwZRGYBMCW01234567xldfu"
        "zrgybmcwZRGYBMCW01234567xldfu"}
  @echo {@?colourmap "RRRR ####### GGGG" "Some Comment Text"}

-------------------------------------------------------------------------------

  {@?commands}
  ~~~~~~~~~~~~
  USAGE:  {@?commands <OBJECT> [= <NUMBER>]}

  Returns the name (Or ID if you control it) of the first (Or <NUMBER>'th, if
  <NUMBER> is specified) compound command in <OBJECT>'s compound command list.
  Returns '*NOTHING*' if <OBJECT> has no compound commands.

  Fails and returns 'Error' if <OBJECT> can't be found.

-------------------------------------------------------------------------------

  {@?connected}
  ~~~~~~~~~~~~~
  USAGE:  {@?connected <NAME>}

  Succeeds if the character <NAME> is currently connected to the TCZ-based MUD.

  Fails and returns 'Error' if they aren't connected, or the character <NAME>
  isn't found.

-------------------------------------------------------------------------------

  {@?contents}
  ~~~~~~~~~~~~
  USAGE:  {@?contents <OBJECT>}

  Returns the name (Or ID if you control it) of the first object in <OBJECT>'s
  contents list.  Returns '*NOTHING*' if <OBJECT> has no contents.

  Fails and returns 'Error' if <OBJECT> can't be found.

-------------------------------------------------------------------------------

  {@?controller}
  ~~~~~~~~~~~~~~
  USAGE:  {@?controller [<NAME>]}

  Returns the controller of the character <NAME> (Or your controller, if <NAME>
  isn't specified.)  If <NAME> isn't a puppet, their controller will be
  themselves.

  Fails and returns 'Error' if the character <NAME> can't be found.

-------------------------------------------------------------------------------

  {@?created}
  ~~~~~~~~~~~
  USAGE:  {@?created [<OBJECT>] [= epoch|longdate]}

  Returns the time and date when the object <OBJECT> was created (Or when you
  were created, if <OBJECT> isn't specified) in either the EPOCH or LONGDATE
  date/time format (If the date/time format is not specified, EPOCH will be
  assumed), e.g:  '@echo {@?realtime {@?created here}}' will display the
  time and date when the room you're currently standing in was created
  (NOTE:  You don't have to own <OBJECT> to use this query command.)

  For more information on the EPOCH and LONGDATE date/time formats, please
  see section on '{@?realtime}'.

  Fails and returns 'Error' if <OBJECT> can't be found.

-------------------------------------------------------------------------------

  {@?credit}
  ~~~~~~~~~~
  USAGE:  {@?credit [<OBJECT>]}

  If <OBJECT> specified is a character, the amount of credit they have in
  their pocket is returned.  If <OBJECT> is a room or thing, the amount of
  credit currently dropped in that location is returned.  If no <OBJECT>
  is specified, the amount of credit you have in your pocket is returned.

  Fails and returns 'Error', if the object <OBJECT> can't be found.


  Examples:
  ~~~~~~~~~
  @echo You have {@?credit} credits in your pocket.
  @echo There are {@?credit here} credits in your current location.

-------------------------------------------------------------------------------

  {@?csize}
  ~~~~~~~~~
  USAGE:  {@?csize [<OBJECT>]}

  Returns the compressed size of <OBJECT> (Or yourself, if <OBJECT> isn't
  specified) in bytes.

  Fails and returns 'Error' if <OBJECT> can't be found.

-------------------------------------------------------------------------------

  {@?cstring}
  ~~~~~~~~~~~
  USAGE:  {@?cstring <OBJECT>}

  Returns the contents string of the room or thing <OBJECT>.  If it does not
  have a contents string, the default of 'Contents:' will be returned.

  Fails and returns 'Error' if <OBJECT> can't be found, or is not a room or
  thing.

-------------------------------------------------------------------------------

  {@?csucc}
  ~~~~~~~~~
  USAGE:  {@?csucc <COMMAND>}

  Returns the ID of the compound command that the csuccess of the compound
  command <COMMAND> is linked to.  If <COMMAND> isn't specified, the current
  compound command being executed is assumed.

  Fails and returns 'Error' if <COMMAND> can't be found.

-------------------------------------------------------------------------------

  {@?datetime}
  ~~~~~~~~~~~~
  USAGE:  {@?datetime <DATE> [= [epoch|longdate] [date|time]]}

  Converts the string <DATE> to a date/time in either the EPOCH or LONGDATE
  numeric date/time format.  '{@?datetime}' fully validates the given date,
  taking the number of days per month and leap years into account.

  The date/time must be given in the following order:  <DAY> <MONTH> <YEAR>
  <HOUR> <MINUTE> <SECOND>, e.g:  The date 'Tuesday 11th June 1996, 3:10.21 pm'
  could also be specified in the following formats:  '11 June 1996, 3:10.21pm',
  '11/6/1996 - 15:10.21', 'Mon 11 Jun 1996; 3-10-21pm', etc.  The time may
  optionally be omitted (12:00.00 am will be assumed if the time is omitted.)

  If 'longdate' is specified, the converted date will be returned in the
  LONGDATE date format, otherwise it will be returned in EPOCH date/time
  format.  Please see section on '{@?realtime}' for more information on
  the EPOCH and LONGDATE date/time formats.

  If 'date' is specified, <DATE> will be converted as a date only, otherwise if
  'time' is specified, <DATE> will be converted as a time only.  If neither are
  specified, <DATE> will be converted as date and time.

  For more information on the EPOCH and LONGDATE date/time formats, please
  see section on '{@?realtime}'.

  NOTE:  TCZ-based MUDs are Year 2000 complient (Y2K) because all dates
         stored internally use either the EPOCH or LONGDATE format.
     
         Two-digit dates are handled as follows:
         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
         00 - 37  =  2000 - 2037
         38 - 69  =  2038 - 2069  (LONGDATE only)
         38 - 69  =  1938 - 1969  (EPOCH only)
         70 - 99  =  1970 - 1999


  Examples:
  ~~~~~~~~~
  @echo {@?realtime {@?datetime Tuesday 11th June 1996, 3:10.21 pm}}
  @echo {@?realtime {@?datetime 11/6/1996 3:10.21pm}}
  @echo {@?realtime {@?datetime 29/02/00}}

-------------------------------------------------------------------------------

  {@?delay}
  ~~~~~~~~~
  USAGE:  {@?delay [<NAME>]}

  If the character <NAME> isn't specified, your combat delay (The amount of
  time in seconds until you can next fight/use a weapon), otherwise the
  character <NAME>'s combat delay is returned, providing you're of a
  higher level than them, or they're one of your puppets.

  Fails and returns 'Error' if the character <NAME> can't be found.

-------------------------------------------------------------------------------

  {@?desc}
  ~~~~~~~~
  USAGE:  {@?desc <ARRAY>[<ELEMENT>]}
          {@?desc <OBJECT>}

  Returns the description of <OBJECT>.

  '{@?desc}' can also be used to return the description (Or contents if you
  like) of a dynamic array element (Or a range of elements), e.g:  '{@?desc
  myarray[2]}' returns the description of the 2nd element of the dynamic
  array 'myarray' and '{@?desc myarray[test]}' returns the description of the
  element with the index name 'test' of 'myarray'.

  If a range of elements is specified, the descriptions of these elements
  will be returned, separated by NEWLINE's, e.g:  '{@?desc myarray[4..7]}'
  will return the descriptions of elements 4, 5, 6 and 7 of the dynamic
  array 'myarray'.

  Fails and returns 'Error' if <OBJECT> or <ARRAY> can't be found.

-------------------------------------------------------------------------------

  {@?destination}
  ~~~~~~~~~~~~~~~
  USAGE:  {@?destination [<OBJECT>]}

  If <OBJECT> is a character or a thing, {@?destination} returns the name
  (Or ID if you control <OBJECT>) of the character's/thing's home location.

  If <OBJECT> is an exit, {@?destination} returns the name/ID of the room
  where you'll end up if you go through the exit.

  If <OBJECT> is a room, {@?destination} returns the name/ID of its dropto
  room.

  Fails and returns 'Error' if <OBJECT> can't be found.

-------------------------------------------------------------------------------

  {@?display}
  ~~~~~~~~~~~
  USAGE:  {@?display}

  '{@?display}' returns the number of items processed after using a 
  grouping/range operator with @with, @find, etc.

  To get an idea of what '{@?display}' does, create the following compound
  command...

  @command display = @echo\
  @echo %g%lThis room contains...\
  @echo %g~~~~~~~~~~~~~~~~~~~~~\
  @with $1 contents here do @echo %w\{@?name $6}\
  @echo\
  @echo %w%lTotal items listed:  %w\{@?display}\
  @echo

  ...Now find a room with lots of things in it (Such as 'The Swan Pub' or
  'St. Peter's Shelter for the Homeless') and try typing the following...

  display                     (Displays entire list of room's contents)
  display 1                   (Displays first page)
  display 2-7                 (Displays the 2nd to the 7th item)

  PLEASE NOTE:  Once you've finished experimenting with the above command,
                please destroy it (Type '@dest display'.)

-------------------------------------------------------------------------------

  {@?drop}
  ~~~~~~~~
  USAGE:  {@?drop <OBJECT>}

  Returns the drop message of <OBJECT>.

  Fails and returns 'Error' if <OBJECT> can't be found.

-------------------------------------------------------------------------------

  {@?elementno}
  ~~~~~~~~~~~~~
  USAGE:  {@?elementno <ARRAY>[<ELEMENT>]}

  Returns the description (Or contents if you like) of an element (Or range
  of elements) of a dynamic array, e.g:  '{@?elementno myarray[2]}' returns the
  description of the 2nd element of the dynamic array 'myarray' and
  '{@?elementno myarray[test]}' returns the description of the element with
  the index name 'test' of 'myarray'.

  If a range of elements is specified, the descriptions of these elements will
  be returned, separated by NEWLINE's, e.g:  '{@?elementno myarray[4..7]}'
  will return the descriptions of elements 4, 5, 6 and 7 of the dynamic
  array 'myarray'.

  Fails and returns 'Error' if <ARRAY> can't be found.

-------------------------------------------------------------------------------

  {@?email}
  ~~~~~~~~~
  USAGE:  {@?email [<NAME>] [= public|private|<NUMBER>|all]}

  Returns the specified E-mail address of the character <NAME> (Or your
  specified E-mail address, if <NAME> is omitted.)  If the second parameter
  is omitted, the user's private E-mail address will be returned by default.

  If 'public' is specified, the user's first public E-mail address will be
  returned.  Likewise, 'private' will return the user's private E-mail address
  (You must have 'write' permission or be an Apprentice Wizard/Druid or above
  to query the private E-mail address of another character.)

  The user's other public E-mail addresses can be returned by giving a <NUMBER>
  between 3 and 5.

  Specifying 'all' will return all of the user's E-mail addresses, separated by
  NEWLINE's (For Mortals, the private E-mail address (2) will be blanked in the
  returned list of E-mail addresses.)  You can process this list by using list
  processing query commands, using '{@?newline}' as the separator.

  Fails and returns 'Error' if the character <NAME> can't be found or the
  specified E-mail address isn't currently set.

-------------------------------------------------------------------------------

  {@?enemy}
  ~~~~~~~~~
  USAGE:  {@?enemy <NAME>}

  Succeeds if <NAME> is one of your enemies (I.e:  Either you've set their
  ENEMY friend flag on your own personal friends list ('fset <NAME> = ENEMY'),
  or they've set your ENEMY friend flag on theirs.)

  Alternatively, if 'flist' is specified, '{@?enemy}' will only succeed if
  you have the user <NAME> as an enemy on your friends list.  If 'fothers'
  is specified, it will only succeed if the user <NAME> has you as an enemy
  on their friends list.

  Fails and returns 'Error' if <NAME> isn't one of your enemies.

-------------------------------------------------------------------------------

  {@?estring}
  ~~~~~~~~~~~
  USAGE:  {@?estring <OBJECT>}

  Returns the obvious exits string of the room or thing <OBJECT>.  If it does
  not have an obvious exits string, the default of 'Obvious exits:' will be
  returned.

  Fails and returns 'Error' if <OBJECT> can't be found, or is not a room or
  thing.

-------------------------------------------------------------------------------

  {@?evallock}
  ~~~~~~~~~~~~
  USAGE:  {@?evallock <LOCK>}

  Evaluates the lock <LOCK> and succeeds if the lock is satisfied by the
  current character (I.e:  The character executing the query/compound
  command with the query in), otherwise it fails.


  Example:
  ~~~~~~~~
  {@?evallock @builder|*fred bloggs}

  ...Succeeds if character is 'Fred Bloggs' or a Builder, otherwise fails.

-------------------------------------------------------------------------------

  {@?execution} ({@?executionlimit})
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  USAGE:  {@?executionlimit}
          {@?execution}

  Returns the current execution time limit (Set using '@execution') of the
  current compound command being executed, in seconds.

-------------------------------------------------------------------------------

  {@?executed}
  ~~~~~~~~~~~~
  USAGE:  {@?executed}

  Returns the total execution time so far (In microseconds) of the current
  compound command(s) being executed.

-------------------------------------------------------------------------------

  {@?exists}
  ~~~~~~~~~~
  USAGE:  {@?exists <ARRAY>[<ELEMENT>]}
          {@?exists <OBJECT>}

  Returns 'Ok' (Success) if <OBJECT> exists (Or element <ELEMENT> of the
  dynamic array <ARRAY> exists), otherwise returns 'Error' (Failure.)


  Examples:
  ~~~~~~~~~
  @if {@?exists box:myproperty} do @echo Found 'myproperty' attached to object
      'box'.; else @echo Property 'myproperty' isn't attached to object 'box'.

  @if {@?exists myarray[5]} do @echo Element 5 of 'myarray' exists.; else @echo
      Element 5 of 'myarray' doesn't exist.

-------------------------------------------------------------------------------

  {@?exits}
  ~~~~~~~~~
  USAGE:  {@?exits <OBJECT> [= <NUMBER>]}

  Returns the name (Or ID if you control it) of the first (Or <NUMBER>'th,
  if <NUMBER> is specified) exit in <OBJECT>'s exits list.
  Returns '*NOTHING*' if <OBJECT> has no exits.

  Fails and returns 'Error' if <OBJECT> can't be found.

-------------------------------------------------------------------------------

  {@?expenditure}
  ~~~~~~~~~~~~~~~
  USAGE:  {@?expenditure [<NAME>] [= day|week|month]}

  Returns your (Or the character <NAME>'s, if <NAME> is specified) expenditure
  this quarter.

  You can alternatively return average expenditure per day, week or month by
  specifying the second parameter of 'day', 'week' or 'month' respectively.


  Examples
  ~~~~~~~~
  @echo Expenditure this quarter:  {@?expenditure}
  @echo Average per day:  {@?expenditure = day}
  @echo Average per week:  {@?expenditure = week}
  @echo Average per month:  {@?expenditure = month}

-------------------------------------------------------------------------------

  {@?expiry}
  ~~~~~~~~~~
  USAGE:  {@?expiry <OBJECT>}

  Returns the expiry time (In days) of <OBJECT>.  An expiry time of 0 days
  indicates that no expiry time is set on <OBJECT>.

  Fails and returns 'Error' if <OBJECT> can't be found.

-------------------------------------------------------------------------------

  {@?fail}
  ~~~~~~~~
  USAGE:  {@?fail <OBJECT>}

  Returns the failure message of <OBJECT>.

  Fails and returns 'Error' if <OBJECT> can't be found.

-------------------------------------------------------------------------------

  {@?false}
  ~~~~~~~~~
  USAGE:  {@?false}

  '{@?false}' returns 'OK' if the last command executed failed, otherwise it
  returns 'Error'.

  '{@?false}' is of most use when used in the <CONDITION> part of an '@if' or
  '@while' command, e.g:

  @if {@?false} do @echo Failure.

-------------------------------------------------------------------------------

  {@?feeling}
  ~~~~~~~~~~~
  USAGE:  {@?feeling [<NAME>]}

  If the character <NAME> isn't specified, your current feeling (Set using the
  '@feeling' command) is returned, otherwise the character <NAME>'s feeling is
  returned.

  Fails and returns 'Error' if the character <NAME> can't be found.

-------------------------------------------------------------------------------

  {@?firstname}
  ~~~~~~~~~~~~~
  USAGE:  {@?firstname <OBJECT>}

  Returns the first name of <OBJECT>, if it has several (Separated by semi-
  colons (';')), e.g:  if it's an exit or a compound command.

-------------------------------------------------------------------------------

  {@?flags}
  ~~~~~~~~~
  USAGE:  {@?flags <OBJECT> [= short]}

  Returns the flags set on the object <OBJECT>.  If the optional second
  parameter ('short') isn't specified, long format is assumed, and the
  full names of the flags set will be returned (Similar to the way flags
  are listed by 'scan', 'examine' and 'settings', e.g:  'Yell, Warp, Visit'.)

  Otherwise, the flags will be returned in short form (Similar to the way flags
  are listed after an object name, when examining it, e.g:  'ywV' for 'Yell,
  Warp, Visit'.)

  Fails and returns 'Error' if <OBJECT> can't be found.

-------------------------------------------------------------------------------

  {@?friend}
  ~~~~~~~~~~
  USAGE:  {@?friend <NAME> [= flist|fothers]}

  Succeeds if <NAME> is one of your friends (I.e:  Either you have them on
  your own personal friends list, or they have you on theirs.)
  
  Alternatively, if 'flist' is specified, '{@?friend}' will only succeed if
  you have the user <NAME> as a friend on your friends list.  If 'fothers'
  is specified, it will only succeed if the user <NAME> has you as a friend
  on their friends list.

  Fails and returns 'Error' if <NAME> isn't one of your friends.

-------------------------------------------------------------------------------

  {@?fullname}
  ~~~~~~~~~~~~
  USAGE:  {@?fullname <NAME> [= indefinite|INDEFINITE|definite|DEFINITE]}

  Matches to the closest character name in the database which contains
  <NAME>.  If <NAME> doesn't match to any character name in the database,
  '*NOTHING*' is returned.

  NOTE:  Unlike '{@?namec}', connected characters DO NOT have priority.

  If 'indefinite' or 'definite' is specified as the second parameter to
  '{@?fullname}', the appropriate article will be added to the matched
  character's name (See table below), providing the CONSONANT, VOWEL or
  PLURAL flag is set on them.  If '@?fullname' or 'indefinite'/'definite'
  are given in capital letters (E.g:  '@?FULLNAME', 'INDEFINITE',
  'DEFINITE'), the first letter of the added article will be capitalised...


  Article flag:   indefinite  INDEFINITE  definite  DEFINITE
  ==========================================================
  CONSONANT       a           A           the       The
  VOWEL           an          An          the       The
  PLURAL          some        Some        the       The
  ==========================================================


  Example:
  ~~~~~~~~
  Suppose only Fred Bloggs and Joe Bloggs exist in the database...

  '{@?fullname fr}' would return 'Fred Bloggs'.
  '{@?fullname ed blog}' would return 'Fred Bloggs'.
  '{@?fullname joe}' would return 'Joe Bloggs'.
  '{@?fullname john}' would return '*NOTHING*'.

-------------------------------------------------------------------------------

  {@?fuses}
  ~~~~~~~~~
  USAGE:  {@?fuses <OBJECT> [= <NUMBER>]}

  Returns the name (Or ID if you control it) of the first (Or <NUMBER>'th,
  if <NUMBER> is specified) fuse in <OBJECT>'s fuses list.
  Returns '*NOTHING*' if <OBJECT> has no fuses.

  Fails and returns 'Error' if <OBJECT> can't be found.

-------------------------------------------------------------------------------

  {@?global}
  ~~~~~~~~~~
  USAGE:  {@?global <COMMAND>}

  Returns 'Ok' (Success) if <COMMAND> is successfully registered as a global
  command, otherwise returns 'Error' (Failure).  There is no need to check
  privilege of the command owner or other flags such as VALIDATED as these
  are already taken into account.

  Example:
  ~~~~~~~~
  @if {@?global $1} do @echo Command '$1' is global and may be used from
  anywhere.

-------------------------------------------------------------------------------

  {@?groupitems}
  ~~~~~~~~~~~~~~
  USAGE:  {@?groupitems [<GRP/RANGE>] [<INDEX>] <OBJECT TYPE> [<OBJECT>]}

  The '{@?groupitems}' query command is identical in usage to the
  '{@?totalitems}' query command, except that instead of returning the
  total number of items, it returns the total number of items in the given
  group, e.g:  If you had 5 things in your inventory, '{@?groupitems 1:3
  things me}' would return 5 and '{@?groupitems 1:4 things me}' would return
  4 (There are 4 items in the first group of items.)

  For further details on the parameters that can be used with the
  '{@?groupitems}' query command, please see the section on the
  '@with' command.

-------------------------------------------------------------------------------

  {@?groupno}
  ~~~~~~~~~~~
  USAGE:  {@?groupno <STRING>}

  If the given string (<STRING>) contains a grouping operator, '{@?groupno}'
  returns the GROUP NUMBER part of it, otherwise it returns the default of
  'ALL'.


  Example:
  ~~~~~~~~
  {@?groupno 3:10}     ...returns 3.

-------------------------------------------------------------------------------

  {@?grouprange}
  ~~~~~~~~~~~~~~
  USAGE:  {@?grouprange <STRING>}

  Returns 'OK' if the string <STRING> is a grouping operator, range operator
  or both, otherwise returns 'Error'.


  Example:
  ~~~~~~~~
  {@?grouprange test}   ...returns 'Error'.
  {@?grouprange 2-5}    ...returns 'OK'.

-------------------------------------------------------------------------------

  {@?groupsize}
  ~~~~~~~~~~~~~
  USAGE:  {@?groupsize <STRING>}
          {@?groupsize <NAME>}

  If used in the first form and the given string (<STRING>) contains a grouping
  operator, '{@?groupsize}' returns the GROUP SIZE part of it, otherwise it
  returns the default of '10'.

  If used in the second form, '{@?groupsize}' returns the default group size of
  the character <NAME>, e.g:  '{@?groupsize me}' to return your default group
  size.


  Example:
  ~~~~~~~~
  {@?groupsize 3:12}     ...returns 12.

-------------------------------------------------------------------------------

  {@?health}
  ~~~~~~~~~~
  USAGE:  {@?health [<NAME>]}

  If the character <NAME> isn't specified, your current health is returned,
  otherwise the character <NAME>'s current health is returned.

  Fails and returns 'Error' if the character <NAME> can't be found.

-------------------------------------------------------------------------------

  {@?id}
  ~~~~~~
  USAGE:  {@?id [<OBJECT>]}

  Returns the ID number of <OBJECT> in the form of #<ID>.  If <OBJECT> isn't
  specified, it returns your ID number.

  Fails and returns 'Error' if <OBJECT> can't be found.

-------------------------------------------------------------------------------

  {@?idletime}
  ~~~~~~~~~~~~
  USAGE:  {@?idletime [<NAME>]}

  Returns the amount of time in seconds that character <NAME> has been idle
  for, if <NAME> is specified, otherwise returns amount of time you've been
  idle.

  Fails and returns 'Error' if the character <NAME> can't be found.

-------------------------------------------------------------------------------

  {@?income}
  ~~~~~~~~~~
  USAGE:  {@?income [<NAME>] [= day|week|month]}

  Returns your (Or the character <NAME>'s, if <NAME> is specified) income this
  quarter.

  You can alternatively return average income per day, week or month by
  specifying the second parameter of 'day', 'week' or 'month' respectively.


  Examples
  ~~~~~~~~
  @echo Income this quarter:  {@?income}
  @echo Average per day:  {@?income = day}
  @echo Average per week:  {@?income = week}
  @echo Average per month:  {@?income = month}

-------------------------------------------------------------------------------

  {@?index}
  ~~~~~~~~~
  USAGE:  {@?index <ARRAY>[<ELEMENT>]}

  Returns the index name of an element (Or range of elements) of a dynamic
  array, e.g:  '{@?index myarray[2]}' returns the index name of the 2nd
  element of the dynamic array 'myarray'.  If a range of elements is
  specified, the index names of these elements will be returned, separated
  by NEWLINE's, e.g:  '{@?index myarray[4..7]}' will return the index names
  of elements 4, 5, 6 and 7 of the dynamic array 'myarray'.

  Fails and returns 'Error' if <ARRAY> can't be found.

-------------------------------------------------------------------------------

  {@?indexno}
  ~~~~~~~~~~~
  USAGE:  {@?indexno <ARRAY>[<INDEX>]}

  Returns the element number of the element with the index name <INDEX> in the
  dynamic array <ARRAY>, e.g:  '{@?indexno myarray[myindex]}'.

  Fails and returns 'Error' if <ARRAY> can't be found.

-------------------------------------------------------------------------------

  {@?internal}
  ~~~~~~~~~~~~
  USAGE:  {@?internal <COMMAND>}

  Matches <COMMAND> against the internal command tables built into the
  TCZ-based MUD and returns the type(s) of internal command it matches
  in a ';' separated list.  The types are as follows:

  Short      Short symbolic commands (E.g:  '"' for 'say', etc.)
  General    General commands ('say', 'tell', 'look', etc.)
  Database   '@' commands used to modify the database ('@thing', '@set', etc.)
  Query      '@?' query commands ('{@?name}', '{@?description}', etc.)
  Editor     Editor commands ('.view', '.exit', etc.)
  BBS        BBS commands ('topic', 'read', 'add', etc.)
  Bank       Bank commands ('statement', 'withdraw', etc.)

  Returns '*NOTHING*' if <COMMAND> does not match any internal commands.


  Example:
  ~~~~~~~~
  @command InternalTest = @temp result = \{@?internal "$3"}\
  @if \{@eval "$(result)" <> "*NOTHING*"} do\
      @echo %g%l'%w%l$3%g%l' matches internal command types: %y %l$(result)\
  @else\
      @echo %g%l'%y%l$3%g%l' does not match any internal commands.\
  @end

-------------------------------------------------------------------------------

  {@?interval}
  ~~~~~~~~~~~~
  USAGE:  {@?interval [<NUMBER OF SECONDS>] [= <ENTITIES>]}

  Returns the time in years, months, weeks, days, hours, minutes and seconds
  that <NUMBER OF SECONDS> represents.

  If <ENTITIES> is specified, the number of entities in the returned time will
  be restricted to the number you specify.  An entity is a unit of time (E.g:
  Hours.)


  Examples:
  ~~~~~~~~~
  @echo {@?interval 100000}
  @echo {@?interval 100000 = 3}
  @echo {@?interval 100000 = 2}
  @echo {@?interval 100000 = 1}

-------------------------------------------------------------------------------

  {@?key}
  ~~~~~~~
  USAGE:  {@?key [<OBJECT>]}

  Returns the key required to satisfy the lock of <OBJECT> (Or yourself if
  you don't specify <OBJECT>.)

  Fails and returns 'Error' if <OBJECT> can't be found.

-------------------------------------------------------------------------------

  {@?lastcommand}
  ~~~~~~~~~~~~~~~
  USAGE:  {@?lastcommand [<NAME>]}

  If <NAME> isn't specified, '{@?lastcommand}' returns the last command
  you typed, otherwise the character <NAME>'s last command is returned,
  who must either be your puppet or a character who is a lower level
  than you (If you are Admin.)

  Fails and returns 'Error' if the character <NAME> is specified and can't
  be found, or you do not have permission to query their last command.

-------------------------------------------------------------------------------

  {@?lastconnected}
  ~~~~~~~~~~~~~~~~~
  USAGE:  {@?lastconnected [<NAME>] [= epoch|longdate]}

  Returns the time and date when the character <NAME> was last connected in
  either the EPOCH or LONGDATE date/time format (If the date/time format is
  not specified, EPOCH will be assumed.)

  For example:  '@echo {@?realtime {@?lastconnected me}}' will display the
  time and date you last connected, and '@echo {@?interval {@eval {@?time} -
  {@?lastconnected me}}}' will display how long ago that was in hours,
  minutes, seconds, etc.

  For more information on the EPOCH and LONGDATE date/time formats, please
  see the section on '{@?realtime}'.

  Fails and returns 'Error' if the character <NAME> can't be found.

-------------------------------------------------------------------------------

  {@?lastsite}
  ~~~~~~~~~~~~
  USAGE:  {@?lastsite [<NAME>]}

  Returns the Internet address of the site that the character <NAME> (Or
  yourself if <NAME> is not specified) last connected from.  Only Apprentice
  Wizards/Druids and above can use this query command on other characters.

  Fails and returns 'Error' if the character <NAME> can't be found.

-------------------------------------------------------------------------------

  {@?lastused}
  ~~~~~~~~~~~~
  USAGE:  {@?lastused [<OBJECT>] [= epoch|longdate]}

  Returns the time and date when the object <OBJECT> was last used (Or when you
  were last used, if <OBJECT> isn't specified) in either the EPOCH or LONGDATE
  date/time format (If the date/time format is not specified, EPOCH will be
  assumed), e.g:  '@echo {@?realtime {@?lastused here}}' will display the
  time and date when the room you're currently standing in was last used
  (NOTE:  You don't have to own <OBJECT> to use this query command.)

  The last usage time/date of an object is updated everytime its text fields
  (I.e:  '@desc', '@succ', '@fail', etc.) or its lock are accessed/modified
  (NOTE:  Examining an object or scanning a character does not update the
  last usage time/date.)

  For more information on the EPOCH and LONGDATE date/time formats, please
  see section on '{@?realtime}'.

  Fails and returns 'Error' if <OBJECT> can't be found.

-------------------------------------------------------------------------------

  {@?latest}
  ~~~~~~~~~~
  USAGE:  {@?latest <TOPIC>}

  Returns the subject of the latest message added to the topic <TOPIC> on the
  TCZ-based MUD's BBS.  If the topic is empty (I.e:  There's no messages in
  it), '***  NO MESSAGES FOUND  ***' is returned.

  Fails and returns 'Error' if the topic <TOPIC> doesn't exist, or you can't
  access it.


  Example:
  ~~~~~~~~
  @echo The latest message in the topic 'News' on %@%n BBS is '{@?latest news}'
        (Unread messages:  {@?newmessages news}.)

-------------------------------------------------------------------------------

  {@?line}
  ~~~~~~~~
  USAGE:  {@?line}

  Returns the current line number being executed of the current compound
  command.

-------------------------------------------------------------------------------

  {@?location}
  ~~~~~~~~~~~~
  USAGE:  {@?location [<OBJECT>]}

  Returns the name of <OBJECT>'s current location (Or ID if you control
  <OBJECT>.)  If <OBJECT> isn't specified, your current location is returned
  instead.

  Fails and returns 'Error' if <OBJECT> can't be found.

-------------------------------------------------------------------------------

  {@?lock}
  ~~~~~~~~
  USAGE:  {@?lock <OBJECT>}

  Returns the lock of the specified <OBJECT>  (In the same format as seen
  when examining <OBJECT>  (After 'Key:'.))

  Fails and returns 'Error' if <OBJECT> can't be found.


  Example:
  ~~~~~~~~
  {@?lock Admin only door}

  ...returns '@apprentice'.

-------------------------------------------------------------------------------

  {@?longestdate}
  ~~~~~~~~~~~~~~~
  USAGE:  {@?longestdate [<NAME>] [= epoch|longdate]}

  Returns the time and date when the longest connect time of the character
  <NAME> occurred, in either the EPOCH (See 'help epoch') or LONGDATE (See
  'help longdate') date/time format (If the date/time format is not specified,
  EPOCH will be assumed.)

  For example:  '@echo {@?realtime {@?longestdate me}}' will display the time
  and date when your longest connect time occurred, and '@echo {@?interval
  {@eval {@?time} - {@?longestdate me}}}' will display how long ago that
  was in hours, minutes, seconds, etc.

  For more information on the EPOCH and LONGDATE date/time formats, please see
  the section on '{@?realtime}'.

  Fails and returns 'Error' if the character <NAME> can't be found.

-------------------------------------------------------------------------------

  {@?longesttime}
  ~~~~~~~~~~~~~~~
  USAGE:  {@?longesttime [<NAME>]}

  Returns the longest time that the character <NAME> has been connected to
  the TCZ-based MUD without disconnecting in seconds, e.g:  '@echo {@?interval
  {@?longesttime me}}' will display your longest connect time.

  Fails and returns 'Error' if the character <NAME> can't be found.

-------------------------------------------------------------------------------

  {@?lost}
  ~~~~~~~~
  USAGE:  {@?lost [<NAME>]}

  If the character <NAME> isn't specified, the number of battles you've lost
  are returned, otherwise the number of battles the character <NAME> has lost
  are returned.

  Fails and returns 'Error' if the character <NAME> can't be found.

-------------------------------------------------------------------------------

  @?match
  ~~~~~~~
  USAGE:  {@?match[error] <OBJECT NAME> [= <PREFERRED TYPES>]}

  '{@?match}' calls the TCZ-based MUD's standard hierarchical object matching
  routines to match for the object <OBJECT NAME>.  If found, the object's
  name (Or #ID if you have read or write permission) is returned.  Otherwise,
  'Error' is returned.

  '{@?match}' will display appropriate error messages if the match is
  unsuccessful.  '{@?matcherror}' does not display appropriate error messages
  (The usage of '{@?match}' and '{@?matcherror}' are identical.)

  With the exception of internal commands which can be used to refer to
  characters only, all internal commands which refer to objects use the
  hierarchical object matching routines in one way or another.

  For details on specifying <OBJECT NAME>, see section on matching near the
  beginning of this manual.

  <PREFERRED TYPES> specifies one or more optional preferred object types to
  match against.  Preferred object types are matched first, followed by any
  remaining non-preferred types.  By default, the preferred object type is
  'things' (This is the case for many internal commands which use matching.)
  For example, '{@?match <OBJECT NAME> = characters}' will match against all
  object types, giving characters priority.

-------------------------------------------------------------------------------

  {@?mass}
  ~~~~~~~~
  USAGE:  {@?mass <OBJECT>}

  Returns the mass of <OBJECT> in kilograms.

  Fails and returns 'Error' if <OBJECT> can't be found.

-------------------------------------------------------------------------------

  {@?messages}
  ~~~~~~~~~~~~
  USAGE:  {@?messages <TOPIC>}

  Returns the total number of messages in the topic <TOPIC> on the TCZ-based
  MUD's BBS.

  Fails and returns 'Error' if the topic <TOPIC> doesn't exist, or you can't
  access it.


  Example:
  ~~~~~~~~
  @echo There are {@?messages news} items of news on %@%n BBS.

-------------------------------------------------------------------------------

  {@?myleaf}
  ~~~~~~~~~~
  USAGE:  {@?myleaf [<OBJECT NAME> [= <OBJECT TYPES> [= <PREFERRED TYPES>]]]}
          {@?myleaferror [<OBJ. NAME> [= <OBJ. TYPES> [= <PREF. TYPES]]]}

  Returns the effective location (Taking inheritance into account) of the
  object <OBJECT NAME> (Or the current compound command being executed, if
  <OBJECT NAME> is not specified.)

  If <OBJECT NAME> is specified, '{@?myleaf}' will display appropriate error
  messages if the match is unsuccessful.  '{@?myleaferror}' does not display
  appropriate error messages (The usage of '{@?myleaf}' and '{@?myleaferror}'
  are identical.)

  When <OBJECT NAME> is specified, <OBJECT TYPES> can be used to restrict
  matching to particular object types only, and <PREFERRED TYPES> can be used
  to set the preferred object types during the match.  See section on
  '{@?match}' for further details on these parameters.

  For example, the room 'MyRoom' contains the object 'MyThing'.  Its parent
  is set to the room 'MyParentRoom', which contains the object
  'MyInheritedThing'.


  In 'MyRoom':
  ~~~~~~~~~~~~
  '{@?myleaf mything}' returns 'MyRoom'.
  '{@?myleaf myinheritedthing}' returns 'MyRoom'.
  '{@?location myinheritedthing}' returns 'MyParentThing'.


  NOTE:  Rather than using '{@?myleaf}' without parameters to get the
         effective location of a compound command, you can use the matching
         keyword 'myleaf'.  This gives exactly the same result with the added
         benefit of being easier to use, more readable and more efficient.

         The 'myleaf' matching keyword is used in the example below (Which
         shows you how to take advantage of 'myleaf' within inherited
         compound commands.  Replacing 'myleaf' with '{@?myleaf}' will give
         exactly the same results.


  Example use of 'myleaf'...
  ~~~~~~~~~~~~~~~~~~~~~~~~~~
  Say you wanted to create a number of guns, each which can be 'shot' by
  typing 'shoot'.  This can be done easily using inheritance and 'myleaf':

  Firstly, create the first gun, which will act as the parent object, e.g:
  '@thing Shotgun = A large, double-barrelled shotgun.'

  Next, create the 'shoot' compound command:  

     edit command desc shoot;fire
     @echo %g%lYou aim the %y%l{@?name myleaf}%g%l at %w%l%3%g%l and pull the
           trigger %c- %r%l%f*BANG*%x
     @oemote %g%laims %p %y%l{@?name myleaf}%g%l at %w%l$3%g%l and pulls the
           trigger %c- %r%l%f*BANG*%x
     .exit

  ...Now teleport the 'shoot' compound command to the shotgun by typing
  '@tel shoot = shotgun'.  You can now create further guns simply by
  creating an object with the appropriate name and description and
  setting its parent to the shotgun using '@parent', e.g:

     @thing Pistol = A small automatic pistol.
     @parent pistol = shotgun

  ...Now drop the shotgun.  When you type 'shoot <NAME>', you'll get 'You aim
  the Pistol at <NAME>...'  If you drop the pistol and pick up the shotgun
  again and type 'shoot <NAME>', you'll get 'You aim the Shotgun at <NAME>...'

-------------------------------------------------------------------------------

  {@?myself}
  ~~~~~~~~~~
  USAGE:  {@?myself}

  Returns the name of the currently executing command (Or the ID if you
  control it.)

  Fails and returns 'Error' if not called from within a compound command.

-------------------------------------------------------------------------------

  {@?name}
  ~~~~~~~~
  USAGE:  {@?name <OBJECT> [= indefinite|INDEFINITE|definite|DEFINITE]}

  Returns the name of <OBJECT> (Fails and returns 'Error' if <OBJECT>
  can't be found.)

  If 'indefinite' or 'definite' is specified as the second parameter to
  '{@?name}', the appropriate article will be added to the object's name
  (See table below), providing the CONSONANT, VOWEL or PLURAL flag is set
  on the object.  If '@?name' or 'indefinite'/'definite' are given in
  capital letters (E.g:  '@?NAME', 'INDEFINITE', 'DEFINITE'), the first
  letter of the added article will be capitalised...


  Article flag:   indefinite  INDEFINITE  definite  DEFINITE
  ==========================================================
  CONSONANT       a           A           the       The
  VOWEL           an          An          the       The
  PLURAL          some        Some        the       The
  ==========================================================


  NOTE:  If <OBJECT> is a character, their prefixed/suffixed (See sections on
         '@prefix' and '@suffix') name will be returned rather than their
         real name.

         Use the '{@?realname}' query command to return the real name of a
         character (I.e:  Their name without their prefix/suffix.)

-------------------------------------------------------------------------------

  {@?namec}
  ~~~~~~~~~
  USAGE:  {@?namec <NAME> [= indefinite|INDEFINITE|definite|DEFINITE]}

  Matches to the closest character name in the database which begins with
  <NAME>, with connected characters taking priority over non-connected
  characters.  If <NAME> doesn't match to any character name in the
  database, '*NOTHING*' is returned.

  If 'indefinite' or 'definite' is specified as the second parameter to
  '{@?namec}', the appropriate article will be added to the matched
  character's name (See table below), providing the CONSONANT, VOWEL or
  PLURAL flag is set on them.  If '@?namec' or 'indefinite'/'definite'
  are given in capital letters (E.g:  '@?NAMEC', 'INDEFINITE', 'DEFINITE'),
  the first letter of the added article will be capitalised...


  Article flag:   indefinite  INDEFINITE  definite  DEFINITE
  ==========================================================
  CONSONANT       a           A           the       The
  VOWEL           an          An          the       The
  PLURAL          some        Some        the       The
  ==========================================================

-------------------------------------------------------------------------------

  {@?nested}
  ~~~~~~~~~~
  USAGE:  {@?nested}

  Returns the current nesting level of the current compound command being
  executed.  This will usually be 1, but if used in a compound command
  which has been called from within another compound command (I.e:  Via '@if',
  '@case', '@for', '@while', @with', etc. or directly (NOTE:  NOT '@csuccess'/
  '@cfailure')), the nesting level will be 2 or more, depending on how
  many compound commands are currently recursed into.

-------------------------------------------------------------------------------

  {@?newline}
  ~~~~~~~~~~~
  USAGE:  {@?newline}

  Returns the code for a NEWLINE (Linefeed.)  By using this query as the
  <SEPARATOR> in list processing queries, you can turn them into line
  processing querys, for example, '{@?itemno 1 {@?newline} "<TEXT>"}' will
  return the first line of text in the string <TEXT>.

-------------------------------------------------------------------------------

  {@?newmessages}
  ~~~~~~~~~~~~~~~
  USAGE:  {@?newmessages <TOPIC>}

  Returns the total number of new (Unread) messages in the topic <TOPIC> on
  the TCZ-based MUD's BBS.

  Fails and returns 'Error' if the topic <TOPIC> doesn't exist, or you can't
  access it.


  Example:
  ~~~~~~~~
  @echo There are {@?newmessages news} unread items of news on the BBS.

-------------------------------------------------------------------------------

  {@?next}
  ~~~~~~~~
  USAGE:  {@?next <OBJECT> [= <NUMBER>]}

  Returns the name (Or ID if you control it) of the next object (Or <NUMBER>'th
  object, if <NUMBER> is specified) of the same type after <OBJECT> in
  whichever object list <OBJECT> is in.  Returns '*NOTHING*' if there is
  no next object of the same type as <OBJECT>.

  Fails and returns 'Error' if <OBJECT> can't be found.

-------------------------------------------------------------------------------

  {@?noelements}  (Or {@?elements})
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  USAGE:  {@?noelements <ARRAY>}
          {@?elements <ARRAY>}

  Returns the total number of elements the dynamic array <ARRAY> currently
  has.

  Fails and returns 'Error' if <ARRAY> can't be found.

-------------------------------------------------------------------------------

  {@?nogroups}
  ~~~~~~~~~~~~
  USAGE:  {@?nogroups <GROUPING OP> connected}
          {@?nogroups <GROUPING OP> <LINKED LIST TYPE> <OBJECT>}

  '{@?nogroups}' returns the number of groups that the list of connected
  characters (In the first form) or the linked list attached to the object 
  <OBJECT> (In the second form) will be split into if the given grouping
  operator (<GROUPING OP>) is used.

  <LINKED LIST TYPE> can be any of the following:  commands, contents, exits,
  fuses or variables.


  Examples:
  ~~~~~~~~~
  Suppose there are 23 items in the room you're currently in (Including
  yourself of course!)  -  '{@?nogroups 1:10 contents here}' will return
  3 (I.e:  Using the grouping operator '1:10' will split the items in the
  current room up into a total of 3 groups.)

-------------------------------------------------------------------------------

  {@?number}
  ~~~~~~~~~~
  USAGE:  {@?[is]number "<STRING>"}

  Fails and returns 'Error' if <STRING> is not a number, otherwise succeeds
  and returns <STRING>.


  Example:
  ~~~~~~~~
  @command numbertest = \
     @if \{@?number $1} do\
         @echo %g%l'%w%l$1%g%l' is a number.\
     @else\
         @echo %r%l'%w%l$1%r%l' is not a number.\
     @end

-------------------------------------------------------------------------------

  {@?odesc}
  ~~~~~~~~~
  USAGE:  {@?odesc <OBJECT>}

  Returns the outside description of <OBJECT>.

  Fails and returns 'Error' if <OBJECT> can't be found.

-------------------------------------------------------------------------------

  {@?odrop}
  ~~~~~~~~~
  USAGE:  {@?odrop <OBJECT>}

  Returns the others drop message of <OBJECT>.

  Fails and returns 'Error' if <OBJECT> can't be found.

-------------------------------------------------------------------------------

  {@?ofail}
  ~~~~~~~~~
  USAGE:  {@?ofail <OBJECT>}

  Returns the others fail message of <OBJECT>.

  Fails and returns 'Error' if <OBJECT> can't be found.

-------------------------------------------------------------------------------

  {@?osucc}
  ~~~~~~~~~
  USAGE:  {@?osucc <OBJECT>}

  Returns the others success message of <OBJECT>.

  Fails and returns 'Error' if <OBJECT> can't be found.

-------------------------------------------------------------------------------

  {@?owner}
  ~~~~~~~~~
  USAGE:  {@?owner <OBJECT>}

  Returns the name of the owner of <OBJECT>.  {@?owner} can be used by
  anyone on anything.

  Fails and returns 'Error' if <OBJECT> can't be found.

-------------------------------------------------------------------------------

  {@?parent}
  ~~~~~~~~~~
  USAGE:  {@?parent [<OBJECT>]}

  Returns the parent object of <OBJECT> (Set with '@parent'), or '*NOTHING*'
  if <OBJECT> has no parent object.  If <OBJECT> isn't specified, the parent
  of the current compound command being executed is returned.

  Fails and returns 'Error' if <OBJECT> can't be found.

-------------------------------------------------------------------------------

  USAGE:  {@?partner [<NAME>]}

  Returns the partner of the character <NAME> (Who they're engaged/married to),
  or '*NOTHING*' if they're not engaged/married to another character.  If
  <NAME> isn't specified, your partner will be returned.

  Fails and returns 'Error' if the character <NAME> can't be found.

-------------------------------------------------------------------------------

  {@?peak}
  ~~~~~~~~
  USAGE:  {@?peak [current|today|average|record]}

  If no parameters or 'today' is specified, the highest number of users
  connected simultaneously today will be returned.

  If 'current' is specified, the current number of connected users will be
  returned.

  If 'average' is specified, the average daily peak (Over the last two weeks)
  will be returned.

  If 'record' is specified, the record number of users connected simultaneously
  will be returned.


  Example:
  ~~~~~~~~
  @echo There are currently {@?peak current} users connected.
  @echo The highest peak today is {@?peak today} users.
  @echo The average daily peak is {@?peak average} users.
  @echo The record peak is {@?peak record} users.

-------------------------------------------------------------------------------

  {@?pending}
  ~~~~~~~~~~~
  USAGE:  {@?pending <ALARM> [= epoch|longdate]}

  Returns the time and date when the alarm <ALARM> is next due to execute in
  either the EPOCH or LONGDATE date/time format (If the date/time format is
  not specified, EPOCH will be assumed.)

  For more information on the EPOCH and LONGDATE date/time formats, please see
  'help epoch' and 'help longdate'.

  Fails and returns 'Error' if the alarm <ALARM> can't be found or is not
  currently in the pending event queue.

-------------------------------------------------------------------------------

  {@?performance}
  ~~~~~~~~~~~~~~~
  USAGE:  {@?performance [<NAME>]}

  If the character <NAME> isn't specified, your battle performace is returned,
  otherwise the character <NAME>'s battle performance is returned.

  Fails and returns 'Error' if the character <NAME> can't be found.

-------------------------------------------------------------------------------

  {@?prefix}
  ~~~~~~~~~~
  USAGE:  {@?prefix [<NAME>]}

  If the character <NAME> isn't specified, your name prefix is returned,
  otherwise it returns <NAME>'s name prefix.

  Fails and returns 'Error' if the character <NAME> can't be found.

-------------------------------------------------------------------------------

  {@?privileges}
  ~~~~~~~~~~~~~~
  USAGE:  {@?privileges <NAME> [= @chpid]}
          {@?privs <NAME> [= @chpid]}

  Returns a number between 0 - 8 which may be used to determines the real
  privileges (Or current effective privileges (Picked up via '@chpid') if
  the second parameter ('{@?privileges <NAME> = @chpid}') is specified) of
  the character <NAME> (Use the table below as a guide)...

   Val:  Character type:            Privileges:
  ===========================================================================
   0     Supreme Being              Unlimited privileges.
   1     Deity                      Almost unlimited privileges.
   2     Elder Wizard/Druid         Above Wizard/Druid privileges.
   3     Wizard/Druid               "Read/Write" privileges.
   4     Apprentice Wizard/Druid    "Read-Only" privileges.
   5     Retired Wizard/Druid       Experienced Builder privileges.
   5     Experienced Builder        Extra building privileges.
   5     Assistant                  Helping privileges.
   6     Builder                    Building privileges.
   7     Mortal                     No privileges.
   8     Moron                      Negative privileges.
  ===========================================================================
  If the character <NAME> doesn't exist, '7' is returned (Mortal privileges.)


  Example:
  ~~~~~~~~
  @if {@eval {@?privs} < 5} do @echo You're Admin.; else @echo You're Mortal.

-------------------------------------------------------------------------------

  {@?profile}
  ~~~~~~~~~~~
  USAGE:  {@?profile <NAME> [= <FIELD>]}

  If <FIELD> is not specified, succeeds and returns 'OK' if the character
  <NAME> currently has a profile set, otherwise fails and returns 'Error'.

  If <FIELD> is specified, the current setting of the field <FIELD> on the
  character <NAME>'s profile is returned, e.g:  '@echo {@?profile fred =
  realname}'.  Fails and returns 'Error' if the field <FIELD> isn't currently
  set on <NAME>'s profile.

  <FIELD> can be one of the following:

  Achievements, age, birthday, birthdayepoch, birthdaylongdate, city, comments,
  country, dislikes, drinks, email, eyes, foods, gender, hair, height, hobbies,
  interests, likes, miscellaneous, music, nationality, occupation, other,
  picture, qualifications, realname, sex, sexuality, sports, statusirl,
  statusivl, weight, www.

  NOTE:  The 'birthdayepoch' and 'birthdaylongdate' fields return the birthday
         of a user in either EPOCH or LONGDATE date/time format respectively.
         Please see the section on '{@?realtime}' for more information on
         the EPOCH and LONGDATE date/time formats.

-------------------------------------------------------------------------------

  {@?profit}
  ~~~~~~~~~~
  USAGE:  {@?profit [<NAME>] [= day|week|month]}

  Returns your (Or the character <NAME>'s, if <NAME> is specified) profit
  this quarter.  Profit is income - expenditure.

  You can alternatively return average profit per day, week or month by
  specifying the second parameter of 'day', 'week' or 'month' respectively.


  Examples
  ~~~~~~~~
  @echo Profit this quarter:  {@?profit}
  @echo Average per day:  {@?profit = day}
  @echo Average per week:  {@?profit = week}
  @echo Average per month:  {@?profit = month}

-------------------------------------------------------------------------------

  {@?prompt}
  ~~~~~~~~~~
  USAGE:  {@?prompt [<NAME>]}

  Returns your prompt (Or the character <NAME>'s prompt, if <NAME> is
  specified.)  You can set your prompt using the 'set prompt' command.

  Fails and returns 'Error' if the character <NAME> can't be found.

-------------------------------------------------------------------------------

  {@?properties}
  ~~~~~~~~~~~~~~
  USAGE:  {@?properties <OBJECT> [= <NUMBER>]}

  Returns the name (Or ID if you control it) of the first (Or <NUMBER>'th,
  if <NUMBER> is specified) property in <OBJECT>'s variables list.
  Returns '*NOTHING*' if <OBJECT> has no properties.

  Fails and returns 'Error' if <OBJECT> can't be found.

-------------------------------------------------------------------------------

  {@?protect}
  ~~~~~~~~~~~
  USAGE:  {@?protect <SUBST> "<STRING>"}

  Protects substitution characters in the string <STRING>.

  <SUBST> can be one of the following keywords:

  CMD  Protects '\', '{' and '$' against substitution.
  ALL  Protects '%', '\', '{' and '$' against substitution.

  ...Or a string containing one or more of the following characters...

  S    Protects '%' against substitution (Replaces with '%%'.)
  B    Protects '\' against substitution (Replaces with '\\'.)
  C    Protects '{' against substitution (Replaces with '\{'.)
  V    Protects '$' against substitution (Replaces with '\$'.)

  'S' is useful for protecting %-type substitutions (I.e:  ANSI colour codes),
  so that they are not evaluted (I.e:  Turned into colours.)

  'CMD' and 'ALL' are useful for protecting a string passed to '@force' to
  guard against unwanted substitutions (Particularly useful in soft-coded
  commands, where substitutions are not wanted and can be a security risk
  -  The forced character can be forced to execute substituted commands
  otherwise.)


  Example:
  ~~~~~~~~
  @echo {@?protect S "%r%lYou will see %y%lcolour codes%r%l in this string!"}

  @command forcetest = \
      @force me = @echo PROTECTED:  \{@?protect ALL "$3"}\
      @force me = @echo UNPROTECTED:  $3

  forcetest %r%l\{page me = %m%l%fHi!} - $variable \\ Backslash

-------------------------------------------------------------------------------

  {@?quarter}
  ~~~~~~~~~~~
  USAGE:  {@?quarter [start|end] [= epoch|longdate]}

  Returns the date/time of the start/end of the current financial quarter
  in either the EPOCH or LONGDATE date/time format (If the date/time format
  is not specified, EPOCH will be assumed.)

  For more information on the EPOCH and LONGDATE date/time formats, please
  see section on '{@?realtime}'.


  Example:
  ~~~~~~~~
  @echo Start of financial quarter:  {@?realtime {@?quarter start}}
  @echo End of financial quarter:  {@?realtime {@?quarter end}}

-------------------------------------------------------------------------------

  {@?quota}
  ~~~~~~~~~
  USAGE:  {@?quota <OBJECT>}

  If <OBJECT> is a character, the amount of Building Quota they currently
  have in use is returned, otherwise the amount of Building Quota used by
  that object is returned.

  Fails and returns 'Error' if <OBJECT> can't be found.

-------------------------------------------------------------------------------

  {@?quotalimit}
  ~~~~~~~~~~~~~~
  USAGE:  {@?quotalimit [<NAME>]}

  If the character <NAME> isn't specified, your Building Quota limit is
  returned, otherwise the character <NAME>'s Building Quota limit is
  returned.

  Fails and returns 'Error' if the character <NAME> can't be found.

-------------------------------------------------------------------------------

  {@?race}
  ~~~~~~~~
  USAGE:  {@?race [<NAME>]}

  If the character <NAME> isn't specified, your race is returned, otherwise
  the character <NAME>'s race is returned.

  Fails and returns 'Error' if the character <NAME> can't be found.

-------------------------------------------------------------------------------

  {@?rand}
  ~~~~~~~~
  USAGE:  {@?rand <VALUE1> = <VALUE2>}
          {@?rand <VALUE>}

  The first form returns a random number within the range <VALUE1> and
  <VALUE2>, e.g:  '{@?rand 5 = 500}' will return a random number between 5 and
  500 and '{@?rand -10 = 10}' will return a random number between -10 and 10.

  The second form returns a random number between 0 and <VALUE> - 1, i.e:
  '{@?rand 10}' will return a random number between 0 and 9.

-------------------------------------------------------------------------------

  {@?rangefrom}
  ~~~~~~~~~~~~~
  USAGE:  {@?rangefrom <STRING>}

  If the given string (<STRING>) contains a range operator, '{@?rangefrom}'
  returns the FROM ITEM NUMBER part of it, otherwise it returns the default
  of 'FIRST'.


  Example:
  ~~~~~~~~
  {@?rangefrom 4-12}     ...returns 4.

-------------------------------------------------------------------------------

  {@?rangeitems}
  ~~~~~~~~~~~~~~
  USAGE:  {@?rangeitems [<GRP/RANGE>] [<INDEX>] <OBJECT TYPE> [<OBJECT>]}

  The '{@?rangeitems}' query command is identical in usage to the
  '{@?totalitems}' query command, except that instead of returning the
  total number of items, it returns the total number of items in the given
  range, e.g:  If you had 5 things in your inventory, '{@?rangeitems 2-4
  things me}' would return 5 and '{@?rangeitems 2-4 things me}' would return
  3 (There are 3 items in the range 2-4.)

  For further details on the parameters that can be used with the
  '{@?rangeitems}' query command, please see the section on the
  '@with' command.

-------------------------------------------------------------------------------

  {@?rangeto}
  ~~~~~~~~~~~
  USAGE:  {@?rangeto <STRING>}

  If the given string (<STRING>) contains a range operator, '{@?rangeto}'
  returns the TO ITEM NUMBER part of it, otherwise it returns the default
  of 'LAST'.


  Example:
  ~~~~~~~~
  {@?rangeto 4-12}     ...returns 12.

-------------------------------------------------------------------------------

  {@?rank}
  ~~~~~~~~
  USAGE:  {@?rank <VALUE>}

  Returns <VALUE> as a rank (1st, 2nd, 3rd, etc.)

-------------------------------------------------------------------------------

  {@?realname}
  ~~~~~~~~~~~~
  USAGE:  {@?realname <NAME>}

  Returns the real name of the character <NAME>.  The real name of a character
  is their name without their prefix/suffix.

  Fails and returns 'Error' if the character <NAME> can't be found.

-------------------------------------------------------------------------------

  {@?realtime}
  ~~~~~~~~~~~~
  USAGE:  {@?realtime [<DATE>] [= [epoch|longdate] [full|date|long|short|time]}
          {@?realtime [<DATE>] [= [epoch|longdate] = <FORMAT>}

  Converts the date/time (Stored in either the EPOCH or LONGDATE date/time
  format) into a readable format such as 'Thursday 27th April 1995, 2:35pm'
  (Based on your preferred format, which can be set using the '@dateformat'
  command.)

  If <DATE> is omitted, the current system date/time will be returned, taking
  your time difference into account.  Otherwise, the EXACT date/time <DATE> is
  returned, WITHOUT your time difference being taken into account.

  By default, the EPOCH date/time format is assumed.  If 'longdate' is
  specified, <DATE> will be treated as a date stored in the LONGDATE date
  format.  Please see section on '{@?realtime}' for more information on
  the EPOCH and LONGDATE date/time formats.

  If 'date' or 'long' is specified, <DATE> will be converted as a long format
  date only, otherwise if 'short' is specified, <DATE> will be converted as a
  short format date only.

  If 'time' is specified, <DATE> will be converted as a time only.  If none of
  these are specified, or if 'full' is specified, <DATE> will be converted as
  full date and time.

  For more information on the EPOCH and LONGDATE date/time formats, please
  see section on '{@?realtime}'.

  NOTE:  TCZ-based MUDs are Year 2000 complient (Y2K) because all dates stored
         internally use either the EPOCH or LONGDATE format.

  Alternatively, a custom <FORMAT> may be specified, overriding the default
  preferred date format of the character calling '{@?realtime}'.  For this
  reason, <FORMAT> should only be used in special cases, where you do not
  wish to display a full date and/or time (It is used within the '@dateformat'
  help pages to display an example for each formatting code, based on the
  current time/date.)

  You should not force a specific date format, because other users from other
  countries may not use or understand the same date format as you.
  '{@?realtime}' used without <FORMAT> will display the date/time in the
  preferred format choosen by the user.

  For information on how to set your preferred time and date formats, please
  see section on '@dateformat'.  The same format codes can also be specified
  for <FORMAT>.


  The LONGDATE date format...
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~
  The LONGDATE format is a flexible date format used by TCZ-based MUDs to
  represent any date between 1st January 0001 and 31st December 9999.
  Unlike the EPOCH format, the LONGDATE format cannot represent time,
  however it can support a considerably greater range of dates than
  the EPOCH format (For example, it's used internally to represent
  each character's date of birth.)


  The EPOCH date/time format...
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  The EPOCH format is a standard date/time format used on UNIX systems, which
  can represent any date and time between Friday 13th December 1901, 8:45.52 pm
  and 19th January 2038, 3:14.07.  The EPOCH format is used internally
  throughout TCZ-based MUDs to represent dates and times (E.g:  Object
  creation/last usage dates/times, character total connect time, etc.)


  Examples:
  ~~~~~~~~~
  @echo {@?realtime}
  @echo {@?realtime {@?created me}}
  @echo {@?realtime {@?profile me = birthday} = longdate}
  @echo {@?realtime {@?datetime 01/01/00}}
  @echo {@?realtime {@?time} = epoch = WW MM}

-------------------------------------------------------------------------------

  {@?restriction}
  ~~~~~~~~~~~~~~~
  USAGE:  {@?restriction [<NAME>]}

  If the character <NAME> isn't specified, your payment restriction is
  returned, otherwise the payment restriction of the character <NAME> is
  returned.

  For more information about restricting payments, please see section on
  'bank' (The TCZ-based MUD's Bank.)

  Fails and returns 'Error' if the character <NAME> can't be found.

-------------------------------------------------------------------------------

  {@?result}
  ~~~~~~~~~~
  USAGE:  {@?result <VALUE> = "<TRUE>" "<FALSE>"}

  Depending on the result <VALUE>, '{@?result}' returns either the text
  specified for <TRUE> or <FALSE>.

  If <VALUE> is '0' or 'Error', the text <FALSE> will be returned, otherwise
  the text <TRUE> will be returned.


  Examples:
  ~~~~~~~~~
  @echo This room is{@?result {@?set here = abode} = "" " not"} set ABODE.
  @echo There {@?result {@eval {@?totalitems things here} = 1} = "is" "are"}
        {@?totalitems things here} thing{@?result {@eval {@?totalitems things
        here} = 1} = "" "s"} in your current location.

-------------------------------------------------------------------------------

  {@?rooms}
  ~~~~~~~~~
  USAGE:  {@?rooms <OBJECT> [= <NUMBER>]}

  Returns the name (Or ID if you control it) of the first (Or <NUMBER>'th,
  if <NUMBER> is specified) room in <OBJECT>'s contents list.
  Returns '*NOTHING*' if <OBJECT> has no rooms.

  Fails and returns 'Error' if <OBJECT> can't be found.

-------------------------------------------------------------------------------

  {@?score}
  ~~~~~~~~~
  USAGE:  {@?score <NAME>}

  Returns the score of the character <NAME>.

  Fails and returns 'Error' if the character <NAME> can't be found.

-------------------------------------------------------------------------------

  {@?scrheight}
  ~~~~~~~~~~~~~
  USAGE:  {@?scrheight <NAME>}

  If the character <NAME> isn't specified, your current set screen height (In
  lines) is returned, otherwise the character <NAME>'s current set screen
  height is returned.

  Fails and returns 'Error' if the character <NAME> can't be found.

-------------------------------------------------------------------------------

  {@?scrwidth} (Or {@?wrap})
  ~~~~~~~~~~~~~~~~~~~~~~~~~~
  USAGE:  {@?scrwidth <NAME>}
          {@?wrap <NAME>}

  If the character <NAME> isn't specified, your current set screen width (In
  characters) is returned, otherwise the character <NAME>'s current set
  screen width is returned (Or the default of 80 characters if they
  aren't connected.)

  NOTE:  Most terminals can't actually properly display a line that's exactly
         their screen width wide  -  The reason why is because the cursor is
         wrapped to the next line on displaying the rightmost character,
         creating an unwanted blank line between that and any following text.

         You should assume the max. length of text per line is their screen
         width setting minus 1, e.g:  '{@eval {@?scrwidth <NAME>} - 1}'.

  Fails and returns 'Error' if the character <NAME> can't be found.

-------------------------------------------------------------------------------

  {@?separator}
  ~~~~~~~~~~~~~
  USAGE:  {@?separator [single|double]}

  Returns a separating line of the width of the current character's screen.  By
  default, the line will be in the standard '-=-=-=-=-=-' style, however if
  the parameter 'single' is specified, the line will be in the style
  '-----------'.  If the parameter 'double' is specified, the line will be
  in the style '==========='.

  Examples:
  ~~~~~~~~~
  @echo %c{@?separator}
  @echo %m{@?separator single}
  @echo %g{@?separator double}

-------------------------------------------------------------------------------

  {@?set}
  ~~~~~~~
  USAGE:  {@?set <OBJECT> = [!]<FLAG> [[!]<FLAG>] [...] [= flist|fothers]}

  Succeeds if <OBJECT> has the specified flag(s) set/reset on it.  If <OBJECT>
  is a character, you can also test whether the specified friend flags are
  set/reset on them in your friends list (If the 3rd parameter 'flist' is
  specified), or whether they have set/reset the specified friend flags on
  you in their friends list (If the 3rd parameter 'fothers' is specified.)
 
  If the character <OBJECT> is not on your friends list (Or you're not on
  theirs, and 'fothers' is specified), the standard (Initial) friend flags
  will be assumed to be set on them (FCHAT, LINK, MAIL, PAGETELL and
  PAGETELLFRIENDS.)

  Fails and returns 'Error' if specified flag(s) aren't set/reset on <OBJECT>,
  or <OBJECT> can't be found.


  Examples:
  ~~~~~~~~~
  @echo {@?set *fred bloggs = HAVEN LISTEN}
  @echo {@?set *fred bloggs = PAGETELL = flist}
  @echo {@?set mything = STICKY}
  @echo {@?set here = !ABODE}

-------------------------------------------------------------------------------

  {@?size}
  ~~~~~~~~
  USAGE:  {@?size [<OBJECT>]}

  Returns the total uncompressed size of <OBJECT> (Or yourself, if <OBJECT>
  isn't specified) in bytes.

  Fails and returns 'Error' if <OBJECT> can't be found.

-------------------------------------------------------------------------------

  {@?status} (Or {@?level})
  ~~~~~~~~~~~~~~~~~~~~~~~~~
  USAGE:  {@?status [<NAME> =] [short|colour]}
          {@?level [<NAME> =] [short|colour]}

  Returns the full status (Rank) of the character <NAME> (If <NAME> is
  specified, otherwise your status is returned.)

  By default, the full status (I.e:  'Apprentice Druid', 'Wizard', etc.) is
  returned.  However, if the optional parameter 'short' is specified, the
  status will be returned as a single letter (In a similar style to the
  'who' list, i.e:  'a' for an Apprentice Druid, 'W' for a Wizard, etc.)

  If the optional parameter 'colour' is specified, the correct colour for the
  user's status will be returned (I.e:  Yellow for an Apprentice Druid,
  light cyan for a Wizard, etc.)

  Fails and returns 'Error' if the character <NAME> can't be found.

-------------------------------------------------------------------------------

  {@?succ}
  ~~~~~~~~
  USAGE:  {@?succ <OBJECT>}

  Returns the success message of <OBJECT>.

  Fails and returns 'Error' if <OBJECT> can't be found.

-------------------------------------------------------------------------------

  {@?suffix}
  ~~~~~~~~~~
  USAGE:  {@?suffix [<NAME>]}

  If the character <NAME> isn't specified, your name suffix is returned,
  otherwise it returns <NAME>'s name suffix.

  Fails and returns 'Error' if the character <NAME> can't be found.

-------------------------------------------------------------------------------

  {@?tczlink}
  ~~~~~~~~~~~
  USAGE:  {@?tczlink "<NAME>" "<COMMAND>" "<DESCRIPTION>" "<IMAGE URL>"}
          {@?tczlink "<NAME>" "<COMMAND>" ["<HELPTEXT>"]}

  Inserts a properly formatted HTML link which will allow users of the World
  Wide Web Interface to execute a compound command simply by clicking on the
  link.

  <NAME> is the name of the link, which will appear on-screen for the user to
  click on.

  <COMMAND> is a compound command to execute when the link is clicked on, just
  as though the user had typed it at the command-line.

  To prevent abuse, only compound commands can be executed using '{@?tczlink}'.

  <HELPTEXT> is optional quick help text that will be displayed in recent
  browsers if the user holds their mouse pointer still over the link.

  <IMAGE URL> is an optional image, which will be used instead of a hyperlink
  (The user clicks on the image to execute the compound command.)

  NOTE:  <DESCRIPTION> must also be specified, if <IMAGE URL> is used.
         <NAME> is not used (You can specify "" for this if you wish.)

  <DESCRIPTION> is a text description of the image (If <IMAGE URL> is
  specified), which will be seen by users who have images switched off,
  or are using a text-only browser.

  The best way to insert a compound command link into a description is using
  query substition, i.e:  '%{@?tczlink ...}' (NOTE:  If you type this on the
  command-line, you will need to protect the opening '{' with '\' to prevent
  it from being evaluated.)

  IMPORTANT:  If you do not use query substitution, the HTML part of the link
              will be 'hard' substituted and will be difficult to edit or
              remove without deleting the entire line.


  Example:
  ~~~~~~~~
  @desc me = Click %\{@?tczlink "HERE" "pub" "Click to go to the Pub..."} to
     go to the PUB.

-------------------------------------------------------------------------------

  {@?termtype}
  ~~~~~~~~~~~~
  USAGE:  {@?termtype <NAME>}

  If the character <NAME> isn't specified, your current terminal type is
  returned (E.g:  'vt100'), otherwise the character <NAME>'s terminal type
  is returned.

  Fails and returns 'Error' if the character <NAME> can't be found.

-------------------------------------------------------------------------------

  {@?things}  (Or {@?objects})
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  USAGE:  {@?things <OBJECT> [= <NUMBER>]}
          {@?objects <OBJECT> [= <NUMBER>]}

  Returns the name (Or ID if you control it) of the first (Or <NUMBER>'th,
  if <NUMBER> is specified) thing in <OBJECT>'s contents list.
  Returns '*NOTHING*' if <OBJECT> has no things.

  Fails and returns 'Error' if <OBJECT> can't be found.

-------------------------------------------------------------------------------

  {@?time}
  ~~~~~~~~
  USAGE:  {@?time [=] [epoch|longdate]}

  Returns the current date and time in either the EPOCH or LONGDATE date/time
  format (If the date/time format is not specified, EPOCH will be assumed.)

  For more information on the EPOCH and LONGDATE date/time formats, please
  see section on '{@?realtime}'.


  Example:
  ~~~~~~~~
  @echo The time is {@?realtime {@?time}}.

-------------------------------------------------------------------------------

  {@?timediff}
  ~~~~~~~~~~~~
  USAGE:  {@?timediff [<NAME>]}

  If the character <NAME> isn't specified, your time difference (In hours,
  set using 'set timediff <DIFFERENCE>') is returned, otherwise the character
  <NAME>'s time difference is returned.

  Fails and returns 'Error' if the character <NAME> can't be found.

-------------------------------------------------------------------------------

  {@?title} ({@?who})
  ~~~~~~~~~~~~~~~~~~~
  USAGE:  {@?title <NAME>}
          {@?who <NAME>}

  If the character <NAME> isn't specified, your title ('who' list message) is
  returned, otherwise the character <NAME>'s title is returned.

  Fails and returns 'Error' if the character <NAME> can't be found.

-------------------------------------------------------------------------------

  {@?total}
  ~~~~~~~~~
  USAGE:  {@?total [<NAME>]}

  If the character <NAME> isn't specified, the total number of battles you've
  fought are returned, otherwise the total number of battles the character
  <NAME> has fought are returned.

  Fails and returns 'Error' if the character <NAME> can't be found.

-------------------------------------------------------------------------------

  {@?totalitems}
  ~~~~~~~~~~~~~~
  USAGE:  {@?totalitems [<GRP/RANGE>] [<INDEX>] <OBJECT TYPE> [<OBJECT>]}

  The '{@?totalitems}' query command is similar in usage to the '@with'
  command, except that no command (Or block of commands) to execute is
  specified.  Instead, '{@?totalitems}' counts the total number of items
  that would be processed (If the same parameters were given to '@with',
  along with a command (Or block of commands) to execute) and returns
  this number.

  For example, you can count the total number of things you are carrying and
  then display this number by typing '@echo {@?totalitems things me}'.

  For further details on the parameters that can be used with the
  '{@?totalitems}' query command, please see the section on the
  '@with' command.

  PLEASE NOTE:  If grouping/range operators are used with this command, they
                will have no effect on the number of items returned  -  To
                count the total number of items taking grouping/range operators
                into account, you will need to either use the '{@?rangeitems}'
                or '{@?groupitems}' query commands.

-------------------------------------------------------------------------------

  {@?totalactive}
  ~~~~~~~~~~~~~~~
  USAGE:  {@?totalactive [<NAME>]}

  Returns the total time that the character <NAME> has spent active (Not
  idling) whilst connected to the TCZ-based MUD in seconds, e.g:  '@echo
  {@?interval {@?totalactive me}}' will display your total active time in
  hours, minutes, seconds, etc.

  Fails and returns 'Error' if the character <NAME> can't be found.

-------------------------------------------------------------------------------

  {@?totalidle}
  ~~~~~~~~~~~~~
  USAGE:  {@?totalidle [<NAME>]}

  Returns the total time that the character <NAME> has spent idle whilst
  connected to the TCZ-based MUD in seconds, e.g:  '@echo {@?interval
  {@?totalidle me}}' will display your total idle time in hours, minutes,
  seconds, etc.

  Fails and returns 'Error' if the character <NAME> can't be found.

-------------------------------------------------------------------------------

  {@?totallogins}
  ~~~~~~~~~~~~~~~
  USAGE:  {@?totallogins [<NAME>]}

  Returns the character <NAME>'s total number of logins since they created
  their character, e.g:  '@echo {@?totallogins me}' will display your total
  number of logins.

  Fails and returns 'Error' if the character <NAME> can't be found.

-------------------------------------------------------------------------------

  {@?totaltime}
  ~~~~~~~~~~~~~
  USAGE:  {@?totaltime [<NAME>]}

  Returns the total time that the character <NAME> has been using the TCZ-based
  MUD for in seconds, e.g:  '@echo {@?interval {@?totaltime me}}' will display
  your total time connected in hours, minutes, seconds, etc.

  NOTE:  Total time includes time spent idle.

  Fails and returns 'Error' if the character <NAME> can't be found.

-------------------------------------------------------------------------------

  {@?true}
  ~~~~~~~~
  USAGE:  {@?true}

  '{@?true}' returns 'OK' if the last command executed succeeded, otherwise it
  returns 'Error'.

  '{@?true}' is of most use when used in the <CONDITION> part of an '@if' or
  '@while' command, e.g:

  @if {@?true} do @echo Success!

-------------------------------------------------------------------------------

  {@?typeof}
  ~~~~~~~~~~
  USAGE:  {@?typeof <OBJECT>}
          {@?typeof <OBJECT> = <TYPE>}

  The first form returns the type of <OBJECT> as a string, e.g:  'Exit'.

  The second form succeeds and returns 'OK' if <OBJECT> is of <TYPE>,
  e.g:

     @if {@?typeof mything = thing} do @echo Thing!; else @echo Not a thing!

  Both forms fail and return 'Error' if <OBJECT> can't be found.


  The types of objects returned are:
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  Alarm, Array, Character, Command, Exit, Fuse, Thing, Property, Room,
  Variable.

-------------------------------------------------------------------------------

  {@?uid}
  ~~~~~~~
  USAGE:  {@?uid [<NAME>]}

  Returns the name (Or ID if you control them) of the character you (Or the
  character <NAME>, if specified) are currently building as.

  Fails and returns 'Error' if <NAME> can't be found.

-------------------------------------------------------------------------------

  {@?uptime}
  ~~~~~~~~~~
  USAGE:  {@?uptime [dbcreated|dbuptime|dbaverage]}
          {@?uptime [longesttime|longestdate]}
          {@?uptime [uptime|startdate]}


  The '{@?uptime}' query command returns one of the following:
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  uptime       The time (In seconds) the TCZ-based MUD has been running for
               since it was last restarted.

  startdate    The time and date when the TCZ-based MUD was last restarted.

  dbcreated    The time and date when the database was created.

  dbuptime     The accumulated up-time (In seconds) since the database was
               created (The total accumulated time the TCZ-based MUD has
               been running for since the database was created, excluding
               periods when it was down.)

  dbaverage    The average up-time (In seconds, worked out by dividing the
               accumulated up-time by the number of times the TCZ-based MUD
               has been restarted.)

  longesttime  The longest recorded up-time (In seconds.)

  longestdate  The time and date when the longest uptime occurred.


  NOTE:  If no parameters are specified, 'uptime' is assumed.


  Example:
  ~~~~~~~~
  @command UptimeTest =\
     @echo\
     @echo %y%l%@%n %g%l(%y%l%@%m%g%l) was restarted on %y%l\{@?realtime
        \{@?uptime startdate}} %g%land has been running for %w%l\{@?interval
        \{@?uptime uptime}}%g%l.\
     @echo\  
     @echo %g%lThe database was created on %y%l\{@?realtime \{@?uptime
        dbcreated}} %g%land has been running for an accumulated time of
        %w%l{@?interval {@?uptime dbuptime}} %g%l(Average is %y%l\{@?interval
        {@?uptime dbaverage}}%g%l.)\
     @echo\
     @echo %g%lThe longest recorded uptime of %w%l\{@?interval \{@?uptime
        longesttime}} %g%loccurred on %y%l\{@?realtime \{@?uptime
        longestdate}}%g%l.\
     @echo

-------------------------------------------------------------------------------

  {@?variables}
  ~~~~~~~~~~~~~
  USAGE:  {@?variables <OBJECT> [= <NUMBER>]}

  Returns the name (Or ID if you control it) of the first (Or <NUMBER>'th,
  if <NUMBER> is specified) variable in <OBJECT>'s variables list.
  Returns '*NOTHING*' if <OBJECT> has no variables.

  Fails and returns 'Error' if <OBJECT> can't be found.

-------------------------------------------------------------------------------

  {@?version}
  ~~~~~~~~~~~
  USAGE:  {@?version [codebase|codedesc|codename|compiled]}
          {@?version [version|os]}

  With no parameters, '{@?version}' returns the name and short name of the
  TCZ-based MUD, along with the version, code base, project name, operating
  system and the source code compilation date/time, e.g:

     New TCZ-based MUD (TCZ) (TCZ v4.3.1) TCZ/Odyssey (Linux) Dec 3 2003
     16:30:10

  Alternatively, one of the following parameters can be specified to return
  specific version information:

  CodeBase   Returns the code base name (E.g:  'TCZ')
  CodeDesc   Returns the code base description (E.g:  'Original')
  CodeName   Returns the code base project name (E.g:  'Odyssey')
  Compiled   Returns the source code compilation date and time (E.g:  'Dec 3
             2003 16:30:10')
  Version    Returns the code base version number (E.g:  'v4.4.2')
  OS         Returns the operating system (E.g:  'Linux'.)

-------------------------------------------------------------------------------

  {@?volume}
  ~~~~~~~~~~
  USAGE:  {@?volume <OBJECT>}

  Returns the volume of <OBJECT> in litres (There are 10 litres to a cubic
  metre.)

  Fails and returns 'Error' if <OBJECT> can't be found.

-------------------------------------------------------------------------------

  {@?wagetime}
  ~~~~~~~~~~~~
  USAGE:  {@?wagetime [<NAME>]}

  Returns the active time (in seconds) that the character <NAME> needs before
  TCZ-based MUD pays their hourly wage, e.g: '@echo {@?interval {@?wagetime 
  me}} will display your remaining active time in minutes, seconds, etc.

  Fails and returns 'Error' if the character <NAME> can't be found.

-------------------------------------------------------------------------------

  {@?weight}
  ~~~~~~~~~~
  USAGE:  {@?weight <OBJECT>}

  Returns the total weight of <OBJECT> in kilograms.  If <OBJECT> is a room,
  the total weight of its contents will be returned, otherwise the total weight
  of <OBJECT> and its contents will be returned.

  Fails and returns 'Error' if <OBJECT> can't be found.

-------------------------------------------------------------------------------

  {@?won}
  ~~~~~~~
  USAGE:  {@?won [<NAME>]}

  If the character <NAME> isn't specified, the number of battles you've won
  are returned, otherwise the number of battles the character <NAME> has won
  are returned.

  Fails and returns 'Error' if the character <NAME> can't be found.

-------------------------------------------------------------------------------

  {@?www}
  ~~~~~~~
  USAGE:  {@?www [<NAME>]}

  If the character <NAME> isn't specified, your web site address is returned,
  otherwise the character <NAME>'s web site address is returned.

  Fails and returns 'Error' if the character <NAME> can't be found.


===============================================================================
   >>>>>                   List processing queries...                  <<<<<
===============================================================================

  NOTE:  If you want to try out any of the following query commands from
         the command line (I.e:  Not from within a compound command), use
         the '~' command, e.g:  ~{@?name me}

-------------------------------------------------------------------------------

  {@?delete}
  ~~~~~~~~~~
  USAGE:  {@?delete <NUMBER> "<SEPARATOR>" "<LIST>"}

  Removes the item number <NUMBER> from the list <LIST>, and returns the
  resulting new list.  If the item number specified doesn't exist, the list
  remains the same.  <SEPARATOR> is the string used to separate the items in
  the list from each other.

  If you use the word 'LAST' instead of specifing a number for <NUMBER>, it
  deletes the last item in the list.  Using the word 'FIRST' deletes the
  first item in the list.


  Examples:
  ~~~~~~~~~
  {@?delete 2 ";" "eggs;bacon;sausage;chips;mushrooms"}

  ...returns 'eggs;sausage;chips;mushrooms' ('bacon' (The 2nd item) has been
  deleted.)

  {@?delete LAST ";" "eggs;bacon;sausage;chips;mushrooms"}

  ...returns 'eggs;bacon;sausage;chips' ('mushrooms' (The last item) has
  been deleted.)

-------------------------------------------------------------------------------

  {@?insert}
  ~~~~~~~~~~
  USAGE:  {@?insert "<ITEM>" <NUMBER> "<SEPARATOR>" "<LIST>"}

  Inserts <ITEM> IN FRONT of item number <NUMBER> in the list <LIST>.  If
  <NUMBER> doesn't exist (E.g:  List with 4 items and you specify 9 as
  <NUMBER>), <ITEM> will be added to the end of the list.  '{@?insert}'
  completes the set of list processing queries, making lists FULLY DYNAMIC.
  <SEPARATOR> is the string used to separate the items in the list from each
  other.

  If you use the word 'LAST' instead of specifing a number for <NUMBER>, it
  inserts <ITEM> in front of the last item in the list.  Using the word
  'FIRST' inserts <ITEM> in front of the first item in the list.

  The word 'END' can also be used with '{@?insert}' (But not with any of the
  other list processing queries)  -  This adds <ITEM> to the end of the list.


  Examples:
  ~~~~~~~~~
  {@?insert "bread" 3 ";" "eggs;bacon;sausage;chips;mushrooms"}

  ...returns 'eggs;bacon;bread;sausage;chips;mushrooms' ('bread' has been
  inserted in front of the 3rd item in the list ('sausage'.))

  {@?insert "bread" FIRST ";" "eggs;bacon;sausage;chips;mushrooms"}

  ...returns 'bread;eggs;bacon;sausage;chips;mushrooms' ('bread' has been
  inserted in front of the first item in the list ('eggs'.))

  {@?insert "bread" LAST ";" "eggs;bacon;sausage;chips;mushrooms"}

  ...returns 'eggs;bacon;sausage;chips;bread;mushrooms' ('bread' has been
  inserted in front of the last item in the list ('mushrooms'.))

  {@?insert "bread" END ";" "eggs;bacon;sausage;chips;mushrooms"}

  ...returns 'eggs;bacon;sausage;chips;mushrooms;bread' ('bread' has been
  added onto the end of the list.

-------------------------------------------------------------------------------

  {@?item} and {@?itemexact}
  ~~~~~~~~~~~~~~~~~~~~~~~~~~
  USAGE:  {@?item[exact] "<ITEM>" "<SEPARATOR>" "<LIST>"}

  Returns 0 if the item <ITEM> isn't found in the list <LIST>, otherwise, it
  returns the position of the item in the list (1 = first item, 2 = second,
  and so on.)  <SEPARATOR> is the string used to separate the items in the
  list from each other.  '{@?itemexact}' exactly matches for <ITEM>, whereas
  '{@?item}' partially matches.


  Examples:
  ~~~~~~~~~
  {@?itemexact "chips" ";" "eggs;bacon;sausage;chips;mushrooms"}

  ...returns 4  ('chips' is exactly matched with the 3rd item in the list.)

  {@?item "bac" ";" "eggs;bacon;sausage;chips;mushrooms"}

  ...returns 2  ('bac' is partially matched with the item 'bacon', which is
                the 2nd item in the list.)

-------------------------------------------------------------------------------

  {@?itemno}
  ~~~~~~~~~~
  USAGE:  {@?itemno <NUMBER> "<SEPARATOR>" "<LIST>"}

  Returns the name of item <NUMBER> in the list <LIST>.  If that item doesn't
  exist (I.e:  {@?itemno 9 "eggs;bacon;sausage;chips;mushrooms"}), it returns
  an empty string ("".)  <SEPARATOR> is the string used to separate the items
  in the list from each other.

  If you use the word 'LAST' instead of specifing a number for <NUMBER>, it
  returns the name of the last item in the list.  Using the word 'FIRST'
  returns the name of the first item in the list.


  Examples:
  ~~~~~~~~~
  {@?itemno 4 ";" "eggs;bacon;sausage;chips;mushrooms"}

  ...returns 'chips'.

  {@?itemno LAST ";" "eggs;bacon;sausage;chips;mushrooms"}

  ...returns 'mushrooms'.

-------------------------------------------------------------------------------

  {@?modify}
  ~~~~~~~~~~
  USAGE:  {@?modify "<NEW ITEM>" <NUMBER> "<SEPARATOR>" "<LIST>"}

  Replaces item number <NUMBER> in the list <LIST> with <NEW ITEM> and returns
  the resulting new list.  If the item number specified doesn't exist, the list
  remains the same.  <SEPARATOR> is the string used to separate the items in
  the list from each other.

  If you use the word 'LAST' instead of specifing a number for <NUMBER>, it
  replaces the last item in the list.  Using the word 'FIRST' replaces the
  first item in the list.


  Examples:
  ~~~~~~~~~
  {@?modify "tomato" 2 ";" "eggs;bacon;sausage;chips;mushrooms"}

  ...returns 'eggs;tomato;sausage;chips;mushrooms' ('bacon' (The 2nd item)
  has been been replaced with 'tomato'.)

  {@?modify "tomato" LAST ";" "eggs;bacon;sausage;chips;mushrooms"}

  ...returns 'eggs;bacon;sausage;chips;tomato' ('mushrooms' (The last item)
  has been replaced with 'tomato'.)

-------------------------------------------------------------------------------

  {@?noitems}
  ~~~~~~~~~~~
  USAGE:  {@?noitems "<SEPARATOR>" "<LIST>"}

  Returns the number of items in the list <LIST>.  <SEPARATOR> is the string
  used to separate the items in the list from each other.


  Example:
  ~~~~~~~~
  {@?noitems ";" "eggs;bacon;sausage;chips;mushrooms"}

  ...returns 5  (Meaning there are 5 items in the list.)

-------------------------------------------------------------------------------

  {@?sortalpha}
  ~~~~~~~~~~~~~
  USAGE:  {@?sort[alpha] ascending "<SEPARATOR>" "<LIST>"}
          {@?sort[alpha] descending "<SEPARATOR>" "<LIST>"}

  Sorts the list <LIST> into alphabetical order, removing any blank (Empty)
  items.  The first form (Ascending) sorts the items into ascending 
  alphabetical order.  The second (Descending) sorts the items into 
  descending alphabetical order.
  
  <SEPARATOR> is the string used to separate the items in the list from each 
  other.


  Examples:
  ~~~~~~~~~
  {@?sortalpha ascending ";" "eggs;bacon;sausage;chips;mushrooms"}

  ...returns 'bacon;chips;eggs;mushrooms;sausage'.

  {@?sortalpha descending ";" "eggs;bacon;sausage;chips;mushrooms"}

  ...returns 'sausage;mushrooms;eggs;chips;bacon'.

-------------------------------------------------------------------------------

  {@?sortnumeric}
  ~~~~~~~~~~~~~~~
  USAGE:  {@?sortnumeric ascending <KEY> "<SEPARATOR>" "<LIST>"}
          {@?sortnumeric descending <KEY> "<SEPARATOR>" "<LIST>"}

  Sorts the list <LIST> into numerical order, removing any blank (Empty)
  items.  The first form (Ascending) sorts the items into ascending 
  numerical order.  The second (Descending) sorts the items into 
  descending numerical order.

  <KEY> is the numerical value in each item which will be taken as the sort
  value (I.e:  '1' means the 1st numerical value found in each item will be
  taken as the sort value, '2' means the 2nd numerical value found in each
  item will be taken as the sort value, etc.)  If an item doesn't contain
  any numbers, 0 is assumed as the sort value.

  <SEPARATOR> is the string used to separate the items in the list from each 
  other.


  Examples:
  ~~~~~~~~~
  {@?sortnumeric ascending 1 ";" "56;2;524;37;10;128;42"}

  ...returns '2;10;37;42;56;128;524'.

  {@?sortnumeric descending 1 ";" "56;2;524;37;10;128;42"}

  ...returns '524;128;56;42;37;10;2'.

  {@?sortnumeric ascending 2 ";" "a5b2;a9b1;a4b6;a7b9;a1b3"}

  ...returns 'a9b1;a5b2;a1b3;a4b6;a7b9'.


===============================================================================
   >>>>>                  String processing queries...                 <<<<<
===============================================================================

  NOTE:  If you want to try out any of the following query commands from
         the command line (I.e:  Not from within a compound command), use
         the '~' command, e.g:  ~{@?name me}

-------------------------------------------------------------------------------

  {@?censor}
  ~~~~~~~~~~
  USAGE:  {@?censor "<STRING>"}

  Censors bad language in the string <STRING>, replacing vulgar words with
  '*'s, in a similar way to the CENSORED flag.


  Example:
  ~~~~~~~~
  @echo {@?censor "shit"}

-------------------------------------------------------------------------------

  {@?filter}
  ~~~~~~~~~~
  USAGE:  {@?filter "<STRING>"}

  Filters %-type substitutions (I.e:  ANSI codes, etc.) out of the string
  <STRING> and returns the resulting string.


  Example:
  ~~~~~~~~
  @echo {@?filter "%y%lThe %g%lsubstitutions %r%lused %w%lin %m%lthis %pstring
  %nwill %\{@?race}be %y%l%i%rfiltered %fout%x."}
  
-------------------------------------------------------------------------------

  {@?format}
  ~~~~~~~~~~
  USAGE:  {@?format "<STRING>"}

  Formats the string <STRING> (Auto-capitalises and adds punctuation) and
  returns resulting string.


  Example:
  ~~~~~~~~
  @echo {@?format "this text will be auto-formatted"}

-------------------------------------------------------------------------------

  {@?head}
  ~~~~~~~~
  USAGE:  {@?head "<SUBSTRING>" "<STRING>"}

  Returns text in <STRING> that preceeds the first occurrence of <SUBSTRING>.


  Example:
  ~~~~~~~~
  {@?head "@" "tczadmin@tcz.mud.host"}

  ...returns 'tczadmin'.

-------------------------------------------------------------------------------

  {@?leftstr}
  ~~~~~~~~~~~
  USAGE:  {@?leftstr <COUNT> "<STRING>"}

  Returns the leftmost <COUNT> characters in the string <STRING>.


  Example:
  ~~~~~~~~
  {@?leftstr 15 "The virtual world of TCZ."}

  ...returns 'The virtual wor'.

-------------------------------------------------------------------------------

  {@?lower}
  ~~~~~~~~~
  USAGE:  {@?tolower "<STRING>"}
          {@?lower "<STRING>"}

  Converts the text in <STRING> to lowercase and returns the resulting
  string.


  Example:
  ~~~~~~~~
  {@?lower "The virtual world of TCZ."}

  ...returns 'the virtual world of tcz.'

-------------------------------------------------------------------------------

  {@?midstr}
  ~~~~~~~~~~
  USAGE:  {@?midstr <INDEX> <COUNT> "<STRING>"}

  Returns a section of the string <STRING>.  <INDEX> is the character to
  start from (From the left hand side of the string) and count is the number
  of characters from that position to return.


  Example:
  ~~~~~~~~
  {@?midstr 14 10 "The virtual world of TCZ."}

  ...returns 'orld of TC'.

-------------------------------------------------------------------------------

  {@?pad}
  ~~~~~~~
  USAGE:  {@?pad[left|right|centre] <LENGTH> "<PADTEXT>" "<TEXT>"}
          {@?pad <LENGTH> "<PADTEXT>"}

  In the first form, '{@?pad}' pads out <TEXT> with the text <PADTEXT> to make
  it <LENGTH> characters long.  If <TEXT> is longer than <LENGTH>, <TEXT> will
  be truncated to <LENGTH> characters long.  If '0' is given for <LENGTH>, your
  screen width will be assumed (Or if used within a compound command, the
  screen width of the character executing it), e.g:  '@echo {@?pad 10 "-"
  "hello!"}' displays 'hello!----' and '@echo {@?padcentre 41 "-="
  "[ Hello ]"}' displays '-=-=-=-=-=-=-=-=[ Hello ]=-=-=-=-=-=-=-=-'.

  You can left, right or centre justify <TEXT> by using '{@?padleft}',
  '{@?padright}' or '{@?padcentre}' instead of '{@?pad}', e.g:  '@echo
  {@?padright 10 "-" "hello!"}' displays '----hello!'.

  In the second form, '{@?pad}' returns a string of length <LENGTH> padded out
  with the text <PADTEXT>, e.g:  '@echo {@?pad 0 "="}' will display a line of
  '='s across the width of your screen.

  If you wish to use %-type substitutions (I.e:  ANSI codes, etc.) in <TEXT>,
  please place them within {}'s (E.g:  '{%g%l}'), otherwise they will affect
  the justification of '{@?pad}', e.g:  '@echo %g%l{@?padcentre 0 "-"
  ">{%y%l}Hello!{%g%l}<"}'.  The '{@?filter}' string processing query command
  may be used to filter %-type substitions out of a given string, e.g:
  '@echo {@?padcentre 0 "-" "{@?filter $3}"}' within a compound command.

  ANSI colour substitutions ARE NOT supported in the <PADTEXT> part.

-------------------------------------------------------------------------------

  {@?replace}
  ~~~~~~~~~~~
  USAGE:  {@?replace "<SEARCHSTR>" "<REPLACESTR>" [+]<OCCURENCE> "<STRING>"}

  '{@?replace}' replaces the specified <OCCURENCE> of <SEARCHSTR> with
  <REPLACESTR> within the string of text <STRING>.

  For <OCCURENCE>, an occurence number can be given (I.e:  '2' for the second
  occurence, '3' for the third, etc.), or one of the keywords 'FIRST', 'LAST'
  or 'ALL' (Replace ALL occurences within <STRING>.)  If <OCCURENCE> is
  prefixed with a '+', the given <OCCURENCE> will be replaced on EVERY line
  of <STRING>.


  Example:
  ~~~~~~~~
  @desc here = {@?replace "wiht" "with" 1 "{@?desc here}"}

-------------------------------------------------------------------------------

  {@?rightstr}
  ~~~~~~~~~~~~
  USAGE:  {@?rightstr <COUNT> "<STRING>"}

  Returns the rightmost <COUNT> characters in the string <STRING>.


  Example:
  ~~~~~~~~
  {@?rightstr 4 "The virtual world of TCZ."}

  ...returns 'TCZ.'.

-------------------------------------------------------------------------------

  {@?strlen} ({@?length})
  ~~~~~~~~~~~~~~~~~~~~~~~
  USAGE:  {@?strlen "<STRING>"}
          {@?length "<STRING>"}

  Returns the length in characters of the string <STRING>.


  Example:
  ~~~~~~~~
  {@?strlen "The virtual world of TCZ."}

  ...returns the length 25  (The specified string is 25 characters long.)

-------------------------------------------------------------------------------

  {@?strpos}
  ~~~~~~~~~~
  USAGE:  {@?strpos "<SUBSTRING>" "<STRING>"}

  Returns the position of <SUBSTRING> within the string <STRING>.  If
  <SUBSTRING> isn't found in <STRING>, it returns 0.


  Examples:
  ~~~~~~~~~
  {@?strpos "world" "The virtual world of TCZ."}

  ...returns the position 13.

  {@?strpos "ual" "The virtual world of TCZ."}

  ...returns the position 9.

-------------------------------------------------------------------------------

  {@?strprefix}
  ~~~~~~~~~~~~~
  USAGE:  {@?strprefix "<SUBSTRING>" "<STRING>"}

  Succeeds if the string <SUBSTRING> prefixes the string <STRING>.  Fails
  otherwise.


  Examples:
  ~~~~~~~~~
  {@?strprefix "fred" "Fred Bloggs"}

  ...command succeeds.

  {@?strprefix "fr" "Fred Bloggs"}

  ...command succeeds.

  {@?strprefix "free" "Fred Bloggs"}

  ...command fails.

  {@?strprefix "joe bloggs" "Fred Bloggs"}

  ...command fails.

-------------------------------------------------------------------------------

  {@?tail}
  ~~~~~~~~
  USAGE:  {@?tail "<SUBSTRING>" "<STRING>"}

  Returns text in <STRING> that follows the first occurrence of <SUBSTRING>.


  Example:
  ~~~~~~~~
  {@?tail "@" "tczadmin@tcz.mud.host"}

  ...returns 'tcz.mud.host'.

-------------------------------------------------------------------------------

  {@?upper}
  ~~~~~~~~~
  USAGE:  {@?toupper "<STRING>"}
          {@?upper "<STRING>"}

  Converts the text in <STRING> to uppercase and returns the resulting
  string.


  Example:
  ~~~~~~~~
  {@?upper "The virtual world of TCZ."}

  ...returns 'THE VIRTUAL WORLD OF TCZ.'

-------------------------------------------------------------------------------

  {@?wildcard}
  ~~~~~~~~~~~~
  USAGE:  {@?wildcard "<WILDCARD>" "<STRING>"}

  Succeeds if <STRING> matches the wildcard specification <WILDCARD>, 
  otherwise fails.  See section on '@find' for more details about wildcards.


  Examples:
  ~~~~~~~~~
  {@?wildcard "j*digi*" "jc digita"}

  ...command succeeds.

  {@?wildcard "j*digi*" "fred bloggs"}

  ...command fails.


===============================================================================
   >>>>>                 Sentence processing queries...                <<<<<
===============================================================================

  NOTE:  If you want to try out any of the following query commands from
         the command line (I.e:  Not from within a compound command), use
         the '~' command, e.g:  ~{@?name me}

-------------------------------------------------------------------------------

  {@?nowords}
  ~~~~~~~~~~~
  USAGE:  {@?nowords "<SENTENCE>"}

  Returns the number of words in the sentence <SENTENCE>.


  Example:
  ~~~~~~~~
  {@?nowords "The virtual world of TCZ."}

  ...returns 5  (Meaning there are 5 words in the sentence.)

-------------------------------------------------------------------------------

  {@?word} and {@?wordexact}
  ~~~~~~~~~~~~~~~~~~~~~~~~~~
  USAGE:  {@?word[exact] "<WORD>" "<SENTENCE>"}

  Returns 0 if the word <WORD> isn't found in the sentence <SENTENCE>,
  otherwise, it returns the number of the word in the sentence (1 = first
  word, 2 = second, and so on.)  '{@?wordexact}' exactly matches for <WORD>,
  whereas '{@?word}' partially matches.


  Examples:
  ~~~~~~~~~
  {@?wordexact "of" "The virtual world of TCZ."}

  ...returns 4  ('of' is exactly matched with the 4th word in the sentence.)

  {@?word "irtu" "The virtual world of TCZ."}

  ...returns 2  ('irtu' is partially matched with the word 'virtual', which is
                the 2nd word in the sentence.)

-------------------------------------------------------------------------------

  {@?wordno}
  ~~~~~~~~~~
  USAGE:  {@?wordno <NUMBER> "<SENTENCE>"}

  Returns word number <NUMBER> in the sentence <SENTENCE>.  If that word
  doesn't exist (I.e:  {@?wordno 5 "Hello world!"}), it returns an empty
  string ("".)

  If you use the word 'LAST' instead of specifing a number for <NUMBER>, it
  returns the last word in the sentence.  Using the word 'FIRST' returns the
  first word in the sentence.


  Examples:
  ~~~~~~~~~
  {@?wordno 4 "The virtual world of TCZ."}

  ...returns 'of'.

  {@?wordno LAST "The virtual world of TCZ."}

  ...returns 'TCZ.'.


===============================================================================
   >>>>>               Special action compound commands...               <<<<<
===============================================================================

  .ACTION
  ~~~~~~~
  TCZ-based MUD's feature a number of special action compound commands which
  are executed when certain actions are performed on an object (For example,
  picking it up, looking at it, dropping it, etc.)

  Each of these compound commands is prefixed with a '.', usually followed by
  a name which is appropriate for the command it is related to (E.g:  '.look'
  and '.looked' for the 'look' command.)

  To use action compound commands, simply create them and attach them to the
  required object (Using 'drop' or '@tel'.)

  The functionality of some action compound commands can also be replicated
  with fuses, but action compound commands can save you time, effort and Quota
  to achieve the same effect.


  Parameters for most action compound commands:
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  $1   The name of the character involking the action compound command.
  $2   The affected object.
  $3   For '.drive' and '.driven', the vehicle's destination.
       For '.give' and '.given', the recipient of the object.


  Key:
  ~~~
  * = Any object.
  C = Character
  E = Exit
  R = Room
  T = Thing

  A complete list of available action commands is given below...


  Command:    @command:      Executed:
  ~~~~~~~~    ~~~~~~~~~      ~~~~~~~~~
  close       .close     ET  Before container/exit is closed.
  close       .closed    ET  After container/exit is closed.
  drop/throw  .drop      T   Before object is dropped.
  drop/throw  .dropped   T   After object is dropped.
  drive/ride  .drive     T   Before vehicle is driven/riden.
  drive/ride  .driven    T   After vehicle has been driven/riden.
              .exit      E   Before going through an exit.
              .exited    E   After going through an exit.
  give        .give      T   Before object is given to someone else.
  give        .given     T   After object has been given to someone else.
  junk        .junk      T   Before object is junked.
  junk        .junked    T   After object is junked.
  lock        .lock      ET  Before container/exit is locked.
  lock        .locked    ET  After container/exit is locked.
  look        .look      *   Before object is looked at.
  look        .lookdesc  *   After object's description.
  look        .looked    *   After object is looked at.
  open        .open      ET  Before container/exit is opened.
  open        .opened    ET  After container/exit is opened.
  get/take    .take      T   Before object is picked up.
  get/take    .taken     T   After object is picked up.
  unlock      .unlock    ET  Before container/exit is unlocked.
  unlock      .unlocked  ET  After container/exit is unlocked.


  Restrictions:
  ~~~~~~~~~~~~~
  When action compound commands execute, they will run under the ID of their
  owner, unless the WIZARD flag is set or the action compound command is owned
  by Admin.

  The action compound command will also disallow writing to the character
  executing the compound command (For example, you can't change their
  description)  Again, the WIZARD flag or Admin. ownership removes this
  restriction.

  These restrictions are for security and to prevent abuse of action compound
  commands. 

  NOTE:  '.lookdesc' follows the rules for '.scan' and '.profile' when attached
         to a character (It executes under the ID of the character looked at.)
         Also, '.lookdesc' is executed when a character is scanned (Ideal for
         creating customised descriptions.)

  NOTE:  Action compound commands (And other compound commands starting with
         '.') cannot be directly executed from the command-line by typing
         their name.  However, they can be executed by #ID or directly by
         name from within another compound command.

  HINT:  To save Building Quota, try combining multiple action compound
         commands on the same object into one, by naming just one compound
         command with all the names you require, separated by ';', e.g:
         '.look;.lookdesc;.looked'.  You can then use the '{@?cmdname}' query
         command to test which action compound command has been involked.
        

  Other Action Compound Commands
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  The following is a list of other available action compound commands (Not
  subject to the above restrictions)  -  See individual help sections for
  more information on these...


  Command:  @command:       Executed:
  ~~~~~~~~  ~~~~~~~~~       ~~~~~~~~~
  enter     .enter     RT   Container or area is entered.
            .entercmd  C    Character enters a room.
  leave     .leave     RT   Container or area is exited.
            .leavecmd  C    Character leaves a room.
            .login     CRT  Character connects.
            .reconnect CRT  Character reconnects.
  QUIT      .logout    CRT  Character disconnects.
  page      .page      C    'page' message is sent to character.
  profile   .profile   C    Profile of character is viewed.
  tell      .tell      C    'tell' message is sent to character.
  scan      .scan      C    Character is scanned.
  use       .use       *    Object is used with the 'use' command.
  
-------------------------------------------------------------------------------

  .entercmd
  ~~~~~~~~~
  If you have a compound command on you called '.entercmd', it will be executed
  whenever you move to a new location (In the destination room), allowing you
  to create a custom entry message for your character, e.g:

  @command .entercmd = @oemote wanders into the room and greets everyone.

-------------------------------------------------------------------------------

  .leavecmd
  ~~~~~~~~~
  If you have a compound command on you called '.leavecmd', it will be executed
  whenever you move to a new location (In the room you left), allowing you to
  create a custom leave message for your character, e.g:

  @command .leavecmd = @oemote waves to everyone and leaves the room.

-------------------------------------------------------------------------------

  .enter
  ~~~~~~
  NOTE:  A '.enter' compound command attached to you has no effect (See
         '.entercmd' above.)

  A '.enter' compound command in a room or container executes when a
  character enters that room or any of the rooms within it.

  If the csuccess/cfailure branch of a '.enter' compound command is set to
  'HOME', the TCZ-based MUD will continue searching up the area-tree for
  another '.enter' compound command and execute it.

-------------------------------------------------------------------------------

  .leave
  ~~~~~~
  NOTE:  A '.leave' compound command attached to you has no effect (See
         '.leavecmd' above.)

  A '.leave' compound command in a room or container executes when a
  character leaves that room or any of the rooms within it (As long as
  their destination room isn't a room within the room the '.leave' is in.)

  If the csuccess/cfailure branch of a '.leave' compound command is set to
  'HOME', the TCZ-based MUD will continue searching up the area-tree for
  another '.leave' compound command and execute it.

-------------------------------------------------------------------------------

  .login
  ~~~~~~
  A '.login' compound command attached to you executes when you connect to the
  TCZ-based MUD (Useful for setting your preferences (Word-wrap, prompt, etc.))

  A '.login' compound command in a room or container executes when a
  character connects to the TCZ-based MUD and is in that room or any
  of the rooms within it.

  If the csuccess/cfailure branch of a '.login' compound command is set to
  'HOME', the TCZ-based MUD will continue searching up the area-tree for
  another '.login' compound command and execute it.

-------------------------------------------------------------------------------

  .reconnect
  ~~~~~~~~~~
  A '.reconnect' compound command attached to you executes when you reconnect 
  to the TCZ-based MUD (Useful for setting your preferences (Word-wrap, prompt, 
  etc.))

  A '.reconnect' compound command in a room or container executes when a
  character reconnects to the TCZ-based MUD and is in that room or any
  of the rooms within it.

  If the csuccess/cfailure branch of a '.reconnect' compound command is set to
  'HOME', the TCZ-based MUD will continue searching up the area-tree for
  another '.reconnect' compound command and execute it.

-------------------------------------------------------------------------------

  .logout
  ~~~~~~~
  A '.logout' compound command attached to you executes when you disconnect
  from the TCZ-based MUD.

  A '.logout' compound command in a room or container executes when a
  character disconnects from the TCZ-based MUD in that room or any of
  the rooms within it.

  If the csuccess/cfailure branch of a '.logout' compound command is set to
  'HOME', the TCZ-based MUD will continue searching up the area-tree for
  another '.logout' compound command and execute it.

-------------------------------------------------------------------------------

  .startup
  ~~~~~~~~
  This command (When owned by Root and placed in #4) is executed when the
  TCZ-based MUD is (re)started.

  NOTE:  The '.startup' compound command has a maximum execution time limit
         of 1 minute (This can be increased or decreased if neccessary using
         '@executionlimit' command.)

-------------------------------------------------------------------------------

  .shutdown
  ~~~~~~~~~
  This command (When owned by Root and placed in #4) is executed when the
  TCZ-based MUD is shutdown using the '@shutdown' command.

  NOTE:  The '.shutdown' compound command has a maximum execution time limit
         of 1 minute (This can be increased or decreased if neccessary using
         '@executionlimit' command.)

  NOTE:  The '.shutdown' command WILL NOT be executed if the TCZ-based MUD
         crashes and/or starts an emergency database dump.  It is only
         executed before normal shutdown.


===============================================================================
   >>>>>                    Version information...                     <<<<<
===============================================================================

Below is a list of all the major changes/improvements/additions to The Chatting
Zone (TCZ) source code in each version since version 2.0...


  Version 2.1  (31/05/1994  -  10/06/1994)
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  List/string/sentence processing queries added.
  '@maintenance' command (Destroys characters that haven't been used for a
  given period of time.)
  Local user list command ('lwho'.)
  Internal 'kick'/'junk' command.


  Version 2.2  (27/06/1994)
  ~~~~~~~~~~~~~~~~~~~~~~~~~
  ANSI colour support implemented.
  Last command recalling system implemented ('!!'.)
  Connection interface improved (Login screen.)
  E-mail address database and listing commands.
  '@if' selection command.
  '@for' and '@while' looping commands.
  '@with' linked list traversing command.
  '{@?dolist}' and '{@?insert}' list processing queries.
  '.' command added for testing the results of query commands.
  ' and ` can be used as well as " for saying messages.
  '.enter' and '.leave' compound commands fixed.
  Characters who aren't connected no longer appear in the contents list of
     rooms (Puppets still do though.)


  Version 2.3  (09/07/1994)
  ~~~~~~~~~~~~~~~~~~~~~~~~~
  Characters with Deity status ('@set <NAME> = DEITY'.)
  Built-in On-line Help System implemented.
  '{@?sort}' list processing query.
  '{@?lastconnected}' and '{@?totaltime}' queries.
  '@find' now uses wildcards for matching.
  '{@?wildcard}' string processing query.


  Version 2.4  (31/08/1994  -  06/10/1994)
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  '@admin' administrative options.
  'lastcommands' list.
  '@character' command (Allows Apprentice Wizards/Druids and above to create
      new characters.)
  '{@?lastcommand}' query.
  Vastly improved On-line Help System.
  Improved, faster text output routines.
  '@reload' help topic reloading command.
  '@contents'/'@count' command added.


  Version 3.0  (06/11/1994  -  31/11/1994)
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  '@eval' re-written from scratch (Vastly improved.)
  Editor implemented.
  Monetry system now handles floating point numbers, e.g:  1.50
  Recursion limits scrapped in favour of execution limits.
  Need for triple backslashes in '@if', '@while', etc. removed.
  Things and rooms can now have an 'outside description'  -  See '@odesc'.


  Version 3.1  (10/12/1994)
  ~~~~~~~~~~~~~~~~~~~~~~~~~
  Connection interface improved further.
  QUIET rooms/things implemented  -  No talking allowed in them.
  Name prefixes and suffixes added (See '@prefix' and '@suffix'.)
  Bad language censor and max. connections limiting option added to '@admin'.
  '@notify' command added.
  '@echolist' command added.
  Improved output of exit names (In 'Obvious exits:' list.)
  'chat' command added (Which allows chatting over 'chatting channels'.)
  Better handling of Telnet protocol implemented.


  Version 3.2  (28/12/1994  -  06/02/1995)
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  '@massforce' removed ('@with' makes it redundant.)
  '@toad' removed ('@boot' and '@destroy' are much better.)
  Telnet protocol handling improved further.
  Grouping/range operators implemented.
  '@find' and '@list' vastly improved.
  'emergency', '@ban' and '@duplicate' commands added.
  Support for 8 colour ANSI added.
  Lock on characters determines who can/can't 'page'/'tell' them messages.
  '.editsucc', '.editfail' and '.permanent' commands added to the editor.
  '@with' enhanced.
  New 'set' command to set your preferences for ANSI colour, word-wrap, etc.

   
  Version 3.3  (12/02/1995  -  21/02/1995)
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  New 'set' command 'set pagebell on|off' (Stops paged messages from beeping.)
  New 'email public' and 'email private' commands.
  Trace sequence improved ('@set <COMMAND> = TRACING'.)
  New '@bps' command for giving out Building Points.
  '@stats tcz' and '@stats chars' (Admin. only) commands added (TCZ-based MUD
      server and character statistics.)
  Emote/think tells ('tell <NAME> [=] :<ACTION>' and 'tell <NAME> [=]
      +<THOUGHT>'.)
  PRIVATE and READONLY flags added.
  New 'set underlining' preference.
  CENSORED flag and 'privileges' command added.
  '{@?evallock}' query command added.
  '@mexec' command and '{@?email}' query command added.
  '@break' and '@return' flow control commands added.
  '@alias' and 'aliases' commands added.


  Version 3.4  (23/03/1995  -  05/04/1995)
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  Database structure re-designed  -  More memory efficient and more flexible.
  Personal friends lists and friends chatting channel implemented.
  '{@?csucc}' and '{@?cfail}' query commands added.
  '{@?format}' query command added (Formats text.)
  New 'set' command 'set timediff' (Sets time difference for non-UK users.)
  '{@?wrap}', '{@?timediff}' and '{@?scene}' query commands added.
  New 'set' command 'set bsx' (Used to switch BSX graphics support on/off.)
  '@sanity' command added (Performs sanity checks and corrections on the DB.)
  '{@?newline}' and '{@?pad}' query commands added.
  Built-in 'scan' ('finger') command added.


  Version 3.5  (10/04/1995  -  22/05/1995)
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  Dynamic arrays implemented.
  Indexing added to '@with'.
  Ability to page/tell messages to lists of users added.
  'recall' command added (Allows you to recall last 8 pages/tells (And reply
      to them.))
  PERMANENT flag added  -  INVISIBLE flag can no-longer be set on characters.
  Inheritance implemented (See '@parent', '{@?parent}' and '{@?myleaf}'.)
  Right, left and centre text justification with '{@?pad}'.
  Properties implemented (See '@property' and '{@?properties}'.)
  '%i' (Inverse) ANSI colour substitution added  -  Allows background colour
      to be set (Gives inversed text when ANSI colour is off.)
  'afk' command for when you need to go AFK (Away From Keyboard.)
  '.' now does 'tell'  -  '~' does what '.' used to do ('@echo'.)


  Version 3.6  (26/05/1995  -  21/06/1995)
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  Dynamic array element indexing implemented.
  Ability to page/tell messages to connected admin ('page admin <MESSAGE>'.)
  'give' command re-instated (With improvements.)
  '{@?lower}' and '{@?upper}' string processing queries.
  Building Quotas implemented.
  New combat system building commands implemented.
  '{@?subjective}', '{@?objective}' and '{@?possessive}' pronoun queries.
  Time delayed '@shutdown' implemented.
  '@log' command (Admin only) implemented.
  Zero Memory Database Dumping implemented.


  Version 3.7  (08/07/1995  -  09/09/1995)
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  'fset' command (Allows you to set/reset friend flags on your friends.)
  '@groupsize' replaced with 'set screenheight <SCREEN HEIGHT>'.
  New '@admin' option for adjusting server time on-line.
  SHOUT and BOOT flags implemented (For Admin.)
  '@stats other' command (Other DB statistics (Non-object.))
  '@site' command implemented.
  'where *<NAME>' tells you where a character presently is and who they're with
      (I.e:  Who's in the same room as them.)
  '@eval' may now be used in '%{<CMD>}' substitutions.
  '.initialise' compound command implemented (Executed when the TCZ-based MUD
      is started to reset various objects in database to an initial
      status/location.)
  '@site stats' command (Registered Internet site statistics.)


  Version 3.8  (19/09/1995  -  06/11/1995)
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  New topic-based BBS system implemented.
  Built-in 'visit' ('go') and 'to' commands.
  '@www' and '{@?www}' commands added.
  'anon' and 'allowanon' BBS commands added.
  'abs' (Absolute value) operator added to '@calc'/'@eval'.
  Experienced Builder status implemented ('@set <NAME> = EXPERIENCED'.)
  'rem' command added (Allows comments in compound commands.)
  '@breakloop' flow control command added.
  Reserved variable $7 added (Used by '@with'.)
  '{@?privileges}' return values brought up-to-date with character types.
  '@site address' site command added (Allows IP address of site to be changed.)
  GUESTS site flag added (Determines whether Guests may connect from a site.)
  '@maintenance' implemented into '@admin'.
  Database dumping routine improved (More efficient.)
  Built-in colour named Guest character system implemented.
  Wildcard matching routine enhanced.


  Version 3.9  (09/11/1995  -  14/12/1995)
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  'converse' mode implemented.
  Friends lists can now be processed using '@with'.
  '{@?termtype}' query added (Returns your current terminal type.)
  Database of terminal definitions for fast and efficient lookup.
  '@returnvalue' command added.
  Measures to prevent page/tell/mail 'bombing' implemented.
  '@stats cmd' command (Command execution statistics.)
  '.append' editor command added.
  '@bootdead' command added (Allows you to boot your 'dead' connections.)
  Further improvements to Telnet handling code.
  Built-in hourly chiming clock implemented.


  Version 4.0  (01/01/1996  -  11/03/1996)
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  Druid ('Non-building') Admin ranks implemented.
  'uptime' command added (Displays server 'up-time'.)
  '{@?set}' can be used to check for multiple flags and friend flags.
  Articles and '{@?article}' query command implemented.
  '@prompt' command added (Implements 'interactive' prompting.)
  'escape' command added (Admin. only.)
  '@destall' command added (Admin. only.)
  'settings' command added (Gives brief details about an object.)
  SECRET flag implemented (Allows you to hide on 'where', etc.)
  BEEP and PAGETELLFRIENDS friend flags implemented.
  '@goto' command and '{@?line}' query command implemented.
  '{@?executed}', '{@?execution}' and '{@?nested}' query commands.
  'latest me|*<NAME>', 'summary' & '{@?messages}' BBS commands/query commands.
  '@partner' command (Allows users to be 'net' married to each other.)
  Cyclic BBS message deletion (When topic is full) implemented.
  Enhanced database compression routine implemented, reducing memory usage.
  '.tell' and '.scan' compound command support implemented.
  '@stats resource' command (Admin. only.)
  '@monitor' command to monitor abusive/problem users (Admin. only.)
  SKIPOBJECTS flag implemented.
  'read next/prev' BBS command (Read next/previous message in topic.)


  Version 4.1  (16/03/1996  -  03/06/1996)
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  '{@?sortnumeric}' query command implemented.
  '{@?pad}' now accepts more than one character as the pad character.
  The BBS can now be browsed from anywhere using 'bbs <BBS COMMAND>'.
  '{@?itemexact}' and '{@?wordexact}' query commands implemented.
  '@foreach' command implemented (Replaces the now obsolete '@dolist' command.)
  Multiple lined versions of '@if', '@for', '@with', '@while' and '@foreach'.
  '@sort' command implemented (Sorts dynamic arrays.)
  New enhanced trace sequence implemented.
  Object date stamps and '{@?created}'/'{@?lastused}' query commands.
  '.entercmd' & '.leavecmd' compound commands for custom enter/leave messages.
  'warp' command (Teleports you to a random ABODE location.)
  'warn' (Admin only) command for official warnings.
  VISIT friend flag implemented (Allows users to unconditionally 'visit' you.)
  'addanon', 'replyanon', 'copy' and 'owner' BBS commands implemented.
  'tutorial' command implemented (On-Line Tutorials on various subjects.)
  READ, WRITE, CREATE, DESTROY and SHARABLE friend flags implemented.
  '{@?cmdname}' and '{@?filter}' query commands implemented.
  'more' paging facility implemented.
  '@undestroy' command implemented (Allows destroyed objects to be recovered.)
  '.numbering' and '.tutorial' editor commands implemented.
  BBS and MAIL flags implemented.


  Version 4.2  (03/06/1996  -  16/06/1998)
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  Built-in 'welcome', 'assist' and 'summon' commands implemented.
  '@feeling' command and '{@?feeling}' query command implemented.
  'wake' command implemented.
  '{@?datetime}' query command and LONGDATE date/time format implemented.
  '@birthday', '{@?birthday}' and '{@?age}' (OBSOLETE) commands/query commands.
  Assistant status implemented.
  '@size', '{@?size}' and '{@?csize}' commands/query commands implemented.
  Compound command execution time limits implemented.
  '@expiry' command and '{@?expiry}' query commands implemented.
  '{@?indexno}', '{@?weight}' and '{@?prompt}' query commands implemented.
  BSX graphics support obsoleted (Replaced by World Wide Web interface.)
  EXPIRY, IMMOVABLE, TRANSFERABLE, VALIDATED, VISIT and WARP flags implemented.
  Optional (Short) ban time may be specified with '@boot'.
  '%z' substitution added for black text.
  '@censor' command implemented.
  Sub-topics and readers list for each BBS message implemented.
  Absolute (%a) and reflexive (%v) pronouns added.
  '@partner' upgraded to support engagement as well as marriage.
  Vehicles implemented (TRANSPORT flag and 'drive'/'ride' commands.)
  ABORT fuses and '@continue' command implemented.
  'admin' command implemented (Allows Mortals to list current Admin.)
  'reply', 'repeat' and 'idle' commands implemented.
  Profiles implemented ('profile', '@profile' and '{@?profile}'.)
  'search', 'replies' and 'messages' BBS commands implemented.
  '{@?alias}', '{@?status}', '{@?separator}' and '{@?censor}' implemented.
  'spod', 'longspod', 'lastseen' and '@rank' commands implemented.
  World Wide Web interface implemented.

  (Revision 1  -  15/03/1997)
  Multiple E-mail addresses and E-mail forwarding facility implemented.
  Revised financial system implemented (Credits.)
  RETIRED (Admin only.), BBS-INFORM and SENDHOME flags implemented.
  COMMANDS and EXCLUDE friend flags implemented.

  (Revision 2  -  02/06/1997)
  Support added for externally compressed databases to save disk space.
  '@banish' command implemented (Admin. only.)
  '{@?peak}' and '{@?uptime}' query commands implemented.
  'size' and 'csize' options added to '@rank' (Admin. only.)
  '@stats connections' implemented (Admin. only.)
  'creations' and 'connections' options added to '@admin' (Admin. only.)
  '@credit' command implemented (Admin. only.)
  Birthday of user moved to profile.
  Picture field added to profile (Allows setting of URL of user picture.)
  Auto-generation of lists of user home pages, pictures, scans and profiles
     added to the World Wide Web Interface.
  '@output' command implemented.
  'appendanon' and 'ignore' BBS commands implemented.
  'titles' command implemented.
  '{@?result}' and '{@?capitalise}' query commands implemented.
  Global aliases implemented (Global aliases owner set using '@admin'.)
  HELP flag implemented.

  (Revision 3  -  27/07/1997)
  Warning of failed logins since last successful connection.
  'banned' option for '@list'/'@find' (Currently banned characters.)
  Improvements made to financial system ('Wage' of 25 credits for each hour
     of connect time, income/expenditure on statement, interest/debit and
     overdraft removed.)
  '{@?expenditure}', '{@?income}', '{@?profit}' and '{@?quarter}' query
     commands implemented.
  Users are now automatically sent AFK after 10 minutes (Default) idle time.
  ';' replaced by '@areawrite' (';' is now a short-hand for ':' ('emote'.))
  Payment restriction implemented ('restrict' bank command and
     '{@?restriction}' query command.)
  BBS message voting expiry implemented ('[bbs] vote'.)


  Version 4.3  (16/06/1998  -  Present)
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  Yearly events implemented ('events'.)
  Auto-updating Admin mailing list implemented (tczadmin@tcz.mud.host)
  '{@?pending}' query command added.
  'use' command implemented.
  New hierarchical matching system implemented.
  '@cstring' can be used on rooms and things.
  '{@?cstring}' query command implemented.
  '@estring' and '{@?estring}' implemented.
  Improvements to combat building commands.
  '@logentry' command added (Custom log entries.)
  '.action' compound commands added.  
  '{@?link}', '{@?tczlink}' and '{@?image}' query commands added for HTML.
  '{@?protect}' string processing query added.
  Hard-coded map implemented ('map'.)
  '{@?colourmap}' query command implemented.
  New HTML Interface JAVA enhancements implemented.
  Graphical smileys (Emoticons) added to the HTML Interface.
  Automatic formatting of hyperlinks added to the HTML Interface.
  '{@?number}' and '{@?boolean}' query commands added.
  '{@?alpha}', '{@?digit}', '{@?alnum}' and '{@?punct}' query commands added.
  '{@?islower}' and  '{@?isupper}' query commands added.
  User log files implemented.
  '@purge' command implemented (Same as '@destroy <OBJECT> = permanent'.)
  The HTML Interface now supports text background colours.
  '{@?internal}' query command added.
  Maximum size of database text fields is now 4Kb (1Kb larger.)
  Module author information implemented ('modules' and 'authors'.)
  Accumulated and longest recorded uptime added to the 'uptime' command.
  '{@?version}' query command added.
  '.startup' and '.shutdown' compound commands implemented.
  '{@?longestdate}' and '{@?averagetime}' query commands added.
  '{@?totallogins}' and '{@?averagelogins}' query commands added.
  '{@?totalidle}' and '{@?averageidle}' query commands added.
  '{@?totalactive}' and '{@?averageactive}' query commands added.
  '@rank active', '@rank avgactive', '@rank avgidle', '@rank avglogins',
    '@rank avgtotal', '@rank created', '@rank idle', '@rank lastused' and
    '@rank logins' implemented.
  '@case' selection command implemented.
  Home rooms implemented ('homeroom' and '@homeroom'.)


===============================================================================
   >>>>>                  Credits & Acknowledgements                   <<<<<
===============================================================================

  We would like to thank the following people, companies and organisations
  for helping make the TCZ project possible...

  *  The authors of TinyMUD (1989) and UglyMUG (1990-1991) for the codebases
     on which TCZ is based:

        For TinyMUD, our thanks go to:  David Applegate, James Aspnes and
                                        Bennet Yee. 

        For UglyMUG, our thanks go to:  Peter Crowther, Robin Heydon, Nick
                                        Huggins, Malcolm J. Harwood, Dave
                                        Proctor and Gary D. Wallage.

  *  J.P.Boggis, the sole developer of TCZ from beta code (21/12/1993) to
     pre-release v4.3 (11/04/1999.)  The TCZ 2000 Project commenced on
     11/04/1999, preparing the TCZ source code for public release and
     introducing S.A.Boggis to working on the code.

  *  Linus Torvalds for the Linux Operating System (Freeware UNIX for PC's),
     under which TCZ was mainly developed  -  A practical alternative to
     Microsoft and reliable UNIX server Operating System.

  *  Flux BBS (Run by Termisoc at the University of Plymouth) for hosting the
     first public TCZ on a trial basis (Spring/summer 1994, running v2.x of
     the code.)

  *  Lasermoon Ltd., UK (No-longer trading) for providing the original TCZ MUD
     with its first permanent site on the Internet (It was originally started
     at Lasermoon on 28th November 1994, running v3.2 of the code.)

  *  AngliaNet Ltd., UK (Now owned by NetCIB) for providing the original TCZ
     MUD with its second permanent site on the Internet.

  *  The Information, Media and Communication (IMC) Research Group in the
     Department of Computer Science, Queen Mary, University of London for
     hosting the original TCZ MUD between 2001 and 2004 as part of an
     official research project.

  *  The users of the original TCZ MUD, for contributing to the friendly
     atmosphere and helping make it the friendly and enjoyable place it is.

  *  The administrators of the original TCZ MUD for all of the hard work and
     dedication that they have put into making it what it is.

===============================================================================
